!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=14)}([function(t,e,i){"use strict";i.d(e,"c",(function(){return s})),i.d(e,"a",(function(){return a})),i.d(e,"d",(function(){return n})),i.d(e,"b",(function(){return r}));const s=(t,e)=>{t.classList.toggle(e)};document.querySelectorAll(".select__dropdown-input").forEach(t=>{t.addEventListener("input",(function(e){!function(t){t.validity.typeMismatch?(t.setCustomValidity("Please, enter an integer"),t.reportValidity()):t.rangeUnderflow?(t.setCustomValidity("We need a higher number!"),t.reportValidity()):t.rangeOverflow?(t.setCustomValidity("Thats too high!"),t.reportValidity()):(t.setCustomValidity(""),t.reportValidity())}(t)}))});const a=t=>({first:{id:t[0],amount:2},second:{id:t[1],amount:2},third:{id:t[2],amount:0}}),n=(t,e,i)=>{e===t.first.id?t.first.amount=i:e===t.second.id?t.second.amount=i:e===t.third.id&&(t.third.amount=i)},r=(t,e)=>{var i=t.parent().find("input").val();if("+"==t.text())var s=parseFloat(i)+1<e.attr("max")?parseFloat(i)+1:e.attr("max");else if(i>0)s=parseFloat(i)-1;else s=0;return e.val(s),s}},function(t,e,i){"use strict";i.d(e,"a",(function(){return s}));i(2);const s={language:{today:"Применить"},autoClose:!0,minDate:new Date,dateFormat:"dd M",multipleDatesSeparator:" - ",todayButton:!0,clearButton:!0,prevHtml:'<svg width="17" height="18" viewBox="0 0 17 18"><path d="M16.1755 8.01562V9.98438H3.98801L9.56613 15.6094L8.15988 17.0156L0.144258 9L8.15988 0.984375L9.56613 2.39062L3.98801 8.01562H16.1755Z" fill="#BC9CFF"></path></svg>',nextHtml:'<svg width="17" height="18" viewBox="0 0 17 18"><path d="M8.36301 0.984375L16.3786 9L8.36301 17.0156L6.95676 15.6094L12.5349 9.98438H0.347383V8.01562H12.5349L6.95676 2.39062L8.36301 0.984375Z" fill="#BC9CFF"></path></svg>',navTitles:{days:"MM  <i>yyyy</i>"}}},function(t,e,i){i(3),i(4),i(5),i(6)},function(t,e){var i,s,a,n,r,o,h;n=!1,r={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},o={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},(a=h=function(t,e){this.el=t,this.$el=$(t),this.opts=$.extend(!0,{},r,e,this.$el.data()),null==i&&(i=$("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?$(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()}).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){n||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new $.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new $.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new $.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),$(window).on("resize.adp",this._onResize.bind(this)),$("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(t){return-1!==this.opts.weekends.indexOf(t)},_defineLocale:function(t){"string"==typeof t?(this.loc=$.fn.datepicker.language[t],this.loc||(console.warn("Can't find language \""+t+'" in Datepicker.language, will use "ru" instead'),this.loc=$.extend(!0,{},$.fn.datepicker.language.ru)),this.loc=$.extend(!0,{},$.fn.datepicker.language.ru,$.fn.datepicker.language[t])):this.loc=$.extend(!0,{},$.fn.datepicker.language.ru,t),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var e=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(e("aa"))||this.loc.timeFormat.match(e("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){n=!0,i.append('<div class="datepickers-container" id="datepickers-container"></div>'),s=$("#datepickers-container")},_buildBaseHtml:function(){var t,e=$('<div class="datepicker-inline">');t="INPUT"==this.el.nodeName?this.opts.inline?e.insertAfter(this.$el):s:e.appendTo(this.$el),this.$datepicker=$('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(t),this.$content=$(".datepicker--content",this.$datepicker),this.$nav=$(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var t,e=this.selectedDates,i=a.getParsedDate(e[0]),s=this,n=new Date(i.year,i.month,i.date,i.hours,i.minutes);t=e.map((function(t){return s.formatDate(s.loc.dateFormat,t)})).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(n=e.map((function(t){var e=a.getParsedDate(t);return new Date(e.year,e.month,e.date,e.hours,e.minutes)}))),this._prevOnSelectValue=t,this.opts.onSelect(t,n,this)},next:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month+1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year+1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year+10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},prev:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month-1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year-1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year-10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},formatDate:function(t,e){e=e||this.date;var i,s=t,n=this._getWordBoundaryRegExp,r=this.loc,o=a.getLeadingZeroNum,h=a.getDecade(e),d=a.getParsedDate(e),l=d.fullHours,c=d.hours,u=t.match(n("aa"))||t.match(n("AA")),m="am",p=this._replacer;switch(this.opts.timepicker&&this.timepicker&&u&&(l=o((i=this.timepicker._getValidHoursFromDate(e,u)).hours),c=i.hours,m=i.dayPeriod),!0){case/@/.test(s):s=s.replace(/@/,e.getTime());case/aa/.test(s):s=p(s,n("aa"),m);case/AA/.test(s):s=p(s,n("AA"),m.toUpperCase());case/dd/.test(s):s=p(s,n("dd"),d.fullDate);case/d/.test(s):s=p(s,n("d"),d.date);case/DD/.test(s):s=p(s,n("DD"),r.days[d.day]);case/D/.test(s):s=p(s,n("D"),r.daysShort[d.day]);case/mm/.test(s):s=p(s,n("mm"),d.fullMonth);case/m/.test(s):s=p(s,n("m"),d.month+1);case/MM/.test(s):s=p(s,n("MM"),this.loc.months[d.month]);case/M/.test(s):s=p(s,n("M"),r.monthsShort[d.month]);case/ii/.test(s):s=p(s,n("ii"),d.fullMinutes);case/i/.test(s):s=p(s,n("i"),d.minutes);case/hh/.test(s):s=p(s,n("hh"),l);case/h/.test(s):s=p(s,n("h"),c);case/yyyy/.test(s):s=p(s,n("yyyy"),d.year);case/yyyy1/.test(s):s=p(s,n("yyyy1"),h[0]);case/yyyy2/.test(s):s=p(s,n("yyyy2"),h[1]);case/yy/.test(s):s=p(s,n("yy"),d.year.toString().slice(-2))}return s},_replacer:function(t,e,i){return t.replace(e,(function(t,e,s,a){return e+i+a}))},_getWordBoundaryRegExp:function(t){var e="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+e+")("+t+")($|<|"+e+")","g")},selectDate:function(t){var e=this,i=e.opts,s=e.parsedDate,n=e.selectedDates.length,r="";if(Array.isArray(t))t.forEach((function(t){e.selectDate(t)}));else if(t instanceof Date){if(this.lastSelectedDate=t,this.timepicker&&this.timepicker._setTime(t),e._trigger("selectDate",t),this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),"days"==e.view&&t.getMonth()!=s.month&&i.moveToOtherMonthsOnSelect&&(r=new Date(t.getFullYear(),t.getMonth(),1)),"years"==e.view&&t.getFullYear()!=s.year&&i.moveToOtherYearsOnSelect&&(r=new Date(t.getFullYear(),0,1)),r&&(e.silent=!0,e.date=r,e.silent=!1,e.nav._render()),i.multipleDates&&!i.range){if(n===i.multipleDates)return;e._isSelected(t)||e.selectedDates.push(t)}else i.range?2==n?(e.selectedDates=[t],e.minRange=t,e.maxRange=""):1==n?(e.selectedDates.push(t),e.maxRange?e.minRange=t:e.maxRange=t,a.bigger(e.maxRange,e.minRange)&&(e.maxRange=e.minRange,e.minRange=t),e.selectedDates=[e.minRange,e.maxRange]):(e.selectedDates=[t],e.minRange=t):e.selectedDates=[t];e._setInputValue(),i.onSelect&&e._triggerOnChange(),i.autoClose&&!this.timepickerIsActive&&(i.multipleDates||i.range?i.range&&2==e.selectedDates.length&&e.hide():e.hide()),e.views[this.currentView]._render()}},removeDate:function(t){var e=this.selectedDates,i=this;if(t instanceof Date)return e.some((function(s,n){if(a.isSame(s,t))return e.splice(n,1),i.selectedDates.length?i.lastSelectedDate=i.selectedDates[i.selectedDates.length-1]:(i.minRange="",i.maxRange="",i.lastSelectedDate=""),i.views[i.currentView]._render(),i._setInputValue(),i.opts.onSelect&&i._triggerOnChange(),!0}))},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(t,e){var i=arguments.length,s=this.lastSelectedDate;return 2==i?this.opts[t]=e:1==i&&"object"==typeof t&&(this.opts=$.extend(!0,this.opts,t)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(s&&this.timepicker._handleDate(s),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),s&&(s.setHours(this.timepicker.hours),s.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var t=this.date.getTime();this.silent=!0,this.minTime>t&&(this.date=this.minDate),this.maxTime<t&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(t,e){var i=!1;return this.selectedDates.some((function(s){if(a.isSame(s,t,e))return i=s,!0})),i},_setInputValue:function(){var t,e=this,i=e.opts,s=e.loc.dateFormat,a=i.altFieldDateFormat,n=e.selectedDates.map((function(t){return e.formatDate(s,t)}));i.altField&&e.$altField.length&&(t=(t=this.selectedDates.map((function(t){return e.formatDate(a,t)}))).join(this.opts.multipleDatesSeparator),this.$altField.val(t)),n=n.join(this.opts.multipleDatesSeparator),this.$el.val(n)},_isInRange:function(t,e){var i=t.getTime(),s=a.getParsedDate(t),n=a.getParsedDate(this.minDate),r=a.getParsedDate(this.maxDate),o=new Date(s.year,s.month,n.date).getTime(),h=new Date(s.year,s.month,r.date).getTime(),d={day:i>=this.minTime&&i<=this.maxTime,month:o>=this.minTime&&h<=this.maxTime,year:s.year>=n.year&&s.year<=r.year};return e?d[e]:d.day},_getDimensions:function(t){var e=t.offset();return{width:t.outerWidth(),height:t.outerHeight(),left:e.left,top:e.top}},_getDateFromCell:function(t){var e=this.parsedDate,i=t.data("year")||e.year,s=null==t.data("month")?e.month:t.data("month"),a=t.data("date")||1;return new Date(i,s,a)},_setPositionClasses:function(t){var e=(t=t.split(" "))[0],i="datepicker -"+e+"-"+t[1]+"- -from-"+e+"-";this.visible&&(i+=" active"),this.$datepicker.removeAttr("class").addClass(i)},setPosition:function(t){t=t||this.opts.position;var e,i,s=this._getDimensions(this.$el),a=this._getDimensions(this.$datepicker),n=t.split(" "),r=this.opts.offset,o=n[0],h=n[1];switch(o){case"top":e=s.top-a.height-r;break;case"right":i=s.left+s.width+r;break;case"bottom":e=s.top+s.height+r;break;case"left":i=s.left-a.width-r}switch(h){case"top":e=s.top;break;case"right":i=s.left+s.width-a.width;break;case"bottom":e=s.top+s.height-a.height;break;case"left":i=s.left;break;case"center":/left|right/.test(o)?e=s.top+s.height/2-a.height/2:i=s.left+s.width/2-a.width/2}this.$datepicker.css({left:i,top:e})},show:function(){var t=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,t&&this._bindVisionEvents(t)},hide:function(){var t=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),t&&this._bindVisionEvents(t)},down:function(t){this._changeView(t,"down")},up:function(t){this._changeView(t,"up")},_bindVisionEvents:function(t){this.$datepicker.off("transitionend.dp"),t(this,!1),this.$datepicker.one("transitionend.dp",t.bind(this,this,!0))},_changeView:function(t,e){t=t||this.focused||this.date;var i="up"==e?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),i<0&&(i=0),this.silent=!0,this.date=new Date(t.getFullYear(),t.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[i]},_handleHotKey:function(t){var e,i,s,n=a.getParsedDate(this._getFocusedDate()),r=this.opts,o=!1,h=!1,d=!1,l=n.year,c=n.month,u=n.date;switch(t){case"ctrlRight":case"ctrlUp":c+=1,o=!0;break;case"ctrlLeft":case"ctrlDown":c-=1,o=!0;break;case"shiftRight":case"shiftUp":h=!0,l+=1;break;case"shiftLeft":case"shiftDown":h=!0,l-=1;break;case"altRight":case"altUp":d=!0,l+=10;break;case"altLeft":case"altDown":d=!0,l-=10;break;case"ctrlShiftUp":this.up()}s=a.getDaysCount(new Date(l,c)),i=new Date(l,c,u),s<u&&(u=s),i.getTime()<this.minTime?i=this.minDate:i.getTime()>this.maxTime&&(i=this.maxDate),this.focused=i,e=a.getParsedDate(i),o&&r.onChangeMonth&&r.onChangeMonth(e.month,e.year),h&&r.onChangeYear&&r.onChangeYear(e.year),d&&r.onChangeDecade&&r.onChangeDecade(this.curDecade)},_registerKey:function(t){this.keys.some((function(e){return e==t}))||this.keys.push(t)},_unRegisterKey:function(t){var e=this.keys.indexOf(t);this.keys.splice(e,1)},_isHotKeyPressed:function(){var t,e=!1,i=this.keys.sort();for(var s in o)t=o[s],i.length==t.length&&t.every((function(t,e){return t==i[e]}))&&(this._trigger("hotKey",s),e=!0);return e},_trigger:function(t,e){this.$el.trigger(t,e)},_focusNextCell:function(t,e){e=e||this.cellType;var i=a.getParsedDate(this._getFocusedDate()),s=i.year,n=i.month,r=i.date;if(!this._isHotKeyPressed()){switch(t){case 37:"day"==e&&(r-=1),"month"==e&&(n-=1),"year"==e&&(s-=1);break;case 38:"day"==e&&(r-=7),"month"==e&&(n-=3),"year"==e&&(s-=4);break;case 39:"day"==e&&(r+=1),"month"==e&&(n+=1),"year"==e&&(s+=1);break;case 40:"day"==e&&(r+=7),"month"==e&&(n+=3),"year"==e&&(s+=4)}var o=new Date(s,n,r);o.getTime()<this.minTime?o=this.minDate:o.getTime()>this.maxTime&&(o=this.maxDate),this.focused=o}},_getFocusedDate:function(){var t=this.focused||this.selectedDates[this.selectedDates.length-1],e=this.parsedDate;if(!t)switch(this.view){case"days":t=new Date(e.year,e.month,(new Date).getDate());break;case"months":t=new Date(e.year,e.month,1);break;case"years":t=new Date(e.year,0,1)}return t},_getCell:function(t,e){e=e||this.cellType;var i,s=a.getParsedDate(t),n='.datepicker--cell[data-year="'+s.year+'"]';switch(e){case"month":n='[data-month="'+s.month+'"]';break;case"day":n+='[data-month="'+s.month+'"][data-date="'+s.date+'"]'}return(i=this.views[this.currentView].$el.find(n)).length?i:$("")},destroy:function(){this.$el.off(".adp").data("datepicker",""),this.selectedDates=[],this.focused="",this.views={},this.keys=[],this.minRange="",this.maxRange="",this.opts.inline||!this.elIsInput?this.$datepicker.closest(".datepicker-inline").remove():this.$datepicker.remove()},_handleAlreadySelectedDates:function(t,e){this.opts.range?this.opts.toggleSelected?this.removeDate(e):2!=this.selectedDates.length&&this._trigger("clickCell",e):this.opts.toggleSelected&&this.removeDate(e),this.opts.toggleSelected||(this.lastSelectedDate=t,this.opts.timepicker&&(this.timepicker._setTime(t),this.timepicker.update()))},_onShowEvent:function(t){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(t){this.inFocus=!0},_onMouseUpDatepicker:function(t){this.inFocus=!1,t.originalEvent.inFocus=!0,t.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(t){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(t){t.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(t){t.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(t){var e=t.which;if(this._registerKey(e),e>=37&&e<=40&&(t.preventDefault(),this._focusNextCell(e)),13==e&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var i=this._isSelected(this.focused,this.cellType);if(!i)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(i,this.focused)}}27==e&&this.hide()},_onKeyUp:function(t){var e=t.which;this._unRegisterKey(e)},_onHotKey:function(t,e){this._handleHotKey(e)},_onMouseEnterCell:function(t){var e=$(t.target).closest(".datepicker--cell"),i=this._getDateFromCell(e);this.silent=!0,this.focused&&(this.focused=""),e.addClass("-focus-"),this.focused=i,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(t){$(t.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(t,e,i){var s=new Date,a=!1;this.selectedDates.length&&(a=!0,s=this.lastSelectedDate),s.setHours(e),s.setMinutes(i),a||this._getCell(s).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(s)},_onClickCell:function(t,e){this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),this.selectDate(e)},set focused(t){if(!t&&this.focused){var e=this._getCell(this.focused);e.length&&e.removeClass("-focus-")}this._focused=t,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=t)},get focused(){return this._focused},get parsedDate(){return a.getParsedDate(this.date)},set date(t){if(t instanceof Date)return this.currentDate=t,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),t},get date(){return this.currentDate},set view(t){if(this.viewIndex=this.viewIndexes.indexOf(t),!(this.viewIndex<0))return this.prevView=this.currentView,this.currentView=t,this.inited&&(this.views[t]?this.views[t]._render():this.views[t]=new $.fn.datepicker.Body(this,t,this.opts),this.views[this.prevView].hide(),this.views[t].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(t),this.elIsInput&&this.visible&&this.setPosition()),t},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var t=a.getParsedDate(this.minDate);return new Date(t.year,t.month,t.date).getTime()},get maxTime(){var t=a.getParsedDate(this.maxDate);return new Date(t.year,t.month,t.date).getTime()},get curDecade(){return a.getDecade(this.date)}},a.getDaysCount=function(t){return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()},a.getParsedDate=function(t){return{year:t.getFullYear(),month:t.getMonth(),fullMonth:t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1,date:t.getDate(),fullDate:t.getDate()<10?"0"+t.getDate():t.getDate(),day:t.getDay(),hours:t.getHours(),fullHours:t.getHours()<10?"0"+t.getHours():t.getHours(),minutes:t.getMinutes(),fullMinutes:t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes()}},a.getDecade=function(t){var e=10*Math.floor(t.getFullYear()/10);return[e,e+9]},a.template=function(t,e){return t.replace(/#\{([\w]+)\}/g,(function(t,i){if(e[i]||0===e[i])return e[i]}))},a.isSame=function(t,e,i){if(!t||!e)return!1;var s=a.getParsedDate(t),n=a.getParsedDate(e),r=i||"day";return{day:s.date==n.date&&s.month==n.month&&s.year==n.year,month:s.month==n.month&&s.year==n.year,year:s.year==n.year}[r]},a.less=function(t,e,i){return!(!t||!e)&&e.getTime()<t.getTime()},a.bigger=function(t,e,i){return!(!t||!e)&&e.getTime()>t.getTime()},a.getLeadingZeroNum=function(t){return parseInt(t)<10?"0"+t:t},a.resetTime=function(t){if("object"==typeof t)return t=a.getParsedDate(t),new Date(t.year,t.month,t.date)},$.fn.datepicker=function(t){return this.each((function(){if($.data(this,"datepicker")){var e=$.data(this,"datepicker");e.opts=$.extend(!0,e.opts,t),e.update()}else $.data(this,"datepicker",new h(this,t))}))},$.fn.datepicker.Constructor=h,$.fn.datepicker.language={ru:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},$((function(){$(".datepicker-here").datepicker()}))},function(t,e){var i,s,a;i={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},s=$.fn.datepicker,a=s.Constructor,s.Body=function(t,e,i){this.d=t,this.type=e,this.opts=i,this.$el=$(""),this.opts.onlyTimepicker||this.init()},s.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",$.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=$(i[this.type]).appendTo(this.d.$content),this.$names=$(".datepicker--days-names",this.$el),this.$cells=$(".datepicker--cells",this.$el)},_getDayNamesHtml:function(t,e,i,s){return i=i||"",(s=null!=s?s:0)>7?i:7==(e=null!=e?e:t)?this._getDayNamesHtml(t,0,i,++s):(i+='<div class="datepicker--day-name'+(this.d.isWeekend(e)?" -weekend-":"")+'">'+this.d.loc.daysMin[e]+"</div>",this._getDayNamesHtml(t,++e,i,++s))},_getCellContents:function(t,e){var i="datepicker--cell datepicker--cell-"+e,s=new Date,n=this.d,r=a.resetTime(n.minRange),o=a.resetTime(n.maxRange),h=n.opts,d=a.getParsedDate(t),l={},c=d.date;switch(e){case"day":n.isWeekend(d.day)&&(i+=" -weekend-"),d.month!=this.d.parsedDate.month&&(i+=" -other-month-",h.selectOtherMonths||(i+=" -disabled-"),h.showOtherMonths||(c=""));break;case"month":c=n.loc[n.opts.monthsField][d.month];break;case"year":var u=n.curDecade;c=d.year,(d.year<u[0]||d.year>u[1])&&(i+=" -other-decade-",h.selectOtherYears||(i+=" -disabled-"),h.showOtherYears||(c=""))}return h.onRenderCell&&(c=(l=h.onRenderCell(t,e)||{}).html?l.html:c,i+=l.classes?" "+l.classes:""),h.range&&(a.isSame(r,t,e)&&(i+=" -range-from-"),a.isSame(o,t,e)&&(i+=" -range-to-"),1==n.selectedDates.length&&n.focused?((a.bigger(r,t)&&a.less(n.focused,t)||a.less(o,t)&&a.bigger(n.focused,t))&&(i+=" -in-range-"),a.less(o,t)&&a.isSame(n.focused,t)&&(i+=" -range-from-"),a.bigger(r,t)&&a.isSame(n.focused,t)&&(i+=" -range-to-")):2==n.selectedDates.length&&a.bigger(r,t)&&a.less(o,t)&&(i+=" -in-range-")),a.isSame(s,t,e)&&(i+=" -current-"),n.focused&&a.isSame(t,n.focused,e)&&(i+=" -focus-"),n._isSelected(t,e)&&(i+=" -selected-"),n._isInRange(t,e)&&!l.disabled||(i+=" -disabled-"),{html:c,classes:i}},_getDaysHtml:function(t){for(var e,i,s=a.getDaysCount(t),n=new Date(t.getFullYear(),t.getMonth(),1).getDay(),r=new Date(t.getFullYear(),t.getMonth(),s).getDay(),o=n-this.d.loc.firstDay,h=6-r+this.d.loc.firstDay,d="",l=1-(o=o<0?o+7:o),c=s+(h=h>6?h-7:h);l<=c;l++)i=t.getFullYear(),e=t.getMonth(),d+=this._getDayHtml(new Date(i,e,l));return d},_getDayHtml:function(t){var e=this._getCellContents(t,"day");return'<div class="'+e.classes+'" data-date="'+t.getDate()+'" data-month="'+t.getMonth()+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_getMonthsHtml:function(t){for(var e="",i=a.getParsedDate(t),s=0;s<12;)e+=this._getMonthHtml(new Date(i.year,s)),s++;return e},_getMonthHtml:function(t){var e=this._getCellContents(t,"month");return'<div class="'+e.classes+'" data-month="'+t.getMonth()+'">'+e.html+"</div>"},_getYearsHtml:function(t){a.getParsedDate(t);for(var e=a.getDecade(t),i="",s=e[0]-1;s<=e[1]+1;s++)i+=this._getYearHtml(new Date(s,0));return i},_getYearHtml:function(t){var e=this._getCellContents(t,"year");return'<div class="'+e.classes+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_renderTypes:{days:function(){var t=this._getDayNamesHtml(this.d.loc.firstDay),e=this._getDaysHtml(this.d.currentDate);this.$cells.html(e),this.$names.html(t)},months:function(){var t=this._getMonthsHtml(this.d.currentDate);this.$cells.html(t)},years:function(){var t=this._getYearsHtml(this.d.currentDate);this.$cells.html(t)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var t,e,i,s=$(".datepicker--cell",this.$cells),a=this;s.each((function(s,n){e=$(this),i=a.d._getDateFromCell($(this)),t=a._getCellContents(i,a.d.cellType),e.attr("class",t.classes)}))},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(t){var e=t.data("date")||1,i=t.data("month")||0,s=t.data("year")||this.d.parsedDate.year,a=this.d;if(a.view==this.opts.minView){var n=new Date(s,i,e),r=this.d._isSelected(n,this.d.cellType);r?a._handleAlreadySelectedDates.bind(a,r,n)():a._trigger("clickCell",n)}else a.down(new Date(s,i,e))},_onClickCell:function(t){var e=$(t.target).closest(".datepicker--cell");e.hasClass("-disabled-")||this._handleClick.bind(this)(e)}}},function(t,e){var i,s;i=$.fn.datepicker,s=i.Constructor,i.Navigation=function(t,e){this.d=t,this.opts=e,this.$buttonsContainer="",this.init()},i.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",$.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",$.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",$.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var t=this._getTitle(this.d.currentDate),e=s.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',$.extend({title:t},this.opts));this.d.$nav.html(e),"years"==this.d.view&&$(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(t){return this.d.formatDate(this.opts.navTitles[this.d.view],t)},_addButton:function(t){this.$buttonsContainer.length||this._addButtonsContainer();var e={action:t,label:this.d.loc[t]},i=s.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',e);$("[data-action="+t+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(i)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=$(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var t=this.d.parsedDate,e=t.month,i=t.year,a=t.date;switch(this.d.view){case"days":this.d._isInRange(new Date(i,e-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(i,e+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(i-1,e,a),"year")||this._disableNav("prev"),this.d._isInRange(new Date(i+1,e,a),"year")||this._disableNav("next");break;case"years":var n=s.getDecade(this.d.date);this.d._isInRange(new Date(n[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(n[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(t){$('[data-action="'+t+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(t){$('[data-action="'+t+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(t){var e=$(t.target).closest("[data-action]").data("action");this.d[e]()},_onClickNavTitle:function(t){if(!$(t.target).hasClass("-disabled-"))return"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}},function(t,e){var i,s;i=$.fn.datepicker,s=i.Constructor,i.Timepicker=function(t,e){this.d=t,this.opts=e,this.init()},i.Timepicker.prototype={init:function(){var t="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(t="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(t,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(t){var e=s.getParsedDate(t);this._handleDate(t),this.hours=e.hours<this.minHours?this.minHours:e.hours,this.minutes=e.minutes<this.minMinutes?this.minMinutes:e.minutes},_setMinTimeFromDate:function(t){this.minHours=t.getHours(),this.minMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>t.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(t){this.maxHours=t.getHours(),this.maxMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<t.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var t=this.opts;this.minHours=t.minHours<0||t.minHours>23?0:t.minHours,this.minMinutes=t.minMinutes<0||t.minMinutes>59?0:t.minMinutes,this.maxHours=t.maxHours<0||t.maxHours>23?23:t.maxHours,this.maxMinutes=t.maxMinutes<0||t.maxMinutes>59?59:t.maxMinutes},_validateHoursMinutes:function(t){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var t=s.getLeadingZeroNum,e={hourMin:this.minHours,hourMax:t(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:t(this.displayHours),minMin:this.minMinutes,minMax:t(this.maxMinutes),minStep:this.opts.minutesStep,minValue:t(this.minutes)},i=s.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',e);this.$timepicker=$(i).appendTo(this.d.$datepicker),this.$ranges=$('[type="range"]',this.$timepicker),this.$hours=$('[name="hours"]',this.$timepicker),this.$minutes=$('[name="minutes"]',this.$timepicker),this.$hoursText=$(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=$(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=$('<span class="datepicker--time-current-ampm">').appendTo($(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var t=s.getLeadingZeroNum(this.displayHours),e=s.getLeadingZeroNum(this.minutes);this.$hoursText.html(t),this.$minutesText.html(e),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(t){this._setDefaultMinMaxTime(),t&&(s.isSame(t,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):s.isSame(t,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(t)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(t,e){var i=t;t instanceof Date&&(i=s.getParsedDate(t).hours);var a="am";if(e||this.d.ampm)switch(!0){case 0==i:i=12;break;case 12==i:a="pm";break;case i>11:i-=12,a="pm"}return{hours:i,dayPeriod:a}},set hours(t){this._hours=t;var e=this._getValidHoursFromDate(t);this.displayHours=e.hours,this.dayPeriod=e.dayPeriod},get hours(){return this._hours},_onChangeRange:function(t){var e=$(t.target),i=e.attr("name");this.d.timepickerIsActive=!0,this[i]=e.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(t,e){this._handleDate(e),this.update()},_onMouseEnterRange:function(t){var e=$(t.target).attr("name");$(".datepicker--time-current-"+e,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(t){var e=$(t.target).attr("name");this.d.inFocus||$(".datepicker--time-current-"+e,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(t){this.d.timepickerIsActive=!1}}},function(t,e,i){"use strict";const s=i(1).a;s.dateFormat="yyyy-mm-dd",$(".search-form__control").datepicker(s),$(".search-form__input-arrow").on("click",(function(){$(this).hasClass("search-form__arrow--active")?$(this).removeClass("search-form__arrow--active"):($(this).addClass("search-form__arrow--active"),$(this).parent().find($(".search-form__control")).focus())}))},function(t,e,i){"use strict";var s=i(0);const a=Object(s.a)(["Взрослые","Дети","Младенцы"]);$("#Guests").find(".calendar__btn--submit").on("click",(function(t){t.preventDefault(),$("#Guests").closest(".select__dropdown").addClass("modal-close"),$(".search-form__select-arrow").toggleClass("search-form__arrow--active")})),$(".Guests").on("click",(function(){var t=$(this),e=t.parent().find("input"),i=Object(s.b)(t,e),n=$(".search-form__pseudo-select"),r=e.attr("id");Object(s.d)(a,r,i);let o=Number(a.first.amount)+Number(a.second.amount);n.val(o+" гостей, "+a.third.amount+" "+a.third.id)}));$(".search-form__select-arrow").on("click",(function(){$(this).toggleClass("search-form__arrow--active"),$(this).parent().find($(".select__dropdown")).toggleClass("modal-close")})),$(".search-form__pseudo-select").focus((function(t){t.preventDefault(),$(this).removeAttr("placeholder")})).blur((function(t){t.preventDefault(),$(this).attr("placeholder","Сколько гостей")}))},function(t,e){function i(t){return document.querySelector(t)}function s(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)}function a(t,e){t.classList?t.classList.add(e):t.className+=" "+e}function n(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}var r,o=((r=function(t){var e=this;e.def={target:i(".slider"),dotsWrapper:i(".dots-wrapper"),arrowLeft:i(".arrow-left"),arrowRight:i(".arrow-right"),transition:{speed:300,easing:""},swipe:!0,autoHeight:!1,afterChangeSlide:function(){}},function(t,e){if(void 0!==e)for(var i in t)null!=e[i]&&(t[i]=e[i])}(e.def,t),e.init()}).prototype.buildDots=function(){for(var t=this,e=0;e<t.totalSlides;e++){var i=document.createElement("li");i.setAttribute("data-slide",e+1),t.def.dotsWrapper.appendChild(i)}t.def.dotsWrapper.addEventListener("click",(function(e){e.target&&"LI"==e.target.nodeName&&(t.curSlide=e.target.getAttribute("data-slide"),t.gotoSlide())}),!1)},r.prototype.getCurLeft=function(){this.curLeft=parseInt(this.sliderInner.style.left.split("px")[0])},r.prototype.gotoSlide=function(){var t=this;t.sliderInner.style.transition="left "+t.def.transition.speed/1e3+"s "+t.def.transition.easing,t.sliderInner.style.left=-t.curSlide*t.slideW+"px",a(t.def.target,"isAnimating"),setTimeout((function(){t.sliderInner.style.transition="",n(t.def.target,"isAnimating")}),t.def.transition.speed),t.setDot(),t.def.autoHeight&&(t.def.target.style.height=t.allSlides[t.curSlide].offsetHeight+"px"),t.def.afterChangeSlide(t)},r.prototype.init=function(){var t=this;function e(e){var i=!1;function s(){i||(i=!0,t.loadedCnt++,t.loadedCnt>=t.totalSlides+2&&t.updateSliderDimension())}var a=e.querySelector("img");a?(a.onload=s,a.src=a.getAttribute("data-src"),a.style.display="block",a.complete&&s()):t.updateSliderDimension()}t.allSlides=0,t.curSlide=0,t.curLeft=0,t.totalSlides=t.def.target.querySelectorAll(".slide").length,t.sliderInner=t.def.target.querySelector(".room-card__slider-container"),t.loadedCnt=0;var s=t.def.target.querySelectorAll(".slide")[0].cloneNode(!0);t.sliderInner.appendChild(s);var r=t.def.target.querySelectorAll(".slide")[t.totalSlides-1].cloneNode(!0);t.sliderInner.insertBefore(r,t.sliderInner.firstChild),t.curSlide++,t.allSlides=t.def.target.querySelectorAll(".slide"),t.sliderInner.style.width=100*(t.totalSlides+2)+"%";for(var o=0;o<t.totalSlides+2;o++)t.allSlides[o].style.width=100/(t.totalSlides+2)+"%",e(t.allSlides[o]);function h(t,e,i){e.split(" ").forEach((function(e){return t.addEventListener(e,i,!1)}))}function d(t,e,i){e.split(" ").forEach((function(e){return t.removeEventListener(e,i,!1)}))}function l(e){var i=e;"touchmove"==e.type&&(i=e.targetTouches[0]||e.changedTouches[0]),t.moveX=i.pageX,t.moveY=i.pageY,Math.abs(t.moveX-t.startX)<40||(t.isAnimating=!0,a(t.def.target,"isAnimating"),e.preventDefault(),t.curLeft+t.moveX-t.startX>0&&0==t.curLeft?t.curLeft=-t.totalSlides*t.slideW:t.curLeft+t.moveX-t.startX<-(t.totalSlides+1)*t.slideW&&(t.curLeft=-t.slideW),t.sliderInner.style.left=t.curLeft+t.moveX-t.startX+"px")}function c(e){t.getCurLeft(),0!==Math.abs(t.moveX-t.startX)&&(t.stayAtCur=Math.abs(t.moveX-t.startX)<40||void 0===t.moveX,t.dir=t.startX<t.moveX?"left":"right",t.stayAtCur||("left"==t.dir?t.curSlide--:t.curSlide++,t.curSlide<0?t.curSlide=t.totalSlides:t.curSlide==t.totalSlides+2&&(t.curSlide=1)),t.gotoSlide(),delete t.startX,delete t.startY,delete t.moveX,delete t.moveY,t.isAnimating=!1,n(t.def.target,"isAnimating"),d(t.sliderInner,"mousemove touchmove",l),d(i("body"),"mouseup touchend",c))}t.buildDots(),t.setDot(),t.initArrows(),t.def.swipe&&h(t.sliderInner,"mousedown touchstart",(function(e){var s=e;t.getCurLeft(),t.isAnimating||("touchstart"==e.type&&(s=e.targetTouches[0]||e.changedTouches[0]),t.startX=s.pageX,t.startY=s.pageY,h(t.sliderInner,"mousemove touchmove",l),h(i("body"),"mouseup touchend",c))})),t.isAnimating=!1},r.prototype.initArrows=function(){var t=this;""!=t.def.arrowLeft&&t.def.arrowLeft.addEventListener("click",(function(){s(t.def.target,"isAnimating")||(1==t.curSlide&&(t.curSlide=t.totalSlides+1,t.sliderInner.style.left=-t.curSlide*t.slideW+"px"),t.curSlide--,setTimeout((function(){t.gotoSlide()}),20))}),!1),""!=t.def.arrowRight&&t.def.arrowRight.addEventListener("click",(function(){s(t.def.target,"isAnimating")||(t.curSlide==t.totalSlides&&(t.curSlide=0,t.sliderInner.style.left=-t.curSlide*t.slideW+"px"),t.curSlide++,setTimeout((function(){t.gotoSlide()}),20))}),!1)},r.prototype.setDot=function(){for(var t=this,e=t.curSlide-1,i=0;i<t.totalSlides;i++)n(t.def.dotsWrapper.querySelectorAll("li")[i],"active");t.curSlide-1<0?e=t.totalSlides-1:t.curSlide-1>t.totalSlides-1&&(e=0),a(t.def.dotsWrapper.querySelectorAll("li")[e],"active")},r.prototype.updateSliderDimension=function(){var t=this;if(t.slideW=270,t.sliderInner.style.left=-t.slideW*t.curSlide+"px",t.def.autoHeight)t.def.target.style.height=t.allSlides[t.curSlide].offsetHeight+"px";else for(var e=0;e<t.totalSlides+2;e++)t.allSlides[e].offsetHeight>t.def.target.offsetHeight&&(t.def.target.style.height=t.allSlides[e].offsetHeight+"px");t.def.afterChangeSlide(t)},r);document.querySelectorAll(".room-card__slider").forEach((function(t){return new o({target:t,dotsWrapper:t.querySelector(".dots-wrapper"),arrowLeft:t.querySelector(".arrow-left"),arrowRight:t.querySelector(".arrow-right")})}))},function(t,e,i){"use strict";var s=i(1);$("#birthday").datepicker(s.a),$(".register_input-arrow").on("click",(function(){$(this).hasClass("register_input-arrow--active")?$(this).removeClass("register_input-arrow--active"):($(this).addClass("register_input-arrow--active"),$(this).parent().find($(".register__form-control")).focus())}))},,,,function(t,e,i){"use strict";i.r(e);i(7),i(8),i(9),i(10)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZGF0ZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvc3JjL2pzL2Fpci1kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvZGF0ZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvc3JjL2pzL2JvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL3NyYy9qcy9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvdGltZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHVnL2Jsb2Nrcy9zZWFyY2gtZm9ybS9zZWFyY2gtZGF0ZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHVnL2Jsb2Nrcy9zZWFyY2gtZm9ybS9zZWFyY2gtZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3B1Zy9ibG9ja3Mvcm9vbS1jYXJkLXRlbXBsYXRlL3Jvb20tcGhvdG8tc2xpZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wdWcvYmxvY2tzL3JlZ2lzdGVyL3JlZ2lzdGVyLWRhdGVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3B1Zy9wYWdlcy9jYXJkcy9jYXJkcy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRvZ2dsZSIsImVsZW0iLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaW5wdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwidmFsaWRpdHkiLCJ0eXBlTWlzbWF0Y2giLCJzZXRDdXN0b21WYWxpZGl0eSIsInJlcG9ydFZhbGlkaXR5IiwicmFuZ2VVbmRlcmZsb3ciLCJyYW5nZU92ZXJmbG93IiwidmFsaWRhdGUiLCJnZXREZWZhdWx0T3B0aW9ucyIsIklEcyIsImZpcnN0IiwiaWQiLCJhbW91bnQiLCJzZWNvbmQiLCJ0aGlyZCIsInVwZGF0ZU9wdGlvbnMiLCJEZWZhdWx0T3B0aW9ucyIsImlucHV0SUQiLCJuZXdWYWwiLCJzd2l0Y2hBbW91bnQiLCJidXR0b24iLCJvbGRWYWx1ZSIsInBhcmVudCIsImZpbmQiLCJ2YWwiLCJ0ZXh0IiwicGFyc2VGbG9hdCIsImF0dHIiLCJkYXRlUGlja2VyQ29uZmlnIiwibGFuZ3VhZ2UiLCJ0b2RheSIsImF1dG9DbG9zZSIsIm1pbkRhdGUiLCJEYXRlIiwiZGF0ZUZvcm1hdCIsIm11bHRpcGxlRGF0ZXNTZXBhcmF0b3IiLCJ0b2RheUJ1dHRvbiIsImNsZWFyQnV0dG9uIiwicHJldkh0bWwiLCJuZXh0SHRtbCIsIm5hdlRpdGxlcyIsImRheXMiLCIkYm9keSIsIiRkYXRlcGlja2Vyc0NvbnRhaW5lciIsImRhdGVwaWNrZXIiLCJjb250YWluZXJCdWlsdCIsImRlZmF1bHRzIiwiaG90S2V5cyIsIkRhdGVwaWNrZXIiLCJjbGFzc2VzIiwiaW5saW5lIiwic3RhcnREYXRlIiwiZmlyc3REYXkiLCJ3ZWVrZW5kcyIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsInBvc2l0aW9uIiwib2Zmc2V0IiwidmlldyIsIm1pblZpZXciLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsIm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QiLCJzaG93T3RoZXJZZWFycyIsInNlbGVjdE90aGVyWWVhcnMiLCJtb3ZlVG9PdGhlclllYXJzT25TZWxlY3QiLCJtYXhEYXRlIiwiZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlIiwibXVsdGlwbGVEYXRlcyIsInJhbmdlIiwic2hvd0V2ZW50IiwibW9udGhzRmllbGQiLCJtb250aHMiLCJ5ZWFycyIsInRpbWVwaWNrZXIiLCJvbmx5VGltZXBpY2tlciIsImRhdGVUaW1lU2VwYXJhdG9yIiwidGltZUZvcm1hdCIsIm1pbkhvdXJzIiwibWF4SG91cnMiLCJtaW5NaW51dGVzIiwibWF4TWludXRlcyIsImhvdXJzU3RlcCIsIm1pbnV0ZXNTdGVwIiwib25TZWxlY3QiLCJvblNob3ciLCJvbkhpZGUiLCJvbkNoYW5nZU1vbnRoIiwib25DaGFuZ2VZZWFyIiwib25DaGFuZ2VEZWNhZGUiLCJvbkNoYW5nZVZpZXciLCJvblJlbmRlckNlbGwiLCJlbCIsIm9wdGlvbnMiLCJ0aGlzIiwiJGVsIiwiJCIsIm9wdHMiLCJleHRlbmQiLCJkYXRhIiwidW5kZWZpbmVkIiwibm9kZU5hbWUiLCJlbElzSW5wdXQiLCIkYWx0RmllbGQiLCJpbml0ZWQiLCJ2aXNpYmxlIiwic2lsZW50IiwiY3VycmVudERhdGUiLCJjdXJyZW50VmlldyIsIl9jcmVhdGVTaG9ydEN1dHMiLCJzZWxlY3RlZERhdGVzIiwidmlld3MiLCJrZXlzIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsIl9wcmV2T25TZWxlY3RWYWx1ZSIsImluaXQiLCJWRVJTSU9OIiwidmlld0luZGV4ZXMiLCJfYnVpbGREYXRlcGlja2Vyc0NvbnRhaW5lciIsIl9idWlsZEJhc2VIdG1sIiwiX2RlZmluZUxvY2FsZSIsIl9zeW5jV2l0aE1pbk1heERhdGVzIiwiX3NldFBvc2l0aW9uQ2xhc3NlcyIsIl9iaW5kRXZlbnRzIiwiX2JpbmRLZXlib2FyZEV2ZW50cyIsIiRkYXRlcGlja2VyIiwib24iLCJfb25Nb3VzZURvd25EYXRlcGlja2VyIiwiX29uTW91c2VVcERhdGVwaWNrZXIiLCJhZGRDbGFzcyIsImZuIiwiVGltZXBpY2tlciIsIl9iaW5kVGltZXBpY2tlckV2ZW50cyIsIkJvZHkiLCJzaG93IiwibmF2IiwiTmF2aWdhdGlvbiIsIl9vbkNsaWNrQ2VsbCIsIl9vbk1vdXNlRW50ZXJDZWxsIiwiX29uTW91c2VMZWF2ZUNlbGwiLCJfb25TaG93RXZlbnQiLCJfb25Nb3VzZVVwRWwiLCJfb25CbHVyIiwiX29uS2V5VXBHZW5lcmFsIiwid2luZG93IiwiX29uUmVzaXplIiwiX29uTW91c2VVcEJvZHkiLCJfb25LZXlEb3duIiwiX29uS2V5VXAiLCJfb25Ib3RLZXkiLCJfb25UaW1lQ2hhbmdlIiwiaXNXZWVrZW5kIiwiZGF5IiwiaW5kZXhPZiIsImxhbmciLCJsb2MiLCJjb25zb2xlIiwid2FybiIsInJ1Iiwiam9pbiIsImJvdW5kYXJ5IiwiX2dldFdvcmRCb3VuZGFyeVJlZ0V4cCIsIm1hdGNoIiwiYW1wbSIsImFwcGVuZCIsIiRhcHBlbmRUYXJnZXQiLCIkaW5saW5lIiwiaW5zZXJ0QWZ0ZXIiLCJhcHBlbmRUbyIsIiRjb250ZW50IiwiJG5hdiIsIl90cmlnZ2VyT25DaGFuZ2UiLCJsZW5ndGgiLCJmb3JtYXR0ZWREYXRlcyIsInBhcnNlZFNlbGVjdGVkIiwiZ2V0UGFyc2VkRGF0ZSIsIl90aGlzIiwiZGF0ZXMiLCJ5ZWFyIiwibW9udGgiLCJkYXRlIiwiaG91cnMiLCJtaW51dGVzIiwibWFwIiwiZm9ybWF0RGF0ZSIsInBhcnNlZERhdGUiLCJuZXh0IiwiY3VyRGVjYWRlIiwicHJldiIsInN0cmluZyIsInZhbGlkSG91cnMiLCJyZXN1bHQiLCJsb2NhbGUiLCJsZWFkaW5nWmVybyIsImdldExlYWRpbmdaZXJvTnVtIiwiZGVjYWRlIiwiZ2V0RGVjYWRlIiwiZnVsbEhvdXJzIiwiZGF5UGVyaW9kIiwicmVwbGFjZXIiLCJfcmVwbGFjZXIiLCJfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlIiwidGVzdCIsInJlcGxhY2UiLCJnZXRUaW1lIiwidG9VcHBlckNhc2UiLCJmdWxsRGF0ZSIsImRheXNTaG9ydCIsImZ1bGxNb250aCIsIm1vbnRoc1Nob3J0IiwiZnVsbE1pbnV0ZXMiLCJ0b1N0cmluZyIsInNsaWNlIiwic3RyIiwicmVnIiwicDEiLCJwMiIsInAzIiwic2lnbiIsInN5bWJvbHMiLCJSZWdFeHAiLCJzZWxlY3REYXRlIiwibGVuIiwibmV3RGF0ZSIsIkFycmF5IiwiaXNBcnJheSIsImxhc3RTZWxlY3RlZERhdGUiLCJfc2V0VGltZSIsIl90cmlnZ2VyIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsIl9yZW5kZXIiLCJfaXNTZWxlY3RlZCIsInB1c2giLCJiaWdnZXIiLCJfc2V0SW5wdXRWYWx1ZSIsInRpbWVwaWNrZXJJc0FjdGl2ZSIsImhpZGUiLCJyZW1vdmVEYXRlIiwic2VsZWN0ZWQiLCJzb21lIiwiY3VyRGF0ZSIsImlzU2FtZSIsInNwbGljZSIsImNsZWFyIiwidXBkYXRlIiwicGFyYW0iLCJhcmd1bWVudHMiLCJfYWRkQnV0dG9uc0lmTmVlZCIsInNldFBvc2l0aW9uIiwiX2hhbmRsZURhdGUiLCJfdXBkYXRlUmFuZ2VzIiwiX3VwZGF0ZUN1cnJlbnRUaW1lIiwiY3VyVGltZSIsIm1pblRpbWUiLCJtYXhUaW1lIiwiY2hlY2tEYXRlIiwiY2VsbFR5cGUiLCJyZXMiLCJhbHRWYWx1ZXMiLCJmb3JtYXQiLCJhbHRGb3JtYXQiLCJfaXNJblJhbmdlIiwidHlwZSIsInRpbWUiLCJtaW4iLCJtYXgiLCJkTWluVGltZSIsImRNYXhUaW1lIiwidHlwZXMiLCJfZ2V0RGltZW5zaW9ucyIsIndpZHRoIiwib3V0ZXJXaWR0aCIsImhlaWdodCIsIm91dGVySGVpZ2h0IiwibGVmdCIsInRvcCIsIl9nZXREYXRlRnJvbUNlbGwiLCJjZWxsIiwicG9zIiwibWFpbiIsInNwbGl0IiwicmVtb3ZlQXR0ciIsImRpbXMiLCJzZWxmRGltcyIsInNlY29uZGFyeSIsImNzcyIsIl9iaW5kVmlzaW9uRXZlbnRzIiwicmVtb3ZlQ2xhc3MiLCJmb2N1c2VkIiwiaW5Gb2N1cyIsImJsdXIiLCJkb3duIiwiX2NoYW5nZVZpZXciLCJ1cCIsImV2ZW50Iiwib2ZmIiwib25lIiwiZGlyIiwibmV4dFZpZXciLCJ2aWV3SW5kZXgiLCJfaGFuZGxlSG90S2V5IiwiZm9jdXNlZFBhcnNlZCIsInRvdGFsRGF5c0luTmV4dE1vbnRoIiwiX2dldEZvY3VzZWREYXRlIiwibW9udGhDaGFuZ2VkIiwieWVhckNoYW5nZWQiLCJkZWNhZGVDaGFuZ2VkIiwieSIsImdldERheXNDb3VudCIsIl9yZWdpc3RlcktleSIsImN1cktleSIsIl91blJlZ2lzdGVyS2V5IiwiaW5kZXgiLCJfaXNIb3RLZXlQcmVzc2VkIiwiY3VycmVudEhvdEtleSIsImZvdW5kIiwicHJlc3NlZEtleXMiLCJzb3J0IiwiaG90S2V5IiwiZXZlcnkiLCJhcmdzIiwidHJpZ2dlciIsIl9mb2N1c05leHRDZWxsIiwia2V5Q29kZSIsIm5kIiwiZ2V0RGF0ZSIsIl9nZXRDZWxsIiwiJGNlbGwiLCJzZWxlY3RvciIsImRlc3Ryb3kiLCJjbG9zZXN0IiwicmVtb3ZlIiwiX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzIiwiYWxyZWFkeVNlbGVjdGVkIiwic2VsZWN0ZWREYXRlIiwiZSIsIm9yaWdpbmFsRXZlbnQiLCJ0aW1lcGlja2VyRm9jdXMiLCJmb2N1cyIsInNldFRpbWVvdXQiLCJjb2RlIiwid2hpY2giLCJwcmV2ZW50RGVmYXVsdCIsImhhc0NsYXNzIiwidGFyZ2V0IiwibGVzcyIsIl91cGRhdGUiLCJoIiwiX2ZvY3VzZWQiLCJwcmV2VmlldyIsInN1YnN0cmluZyIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImZpcnN0WWVhciIsIk1hdGgiLCJmbG9vciIsInRlbXBsYXRlIiwic291cmNlIiwiZGF0ZTEiLCJkYXRlMiIsImQxIiwiZDIiLCJfdHlwZSIsImRhdGVDb21wYXJlVG8iLCJudW0iLCJwYXJzZUludCIsInJlc2V0VGltZSIsImVhY2giLCJDb25zdHJ1Y3RvciIsImRheXNNaW4iLCJ0ZW1wbGF0ZXMiLCJkcCIsInByb3h5IiwiJG5hbWVzIiwiJGNlbGxzIiwiX2dldERheU5hbWVzSHRtbCIsImN1ckRheSIsImh0bWwiLCJfZ2V0Q2VsbENvbnRlbnRzIiwicmVuZGVyIiwiZGlzYWJsZWQiLCJfZ2V0RGF5c0h0bWwiLCJ0b3RhbE1vbnRoRGF5cyIsImZpcnN0TW9udGhEYXkiLCJsYXN0TW9udGhEYXkiLCJkYXlzRnJvbVBldk1vbnRoIiwiZGF5c0Zyb21OZXh0TW9udGgiLCJfZ2V0RGF5SHRtbCIsImNvbnRlbnQiLCJfZ2V0TW9udGhzSHRtbCIsIl9nZXRNb250aEh0bWwiLCJfZ2V0WWVhcnNIdG1sIiwiX2dldFllYXJIdG1sIiwiX3JlbmRlclR5cGVzIiwiZGF5TmFtZXMiLCJhY2l0dmUiLCJhY3RpdmUiLCJfaGFuZGxlQ2xpY2siLCIkYnV0dG9uc0NvbnRhaW5lciIsIl9vbkNsaWNrTmF2QnV0dG9uIiwiX29uQ2xpY2tOYXZUaXRsZSIsIl9hZGRCdXR0b24iLCJ0aXRsZSIsIl9nZXRUaXRsZSIsInNldE5hdlN0YXR1cyIsIl9hZGRCdXR0b25zQ29udGFpbmVyIiwiYWN0aW9uIiwibGFiZWwiLCJfZGlzYWJsZU5hdiIsIl9hY3RpdmF0ZU5hdiIsImluc3QiLCJfYnVpbGRIVE1MIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX29uU2VsZWN0RGF0ZSIsIiRyYW5nZXMiLCJfb25DaGFuZ2VSYW5nZSIsIl9vbk1vdXNlVXBSYW5nZSIsIl9vbk1vdXNlRW50ZXJSYW5nZSIsIl9vbk1vdXNlT3V0UmFuZ2UiLCJfZGF0ZSIsIl9zZXRNaW5UaW1lRnJvbURhdGUiLCJfc2V0TWF4VGltZUZyb21EYXRlIiwiX3NldERlZmF1bHRNaW5NYXhUaW1lIiwiX3ZhbGlkYXRlSG91cnNNaW51dGVzIiwibHoiLCJob3VyTWluIiwiaG91ck1heCIsImhvdXJTdGVwIiwiaG91clZhbHVlIiwiaG91clZpc2libGUiLCJkaXNwbGF5SG91cnMiLCJtaW5NaW4iLCJtaW5NYXgiLCJtaW5TdGVwIiwibWluVmFsdWUiLCJfdGVtcGxhdGUiLCIkdGltZXBpY2tlciIsIiRob3VycyIsIiRtaW51dGVzIiwiJGhvdXJzVGV4dCIsIiRtaW51dGVzVGV4dCIsIiRhbXBtIiwiX2hvdXJzIiwiJHRhcmdldCIsImNvbmZpZyIsImd1ZXN0c0RlZmF1bHRPcHRpb25zIiwidG9nZ2xlQ2xhc3MiLCIkYnV0dG9uIiwidGFyZ2V0SW5wdXQiLCJndWVzdHNDb3VudCIsIk51bWJlciIsInF1ZXJ5U2VsZWN0b3IiLCJjb250YWlucyIsImFkZCIsImZpZmlfc2xpZGVyIiwic2xpZGVyX3BsdWdpbiIsInNldHRpbmdzIiwiXyIsImRlZiIsImRvdHNXcmFwcGVyIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsInRyYW5zaXRpb24iLCJzcGVlZCIsImVhc2luZyIsInN3aXBlIiwiYXV0b0hlaWdodCIsImFmdGVyQ2hhbmdlU2xpZGUiLCJfZGVmIiwiYWRkb25zIiwicHJvcCIsIiRleHRlbmRPYmoiLCJidWlsZERvdHMiLCJ0b3RhbFNsaWRlcyIsImRvdCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImN1clNsaWRlIiwiZ2V0QXR0cmlidXRlIiwiZ290b1NsaWRlIiwiZ2V0Q3VyTGVmdCIsImN1ckxlZnQiLCJzbGlkZXJJbm5lciIsInN0eWxlIiwic2xpZGVXIiwic2V0RG90IiwiYWxsU2xpZGVzIiwib2Zmc2V0SGVpZ2h0IiwibG9hZGVkSW1nIiwibG9hZGVkIiwibG9hZEhhbmRsZXIiLCJsb2FkZWRDbnQiLCJ1cGRhdGVTbGlkZXJEaW1lbnNpb24iLCJpbWciLCJvbmxvYWQiLCJzcmMiLCJkaXNwbGF5IiwiY29tcGxldGUiLCJjbG9uZUZpcnN0IiwiY2xvbmVOb2RlIiwiY2xvbmVMYXN0IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsIl9pIiwiYWRkTGlzdGVuZXJNdWx0aSIsInJlbW92ZUxpc3RlbmVyTXVsdGkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3dpcGVNb3ZlIiwidG91Y2giLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJtb3ZlWCIsInBhZ2VYIiwibW92ZVkiLCJwYWdlWSIsImFicyIsInN0YXJ0WCIsImlzQW5pbWF0aW5nIiwic3dpcGVFbmQiLCJzdGF5QXRDdXIiLCJzdGFydFkiLCJpbml0QXJyb3dzIiwidGFyZG90IiwiaiIsIml0ZW0iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJC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RUFBRUYsTUFBTXFNLFlBQVksaUNBSHBCbk0sRUFBRUYsTUFBTW9DLFNBQVMsZ0NBQ2pCbEMsRUFBRUYsTUFBTTFFLFNBQVNDLEtBQUsyRSxFQUFFLDRCQUE0QnNQLGEsZ0NDVnhEIiwiZmlsZSI6ImNhcmRzLjc2MWZjMTQ4YmI0YjhiNzI1M2JmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsImV4cG9ydCBjb25zdCB0b2dnbGUgPSAoZWxlbSwgY2xhc3NOYW1lKSA9PiB7XG4gIGVsZW0uY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xufTtcblxuLy8gVmFsaWRhdGlvblxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHZhbGlkaXR5U3RhdGVfb2JqZWN0ID0gaW5wdXQudmFsaWRpdHk7XG4gIGlmICh2YWxpZGl0eVN0YXRlX29iamVjdC50eXBlTWlzbWF0Y2gpIHtcbiAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCdQbGVhc2UsIGVudGVyIGFuIGludGVnZXInKTtcbiAgIGlucHV0LnJlcG9ydFZhbGlkaXR5KCk7XG4gIH0gZWxzZSBpZiAoaW5wdXQucmFuZ2VVbmRlcmZsb3cpIHtcbiAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCdXZSBuZWVkIGEgaGlnaGVyIG51bWJlciEnKTtcbiAgIGlucHV0LnJlcG9ydFZhbGlkaXR5KCk7XG4gIH0gZWxzZSBpZiAoaW5wdXQucmFuZ2VPdmVyZmxvdykge1xuICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1RoYXRzIHRvbyBoaWdoIScpO1xuICAgaW5wdXQucmVwb3J0VmFsaWRpdHkoKTtcbiAgfSBlbHNlIHtcbiAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcbiAgIGlucHV0LnJlcG9ydFZhbGlkaXR5KCk7XG4gIH1cbn07XG5cbmNvbnN0IGN1c3RvbUlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3RfX2Ryb3Bkb3duLWlucHV0Jyk7XG5cbmN1c3RvbUlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24oZXZ0KXtcbiAgICB2YWxpZGF0ZShpbnB1dCk7XG4gIH0pO1xufSk7XG5cbi8vIE51bWJlcnNcbmV4cG9ydCBjb25zdCBJTklUSUFMX1ZBTFVFID0gMjtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0T3B0aW9ucyA9IChJRHMpID0+IHtcbiAgcmV0dXJuIHtcbiAgIGZpcnN0OiB7XG4gICAgIGlkOiBJRHNbMF0sXG4gICAgIGFtb3VudCA6IElOSVRJQUxfVkFMVUUsXG4gICB9LFxuICAgc2Vjb25kOiB7XG4gICAgIGlkOiBJRHNbMV0sXG4gICAgIGFtb3VudDogSU5JVElBTF9WQUxVRSxcbiAgIH0sXG4gICB0aGlyZDoge1xuICAgICBpZDogSURzWzJdLFxuICAgICBhbW91bnQ6IDAsXG4gICB9XG4gfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPcHRpb25zID0gKERlZmF1bHRPcHRpb25zLCBpbnB1dElELCBuZXdWYWwpID0+IHtcbiAgaWYgKGlucHV0SUQgPT09IERlZmF1bHRPcHRpb25zLmZpcnN0LmlkKSB7XG4gICAgRGVmYXVsdE9wdGlvbnMuZmlyc3QuYW1vdW50ID0gbmV3VmFsO1xuICB9IGVsc2UgaWYgKGlucHV0SUQgPT09IERlZmF1bHRPcHRpb25zLnNlY29uZC5pZCkge1xuICAgIERlZmF1bHRPcHRpb25zLnNlY29uZC5hbW91bnQgPSBuZXdWYWw7XG4gIH0gZWxzZSBpZiAoaW5wdXRJRCA9PT0gRGVmYXVsdE9wdGlvbnMudGhpcmQuaWQpIHtcbiAgICBEZWZhdWx0T3B0aW9ucy50aGlyZC5hbW91bnQgPSBuZXdWYWw7XG4gIH1cbiAgcmV0dXJuO1xufTtcblxuXG5leHBvcnQgY29uc3Qgc3dpdGNoQW1vdW50ID0gKGJ1dHRvbiwgaW5wdXQpID0+IHtcbiAgdmFyIG9sZFZhbHVlID0gYnV0dG9uLnBhcmVudCgpLmZpbmQoXCJpbnB1dFwiKS52YWwoKTtcbiAgaWYgKGJ1dHRvbi50ZXh0KCkgPT0gXCIrXCIpIHtcbiAgICB2YXIgbmV3VmFsID0gcGFyc2VGbG9hdChvbGRWYWx1ZSkgKyAxIDwgaW5wdXQuYXR0cignbWF4JykgPyBwYXJzZUZsb2F0KG9sZFZhbHVlKSArIDEgOiBpbnB1dC5hdHRyKCdtYXgnKTtcbiAgfSBlbHNlIHtcbiAgIC8vIERvbid0IGFsbG93IGRlY3JlbWVudGluZyBiZWxvdyB6ZXJvXG4gICAgaWYgKG9sZFZhbHVlID4gMCkge1xuICAgICAgdmFyIG5ld1ZhbCA9IHBhcnNlRmxvYXQob2xkVmFsdWUpIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VmFsID0gMDtcbiAgICB9XG4gIH1cbiAgaW5wdXQudmFsKG5ld1ZhbCk7XG4gIHJldHVybiBuZXdWYWw7XG59O1xuXG5cbiIsImltcG9ydCAnYWlyLWRhdGVwaWNrZXInO1xuXG5leHBvcnQgY29uc3QgZGF0ZVBpY2tlckNvbmZpZyA9IHtcbiAgbGFuZ3VhZ2U6IHtcbiAgICB0b2RheTogJ9Cf0YDQuNC80LXQvdC40YLRjCcsXG4gIH0sXG4gIGF1dG9DbG9zZTogdHJ1ZSxcbiAgbWluRGF0ZTogbmV3IERhdGUoKSxcbiAgZGF0ZUZvcm1hdDogXCJkZCBNXCIsXG4gIG11bHRpcGxlRGF0ZXNTZXBhcmF0b3I6IFwiIC0gXCIsXG4gIHRvZGF5QnV0dG9uOiB0cnVlLFxuICBjbGVhckJ1dHRvbjogdHJ1ZSxcbiAgcHJldkh0bWw6ICc8c3ZnIHdpZHRoPVwiMTdcIiBoZWlnaHQ9XCIxOFwiIHZpZXdCb3g9XCIwIDAgMTcgMThcIj48cGF0aCBkPVwiTTE2LjE3NTUgOC4wMTU2MlY5Ljk4NDM4SDMuOTg4MDFMOS41NjYxMyAxNS42MDk0TDguMTU5ODggMTcuMDE1NkwwLjE0NDI1OCA5TDguMTU5ODggMC45ODQzNzVMOS41NjYxMyAyLjM5MDYyTDMuOTg4MDEgOC4wMTU2MkgxNi4xNzU1WlwiIGZpbGw9XCIjQkM5Q0ZGXCI+PC9wYXRoPjwvc3ZnPicsXG4gIG5leHRIdG1sOiAnPHN2ZyB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMThcIiB2aWV3Qm94PVwiMCAwIDE3IDE4XCI+PHBhdGggZD1cIk04LjM2MzAxIDAuOTg0Mzc1TDE2LjM3ODYgOUw4LjM2MzAxIDE3LjAxNTZMNi45NTY3NiAxNS42MDk0TDEyLjUzNDkgOS45ODQzOEgwLjM0NzM4M1Y4LjAxNTYySDEyLjUzNDlMNi45NTY3NiAyLjM5MDYyTDguMzYzMDEgMC45ODQzNzVaXCIgZmlsbD1cIiNCQzlDRkZcIj48L3BhdGg+PC9zdmc+JyxcbiAgbmF2VGl0bGVzOiB7XG4gICAgZGF5czogJ01NICA8aT55eXl5PC9pPicsXG4gIH0sXG59O1xuIiwicmVxdWlyZSgnLi9kYXRlcGlja2VyJyk7XHJcbnJlcXVpcmUoJy4vYm9keScpO1xyXG5yZXF1aXJlKCcuL25hdmlnYXRpb24nKTtcclxucmVxdWlyZSgnLi90aW1lcGlja2VyJyk7IiwiOyhmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgVkVSU0lPTiA9ICcyLjIuMycsXHJcbiAgICAgICAgcGx1Z2luTmFtZSA9ICdkYXRlcGlja2VyJyxcclxuICAgICAgICBhdXRvSW5pdFNlbGVjdG9yID0gJy5kYXRlcGlja2VyLWhlcmUnLFxyXG4gICAgICAgICRib2R5LCAkZGF0ZXBpY2tlcnNDb250YWluZXIsXHJcbiAgICAgICAgY29udGFpbmVyQnVpbHQgPSBmYWxzZSxcclxuICAgICAgICBiYXNlVGVtcGxhdGUgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlclwiPicgK1xyXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJkYXRlcGlja2VyLS1wb2ludGVyXCI+PC9pPicgK1xyXG4gICAgICAgICAgICAnPG5hdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdlwiPjwvbmF2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNvbnRlbnRcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIGNsYXNzZXM6ICcnLFxyXG4gICAgICAgICAgICBpbmxpbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBsYW5ndWFnZTogJ3J1JyxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBmaXJzdERheTogJycsXHJcbiAgICAgICAgICAgIHdlZWtlbmRzOiBbNiwgMF0sXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICcnLFxyXG4gICAgICAgICAgICBhbHRGaWVsZDogJycsXHJcbiAgICAgICAgICAgIGFsdEZpZWxkRGF0ZUZvcm1hdDogJ0AnLFxyXG4gICAgICAgICAgICB0b2dnbGVTZWxlY3RlZDogdHJ1ZSxcclxuICAgICAgICAgICAga2V5Ym9hcmROYXY6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyxcclxuICAgICAgICAgICAgb2Zmc2V0OiAxMixcclxuXHJcbiAgICAgICAgICAgIHZpZXc6ICdkYXlzJyxcclxuICAgICAgICAgICAgbWluVmlldzogJ2RheXMnLFxyXG5cclxuICAgICAgICAgICAgc2hvd090aGVyTW9udGhzOiB0cnVlLFxyXG4gICAgICAgICAgICBzZWxlY3RPdGhlck1vbnRoczogdHJ1ZSxcclxuICAgICAgICAgICAgbW92ZVRvT3RoZXJNb250aHNPblNlbGVjdDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIHNob3dPdGhlclllYXJzOiB0cnVlLFxyXG4gICAgICAgICAgICBzZWxlY3RPdGhlclllYXJzOiB0cnVlLFxyXG4gICAgICAgICAgICBtb3ZlVG9PdGhlclllYXJzT25TZWxlY3Q6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBtaW5EYXRlOiAnJyxcclxuICAgICAgICAgICAgbWF4RGF0ZTogJycsXHJcbiAgICAgICAgICAgIGRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZTogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIG11bHRpcGxlRGF0ZXM6IGZhbHNlLCAvLyBCb29sZWFuIG9yIE51bWJlclxyXG4gICAgICAgICAgICBtdWx0aXBsZURhdGVzU2VwYXJhdG9yOiAnLCcsXHJcbiAgICAgICAgICAgIHJhbmdlOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIHRvZGF5QnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xlYXJCdXR0b246IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgc2hvd0V2ZW50OiAnZm9jdXMnLFxyXG4gICAgICAgICAgICBhdXRvQ2xvc2U6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgLy8gbmF2aWdhdGlvblxyXG4gICAgICAgICAgICBtb250aHNGaWVsZDogJ21vbnRoc1Nob3J0JyxcclxuICAgICAgICAgICAgcHJldkh0bWw6ICc8c3ZnPjxwYXRoIGQ9XCJNIDE3LDEyIGwgLTUsNSBsIDUsNVwiPjwvcGF0aD48L3N2Zz4nLFxyXG4gICAgICAgICAgICBuZXh0SHRtbDogJzxzdmc+PHBhdGggZD1cIk0gMTQsMTIgbCA1LDUgbCAtNSw1XCI+PC9wYXRoPjwvc3ZnPicsXHJcbiAgICAgICAgICAgIG5hdlRpdGxlczoge1xyXG4gICAgICAgICAgICAgICAgZGF5czogJ01NLCA8aT55eXl5PC9pPicsXHJcbiAgICAgICAgICAgICAgICBtb250aHM6ICd5eXl5JyxcclxuICAgICAgICAgICAgICAgIHllYXJzOiAneXl5eTEgLSB5eXl5MidcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vIHRpbWVwaWNrZXJcclxuICAgICAgICAgICAgdGltZXBpY2tlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIG9ubHlUaW1lcGlja2VyOiBmYWxzZSxcclxuICAgICAgICAgICAgZGF0ZVRpbWVTZXBhcmF0b3I6ICcgJyxcclxuICAgICAgICAgICAgdGltZUZvcm1hdDogJycsXHJcbiAgICAgICAgICAgIG1pbkhvdXJzOiAwLFxyXG4gICAgICAgICAgICBtYXhIb3VyczogMjQsXHJcbiAgICAgICAgICAgIG1pbk1pbnV0ZXM6IDAsXHJcbiAgICAgICAgICAgIG1heE1pbnV0ZXM6IDU5LFxyXG4gICAgICAgICAgICBob3Vyc1N0ZXA6IDEsXHJcbiAgICAgICAgICAgIG1pbnV0ZXNTdGVwOiAxLFxyXG5cclxuICAgICAgICAgICAgLy8gZXZlbnRzXHJcbiAgICAgICAgICAgIG9uU2VsZWN0OiAnJyxcclxuICAgICAgICAgICAgb25TaG93OiAnJyxcclxuICAgICAgICAgICAgb25IaWRlOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VNb250aDogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlWWVhcjogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlRGVjYWRlOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VWaWV3OiAnJyxcclxuICAgICAgICAgICAgb25SZW5kZXJDZWxsOiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaG90S2V5cyA9IHtcclxuICAgICAgICAgICAgJ2N0cmxSaWdodCc6IFsxNywgMzldLFxyXG4gICAgICAgICAgICAnY3RybFVwJzogWzE3LCAzOF0sXHJcbiAgICAgICAgICAgICdjdHJsTGVmdCc6IFsxNywgMzddLFxyXG4gICAgICAgICAgICAnY3RybERvd24nOiBbMTcsIDQwXSxcclxuICAgICAgICAgICAgJ3NoaWZ0UmlnaHQnOiBbMTYsIDM5XSxcclxuICAgICAgICAgICAgJ3NoaWZ0VXAnOiBbMTYsIDM4XSxcclxuICAgICAgICAgICAgJ3NoaWZ0TGVmdCc6IFsxNiwgMzddLFxyXG4gICAgICAgICAgICAnc2hpZnREb3duJzogWzE2LCA0MF0sXHJcbiAgICAgICAgICAgICdhbHRVcCc6IFsxOCwgMzhdLFxyXG4gICAgICAgICAgICAnYWx0UmlnaHQnOiBbMTgsIDM5XSxcclxuICAgICAgICAgICAgJ2FsdExlZnQnOiBbMTgsIDM3XSxcclxuICAgICAgICAgICAgJ2FsdERvd24nOiBbMTgsIDQwXSxcclxuICAgICAgICAgICAgJ2N0cmxTaGlmdFVwJzogWzE2LCAxNywgMzhdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlcGlja2VyO1xyXG5cclxuICAgIHZhciBEYXRlcGlja2VyICA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICB0aGlzLiRlbCA9ICQoZWwpO1xyXG5cclxuICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMsIHRoaXMuJGVsLmRhdGEoKSk7XHJcblxyXG4gICAgICAgIGlmICgkYm9keSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgJGJvZHkgPSAkKCdib2R5Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5zdGFydERhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lbC5ub2RlTmFtZSA9PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxJc0lucHV0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuYWx0RmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy4kYWx0RmllbGQgPSB0eXBlb2YgdGhpcy5vcHRzLmFsdEZpZWxkID09ICdzdHJpbmcnID8gJCh0aGlzLm9wdHMuYWx0RmllbGQpIDogdGhpcy5vcHRzLmFsdEZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlOyAvLyBOZWVkIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmVuZGVyaW5nXHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLm9wdHMuc3RhcnREYXRlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB0aGlzLm9wdHMudmlldztcclxuICAgICAgICB0aGlzLl9jcmVhdGVTaG9ydEN1dHMoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnZpZXdzID0ge307XHJcbiAgICAgICAgdGhpcy5rZXlzID0gW107XHJcbiAgICAgICAgdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICB0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyID0gRGF0ZXBpY2tlcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBWRVJTSU9OOiBWRVJTSU9OLFxyXG4gICAgICAgIHZpZXdJbmRleGVzOiBbJ2RheXMnLCAnbW9udGhzJywgJ3llYXJzJ10sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250YWluZXJCdWlsdCAmJiAhdGhpcy5vcHRzLmlubGluZSAmJiB0aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGREYXRlcGlja2Vyc0NvbnRhaW5lcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQmFzZUh0bWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5bmNXaXRoTWluTWF4RGF0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMuaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGV4dHJhIGNsYXNzZXMgZm9yIHByb3BlciB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLm9wdHMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5rZXlib2FyZE5hdiAmJiAhdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZEtleWJvYXJkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9vbk1vdXNlRG93bkRhdGVwaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwRGF0ZXBpY2tlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlciA9IG5ldyAkLmZuLmRhdGVwaWNrZXIuVGltZXBpY2tlcih0aGlzLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFRpbWVwaWNrZXJFdmVudHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcygnLW9ubHktdGltZXBpY2tlci0nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XSA9IG5ldyAkLmZuLmRhdGVwaWNrZXIuQm9keSh0aGlzLCB0aGlzLmN1cnJlbnRWaWV3LCB0aGlzLm9wdHMpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5uYXYgPSBuZXcgJC5mbi5kYXRlcGlja2VyLk5hdmlnYXRpb24odGhpcywgdGhpcy5vcHRzKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5jdXJyZW50VmlldztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdjbGlja0NlbGwuYWRwJywgdGhpcy5fb25DbGlja0NlbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub24oJ21vdXNlZW50ZXInLCAnLmRhdGVwaWNrZXItLWNlbGwnLCB0aGlzLl9vbk1vdXNlRW50ZXJDZWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZWxlYXZlJywgJy5kYXRlcGlja2VyLS1jZWxsJywgdGhpcy5fb25Nb3VzZUxlYXZlQ2VsbC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY3JlYXRlU2hvcnRDdXRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWluRGF0ZSA9IHRoaXMub3B0cy5taW5EYXRlID8gdGhpcy5vcHRzLm1pbkRhdGUgOiBuZXcgRGF0ZSgtODYzOTk5OTkxMzYwMDAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGF0ZSA9IHRoaXMub3B0cy5tYXhEYXRlID8gdGhpcy5vcHRzLm1heERhdGUgOiBuZXcgRGF0ZSg4NjM5OTk5OTEzNjAwMDAwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEV2ZW50cyA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24odGhpcy5vcHRzLnNob3dFdmVudCArICcuYWRwJywgdGhpcy5fb25TaG93RXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdtb3VzZXVwLmFkcCcsIHRoaXMuX29uTW91c2VVcEVsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignYmx1ci5hZHAnLCB0aGlzLl9vbkJsdXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdrZXl1cC5hZHAnLCB0aGlzLl9vbktleVVwR2VuZXJhbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYWRwJywgdGhpcy5fb25SZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5vbignbW91c2V1cC5hZHAnLCB0aGlzLl9vbk1vdXNlVXBCb2R5LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kS2V5Ym9hcmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2tleWRvd24uYWRwJywgdGhpcy5fb25LZXlEb3duLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigna2V5dXAuYWRwJywgdGhpcy5fb25LZXlVcC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2hvdEtleS5hZHAnLCB0aGlzLl9vbkhvdEtleS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZFRpbWVwaWNrZXJFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ3RpbWVDaGFuZ2UuYWRwJywgdGhpcy5fb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzV2Vla2VuZDogZnVuY3Rpb24gKGRheSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRzLndlZWtlbmRzLmluZGV4T2YoZGF5KSAhPT0gLTE7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2RlZmluZUxvY2FsZTogZnVuY3Rpb24gKGxhbmcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5nID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYyA9ICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZVtsYW5nXTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5sb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhblxcJ3QgZmluZCBsYW5ndWFnZSBcIicgKyBsYW5nICsgJ1wiIGluIERhdGVwaWNrZXIubGFuZ3VhZ2UsIHdpbGwgdXNlIFwicnVcIiBpbnN0ZWFkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubG9jID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZS5ydSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW2xhbmddKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1LCBsYW5nKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmRhdGVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLmRhdGVGb3JtYXQgPSB0aGlzLm9wdHMuZGF0ZUZvcm1hdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLnRpbWVGb3JtYXQgPSB0aGlzLm9wdHMudGltZUZvcm1hdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmZpcnN0RGF5ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZmlyc3REYXkgPSB0aGlzLm9wdHMuZmlyc3REYXlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy5kYXRlRm9ybWF0ID0gW3RoaXMubG9jLmRhdGVGb3JtYXQsIHRoaXMubG9jLnRpbWVGb3JtYXRdLmpvaW4odGhpcy5vcHRzLmRhdGVUaW1lU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZGF0ZUZvcm1hdCA9IHRoaXMubG9jLnRpbWVGb3JtYXQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IHRoaXMuX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubG9jLnRpbWVGb3JtYXQubWF0Y2goYm91bmRhcnkoJ2FhJykpIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy50aW1lRm9ybWF0Lm1hdGNoKGJvdW5kYXJ5KCdBQScpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgdGhpcy5hbXBtID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckJ1aWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgJGJvZHkuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIgaWQ9XCJkYXRlcGlja2Vycy1jb250YWluZXJcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgJGRhdGVwaWNrZXJzQ29udGFpbmVyID0gJCgnI2RhdGVwaWNrZXJzLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEJhc2VIdG1sOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkYXBwZW5kVGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgJGlubGluZSA9ICQoJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWlubGluZVwiPicpO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5lbC5ub2RlTmFtZSA9PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5pbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkYXBwZW5kVGFyZ2V0ID0gJGRhdGVwaWNrZXJzQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkYXBwZW5kVGFyZ2V0ID0gJGlubGluZS5pbnNlcnRBZnRlcih0aGlzLiRlbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRhcHBlbmRUYXJnZXQgPSAkaW5saW5lLmFwcGVuZFRvKHRoaXMuJGVsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyID0gJChiYXNlVGVtcGxhdGUpLmFwcGVuZFRvKCRhcHBlbmRUYXJnZXQpO1xyXG4gICAgICAgICAgICB0aGlzLiRjb250ZW50ID0gJCgnLmRhdGVwaWNrZXItLWNvbnRlbnQnLCB0aGlzLiRkYXRlcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kbmF2ID0gJCgnLmRhdGVwaWNrZXItLW5hdicsIHRoaXMuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF90cmlnZ2VyT25DaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20gdHJpZ2dlcmluZyBtdWx0aXBsZSBvblNlbGVjdCBjYWxsYmFjayB3aXRoIHNhbWUgYXJndW1lbnQgKGVtcHR5IHN0cmluZykgaW4gSUUxMC0xMVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlID09PSAnJykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHMub25TZWxlY3QoJycsICcnLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZXMgPSB0aGlzLnNlbGVjdGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShzZWxlY3RlZERhdGVzWzBdKSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZGF0ZXMgPSBuZXcgRGF0ZShcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC55ZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLm1vbnRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLmRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQubWludXRlc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWREYXRlcyA9IHNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdERhdGUoX3RoaXMubG9jLmRhdGVGb3JtYXQsIGRhdGUpXHJcbiAgICAgICAgICAgICAgICB9KS5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgZGF0ZXMgYXJyYXksIHRvIHNlcGFyYXRlIGl0IGZyb20gb3JpZ2luYWwgc2VsZWN0ZWREYXRlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm11bHRpcGxlRGF0ZXMgfHwgdGhpcy5vcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlcyA9IHNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUueWVhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLm1pbnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPSBmb3JtYXR0ZWREYXRlcztcclxuICAgICAgICAgICAgdGhpcy5vcHRzLm9uU2VsZWN0KGZvcm1hdHRlZERhdGVzLCBkYXRlcywgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IHRoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLm9wdHM7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXlzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGggKyAxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZU1vbnRoKSBvLm9uQ2hhbmdlTW9udGgodGhpcy5wYXJzZWREYXRlLm1vbnRoLCB0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aHMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciArIDEsIGQubW9udGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlWWVhcikgby5vbkNoYW5nZVllYXIodGhpcy5wYXJzZWREYXRlLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcnMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciArIDEwLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZURlY2FkZSkgby5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmV2OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0cztcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlTW9udGgpIG8ub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsIHRoaXMucGFyc2VkRGF0ZS55ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRocyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyIC0gMSwgZC5tb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VZZWFyKSBvLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyIC0gMTAsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlRGVjYWRlKSBvLm9uQ2hhbmdlRGVjYWRlKHRoaXMuY3VyRGVjYWRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZvcm1hdERhdGU6IGZ1bmN0aW9uIChzdHJpbmcsIGRhdGUpIHtcclxuICAgICAgICAgICAgZGF0ZSA9IGRhdGUgfHwgdGhpcy5kYXRlO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgYm91bmRhcnkgPSB0aGlzLl9nZXRXb3JkQm91bmRhcnlSZWdFeHAsXHJcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSB0aGlzLmxvYyxcclxuICAgICAgICAgICAgICAgIGxlYWRpbmdaZXJvID0gZGF0ZXBpY2tlci5nZXRMZWFkaW5nWmVyb051bSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZSA9IGRhdGVwaWNrZXIuZ2V0RGVjYWRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZ1bGxIb3VycyA9IGQuZnVsbEhvdXJzLFxyXG4gICAgICAgICAgICAgICAgaG91cnMgPSBkLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgYW1wbSA9IHN0cmluZy5tYXRjaChib3VuZGFyeSgnYWEnKSkgfHwgc3RyaW5nLm1hdGNoKGJvdW5kYXJ5KCdBQScpKSxcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdhbScsXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlciA9IHRoaXMuX3JlcGxhY2VyLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRIb3VycztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlciAmJiB0aGlzLnRpbWVwaWNrZXIgJiYgYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRIb3VycyA9IHRoaXMudGltZXBpY2tlci5fZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlKGRhdGUsIGFtcG0pO1xyXG4gICAgICAgICAgICAgICAgZnVsbEhvdXJzID0gbGVhZGluZ1plcm8odmFsaWRIb3Vycy5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBob3VycyA9IHZhbGlkSG91cnMuaG91cnM7XHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSB2YWxpZEhvdXJzLmRheVBlcmlvZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9ALy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL0AvLCBkYXRlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9hYS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2FhJyksIGRheVBlcmlvZCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9BQS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ0FBJyksIGRheVBlcmlvZC50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2RkLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnZGQnKSwgZC5mdWxsRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9kLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnZCcpLCBkLmRhdGUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvREQvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdERCcpLCBsb2NhbGUuZGF5c1tkLmRheV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvRC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ0QnKSwgbG9jYWxlLmRheXNTaG9ydFtkLmRheV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvbW0vLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdtbScpLCBkLmZ1bGxNb250aCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9tLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnbScpLCBkLm1vbnRoICsgMSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9NTS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ01NJyksIHRoaXMubG9jLm1vbnRoc1tkLm1vbnRoXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9NLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnTScpLCBsb2NhbGUubW9udGhzU2hvcnRbZC5tb250aF0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvaWkvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdpaScpLCBkLmZ1bGxNaW51dGVzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2kvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdpJyksIGQubWludXRlcyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9oaC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2hoJyksIGZ1bGxIb3Vycyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9oLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnaCcpLCBob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC95eXl5Ly50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgneXl5eScpLCBkLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXl5eTEvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eXl5MScpLCBkZWNhZGVbMF0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXl5eTIvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eXl5MicpLCBkZWNhZGVbMV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXkvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eScpLCBkLnllYXIudG9TdHJpbmcoKS5zbGljZSgtMikpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZXBsYWNlcjogZnVuY3Rpb24gKHN0ciwgcmVnLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZShyZWcsIGZ1bmN0aW9uIChtYXRjaCwgcDEscDIscDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwMSArIGRhdGEgKyBwMztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0V29yZEJvdW5kYXJ5UmVnRXhwOiBmdW5jdGlvbiAoc2lnbikge1xyXG4gICAgICAgICAgICB2YXIgc3ltYm9scyA9ICdcXFxcc3xcXFxcLnwtfC98XFxcXFxcXFx8LHxcXFxcJHxcXFxcIXxcXFxcP3w6fDsnO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJyhefD58JyArIHN5bWJvbHMgKyAnKSgnICsgc2lnbiArICcpKCR8PHwnICsgc3ltYm9scyArICcpJywgJ2cnKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgc2VsZWN0RGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBfdGhpcy5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZCA9IF90aGlzLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGVzID0gX3RoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIGxlbiA9IHNlbGVjdGVkRGF0ZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdERhdGUoZClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGFzdFNlbGVjdGVkRGF0ZSA9IGRhdGU7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgbmV3IHRpbWUgdmFsdWVzIGZyb20gRGF0ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUoZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE9uIHRoaXMgc3RlcCB0aW1lcGlja2VyIHdpbGwgc2V0IHZhbGlkIHZhbHVlcyBpbiBpdCdzIGluc3RhbmNlXHJcbiAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyKCdzZWxlY3REYXRlJywgZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgY29ycmVjdCB0aW1lIHZhbHVlcyBhZnRlciB0aW1lcGlja2VyJ3MgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20gc2V0dGluZyBob3VycyBvciBtaW51dGVzIHdoaWNoIHZhbHVlcyBhcmUgbGVzc2VyIHRoZW4gYG1pbmAgdmFsdWUgb3JcclxuICAgICAgICAgICAgLy8gZ3JlYXRlciB0aGVuIGBtYXhgIHZhbHVlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF90aGlzLnZpZXcgPT0gJ2RheXMnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRNb250aCgpICE9IGQubW9udGggJiYgb3B0cy5tb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF90aGlzLnZpZXcgPT0gJ3llYXJzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0RnVsbFllYXIoKSAhPSBkLnllYXIgJiYgb3B0cy5tb3ZlVG9PdGhlclllYXJzT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0RhdGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kYXRlID0gbmV3RGF0ZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubmF2Ll9yZW5kZXIoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5tdWx0aXBsZURhdGVzICYmICFvcHRzLnJhbmdlKSB7IC8vIFNldCBwcmlvcml0eSB0byByYW5nZSBmdW5jdGlvbmFsaXR5XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09PSBvcHRzLm11bHRpcGxlRGF0ZXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX2lzU2VsZWN0ZWQoZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtkYXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tYXhSYW5nZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN3YXAgZGF0ZXMgaWYgdGhleSB3ZXJlIHNlbGVjdGVkIHZpYSBkcC5zZWxlY3REYXRlKCkgYW5kIHNlY29uZCBkYXRlIHdhcyBzbWFsbGVyIHRoZW4gZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5iaWdnZXIoX3RoaXMubWF4UmFuZ2UsIF90aGlzLm1pblJhbmdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9IF90aGlzLm1pblJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbX3RoaXMubWluUmFuZ2UsIF90aGlzLm1heFJhbmdlXVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtkYXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW2RhdGVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMub25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyT25DaGFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0Nsb3NlICYmICF0aGlzLnRpbWVwaWNrZXJJc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRzLm11bHRpcGxlRGF0ZXMgJiYgIW9wdHMucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMucmFuZ2UgJiYgX3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQuc29tZShmdW5jdGlvbiAoY3VyRGF0ZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIuaXNTYW1lKGN1ckRhdGUsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQuc3BsaWNlKGksIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RTZWxlY3RlZERhdGUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gX3RoaXMuc2VsZWN0ZWREYXRlc1tfdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlld3NbX3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZGF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5vcHRzLm1pblZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRvZGF5QnV0dG9uIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMub3B0cy50b2RheUJ1dHRvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldElucHV0VmFsdWUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgZGF0ZXBpY2tlciBvcHRpb25zXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBwYXJhbSAtIHBhcmFtZXRlcidzIG5hbWUgdG8gdXBkYXRlLiBJZiBvYmplY3QgdGhlbiBpdCB3aWxsIGV4dGVuZCBjdXJyZW50IG9wdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8T2JqZWN0fSBbdmFsdWVdIC0gbmV3IHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAocGFyYW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbGFzdFNlbGVjdGVkRGF0ZSA9IHRoaXMubGFzdFNlbGVjdGVkRGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZW4gPT0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzW3BhcmFtXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxlbiA9PSAxICYmIHR5cGVvZiBwYXJhbSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5vcHRzLCBwYXJhbSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlU2hvcnRDdXRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5bmNXaXRoTWluTWF4RGF0ZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMubmF2Ll9hZGRCdXR0b25zSWZOZWVkKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB0aGlzLm5hdi5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxJc0lucHV0ICYmICF0aGlzLm9wdHMuaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRQb3NpdGlvbkNsYXNzZXModGhpcy5vcHRzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKCctb25seS10aW1lcGlja2VyLScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2VsZWN0ZWREYXRlKSB0aGlzLnRpbWVwaWNrZXIuX2hhbmRsZURhdGUobGFzdFNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3VwZGF0ZVJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl91cGRhdGVDdXJyZW50VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIGhvdXJzIGFuZCBtaW51dGVzIGlmIGl0J3MgdmFsdWVzIGhhdmUgYmVlbiBjaGFuZ2VkIHRocm91Z2ggbWluL21heCBob3Vycy9taW51dGVzXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdFNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGUuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0U2VsZWN0ZWREYXRlLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc3luY1dpdGhNaW5NYXhEYXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyVGltZSA9IHRoaXMuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWluVGltZSA+IGN1clRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMubWluRGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4VGltZSA8IGN1clRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9pc1NlbGVjdGVkOiBmdW5jdGlvbiAoY2hlY2tEYXRlLCBjZWxsVHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5zb21lKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5pc1NhbWUoZGF0ZSwgY2hlY2tEYXRlLCBjZWxsVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0SW5wdXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IF90aGlzLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBfdGhpcy5sb2MuZGF0ZUZvcm1hdCxcclxuICAgICAgICAgICAgICAgIGFsdEZvcm1hdCA9IG9wdHMuYWx0RmllbGREYXRlRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfdGhpcy5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXREYXRlKGZvcm1hdCwgZGF0ZSlcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMuYWx0RmllbGQgJiYgX3RoaXMuJGFsdEZpZWxkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzID0gdGhpcy5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXREYXRlKGFsdEZvcm1hdCwgZGF0ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzID0gYWx0VmFsdWVzLmpvaW4odGhpcy5vcHRzLm11bHRpcGxlRGF0ZXNTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYWx0RmllbGQudmFsKGFsdFZhbHVlcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvcik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRlbC52YWwodmFsdWUpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgaWYgZGF0ZSBpcyBiZXR3ZWVuIG1pbkRhdGUgYW5kIG1heERhdGVcclxuICAgICAgICAgKiBAcGFyYW0gZGF0ZSB7b2JqZWN0fSAtIGRhdGUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gLSBjZWxsIHR5cGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0luUmFuZ2U6IGZ1bmN0aW9uIChkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lID0gZGF0ZS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgbWluID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMubWluRGF0ZSksXHJcbiAgICAgICAgICAgICAgICBtYXggPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5tYXhEYXRlKSxcclxuICAgICAgICAgICAgICAgIGRNaW5UaW1lID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoLCBtaW4uZGF0ZSkuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgZE1heFRpbWUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIG1heC5kYXRlKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICB0eXBlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXk6IHRpbWUgPj0gdGhpcy5taW5UaW1lICYmIHRpbWUgPD0gdGhpcy5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBkTWluVGltZSA+PSB0aGlzLm1pblRpbWUgJiYgZE1heFRpbWUgPD0gdGhpcy5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IGQueWVhciA+PSBtaW4ueWVhciAmJiBkLnllYXIgPD0gbWF4LnllYXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlID8gdHlwZXNbdHlwZV0gOiB0eXBlcy5kYXlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RGltZW5zaW9uczogZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJGVsLm9mZnNldCgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAkZWwub3V0ZXJXaWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAkZWwub3V0ZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RGF0ZUZyb21DZWxsOiBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyRGF0ZSA9IHRoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBjZWxsLmRhdGEoJ3llYXInKSB8fCBjdXJEYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IGNlbGwuZGF0YSgnbW9udGgnKSA9PSB1bmRlZmluZWQgPyBjdXJEYXRlLm1vbnRoIDogY2VsbC5kYXRhKCdtb250aCcpLFxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGNlbGwuZGF0YSgnZGF0ZScpIHx8IDE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRQb3NpdGlvbkNsYXNzZXM6IGZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICAgICAgcG9zID0gcG9zLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHZhciBtYWluID0gcG9zWzBdLFxyXG4gICAgICAgICAgICAgICAgc2VjID0gcG9zWzFdLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9ICdkYXRlcGlja2VyIC0nICsgbWFpbiArICctJyArIHNlYyArICctIC1mcm9tLScgKyBtYWluICsgJy0nO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSkgY2xhc3NlcyArPSAnIGFjdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignY2xhc3MnKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGNsYXNzZXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbiAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCB0aGlzLm9wdHMucG9zaXRpb247XHJcblxyXG4gICAgICAgICAgICB2YXIgZGltcyA9IHRoaXMuX2dldERpbWVuc2lvbnModGhpcy4kZWwpLFxyXG4gICAgICAgICAgICAgICAgc2VsZkRpbXMgPSB0aGlzLl9nZXREaW1lbnNpb25zKHRoaXMuJGRhdGVwaWNrZXIpLFxyXG4gICAgICAgICAgICAgICAgcG9zID0gcG9zaXRpb24uc3BsaXQoJyAnKSxcclxuICAgICAgICAgICAgICAgIHRvcCwgbGVmdCxcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMub3B0cy5vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBtYWluID0gcG9zWzBdLFxyXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5ID0gcG9zWzFdO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChtYWluKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wIC0gc2VsZkRpbXMuaGVpZ2h0IC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgKyBkaW1zLndpZHRoICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcCArIGRpbXMuaGVpZ2h0ICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCAtIHNlbGZEaW1zLndpZHRoIC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goc2Vjb25kYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgKyBkaW1zLndpZHRoIC0gc2VsZkRpbXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wICsgZGltcy5oZWlnaHQgLSBzZWxmRGltcy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL2xlZnR8cmlnaHQvLnRlc3QobWFpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3AgKyBkaW1zLmhlaWdodC8yIC0gc2VsZkRpbXMuaGVpZ2h0LzI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCArIGRpbXMud2lkdGgvMiAtIHNlbGZEaW1zLndpZHRoLzI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdG9wXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9uU2hvdyA9IHRoaXMub3B0cy5vblNob3c7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uU2hvdykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFZpc2lvbkV2ZW50cyhvblNob3cpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvbkhpZGUgPSB0aGlzLm9wdHMub25IaWRlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJy0xMDAwMDBweCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMua2V5cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbkZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5ibHVyKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob25IaWRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVmlzaW9uRXZlbnRzKG9uSGlkZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRvd246IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZVZpZXcoZGF0ZSwgJ2Rvd24nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlVmlldyhkYXRlLCAndXAnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZFZpc2lvbkV2ZW50czogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub2ZmKCd0cmFuc2l0aW9uZW5kLmRwJyk7XHJcbiAgICAgICAgICAgIGV2ZW50KHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbmUoJ3RyYW5zaXRpb25lbmQuZHAnLCBldmVudC5iaW5kKHRoaXMsIHRoaXMsIHRydWUpKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jaGFuZ2VWaWV3OiBmdW5jdGlvbiAoZGF0ZSwgZGlyKSB7XHJcbiAgICAgICAgICAgIGRhdGUgPSBkYXRlIHx8IHRoaXMuZm9jdXNlZCB8fCB0aGlzLmRhdGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV4dFZpZXcgPSBkaXIgPT0gJ3VwJyA/IHRoaXMudmlld0luZGV4ICsgMSA6IHRoaXMudmlld0luZGV4IC0gMTtcclxuICAgICAgICAgICAgaWYgKG5leHRWaWV3ID4gMikgbmV4dFZpZXcgPSAyO1xyXG4gICAgICAgICAgICBpZiAobmV4dFZpZXcgPCAwKSBuZXh0VmlldyA9IDA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy52aWV3SW5kZXhlc1tuZXh0Vmlld107XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9oYW5kbGVIb3RLZXk6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5fZ2V0Rm9jdXNlZERhdGUoKSksXHJcbiAgICAgICAgICAgICAgICBmb2N1c2VkUGFyc2VkLFxyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0cyxcclxuICAgICAgICAgICAgICAgIG5ld0RhdGUsXHJcbiAgICAgICAgICAgICAgICB0b3RhbERheXNJbk5leHRNb250aCxcclxuICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgeWVhckNoYW5nZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybFJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsTGVmdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsRG93bic6XHJcbiAgICAgICAgICAgICAgICAgICAgbSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdFJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoaWZ0VXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIHllYXJDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdExlZnQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2hpZnREb3duJzpcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0VXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbHRMZWZ0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FsdERvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsU2hpZnRVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b3RhbERheXNJbk5leHRNb250aCA9IGRhdGVwaWNrZXIuZ2V0RGF5c0NvdW50KG5ldyBEYXRlKHksbSkpO1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoeSxtLGQpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgbmV4dCBtb250aCBoYXMgbGVzcyBkYXlzIHRoYW4gY3VycmVudCwgc2V0IGRhdGUgdG8gdG90YWwgZGF5cyBpbiB0aGF0IG1vbnRoXHJcbiAgICAgICAgICAgIGlmICh0b3RhbERheXNJbk5leHRNb250aCA8IGQpIGQgPSB0b3RhbERheXNJbk5leHRNb250aDtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIG5ld0RhdGUgaXMgaW4gdmFsaWQgcmFuZ2VcclxuICAgICAgICAgICAgaWYgKG5ld0RhdGUuZ2V0VGltZSgpIDwgdGhpcy5taW5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5taW5EYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld0RhdGUuZ2V0VGltZSgpID4gdGhpcy5tYXhUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tYXhEYXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSBuZXdEYXRlO1xyXG5cclxuICAgICAgICAgICAgZm9jdXNlZFBhcnNlZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShuZXdEYXRlKTtcclxuICAgICAgICAgICAgaWYgKG1vbnRoQ2hhbmdlZCAmJiBvLm9uQ2hhbmdlTW9udGgpIHtcclxuICAgICAgICAgICAgICAgIG8ub25DaGFuZ2VNb250aChmb2N1c2VkUGFyc2VkLm1vbnRoLCBmb2N1c2VkUGFyc2VkLnllYXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHllYXJDaGFuZ2VkICYmIG8ub25DaGFuZ2VZZWFyKSB7XHJcbiAgICAgICAgICAgICAgICBvLm9uQ2hhbmdlWWVhcihmb2N1c2VkUGFyc2VkLnllYXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlY2FkZUNoYW5nZWQgJiYgby5vbkNoYW5nZURlY2FkZSkge1xyXG4gICAgICAgICAgICAgICAgby5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZWdpc3RlcktleTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gdGhpcy5rZXlzLnNvbWUoZnVuY3Rpb24gKGN1cktleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cktleSA9PSBrZXk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5cy5wdXNoKGtleSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF91blJlZ2lzdGVyS2V5OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmtleXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNIb3RLZXlQcmVzc2VkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50SG90S2V5LFxyXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIHByZXNzZWRLZXlzID0gdGhpcy5rZXlzLnNvcnQoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGhvdEtleSBpbiBob3RLZXlzKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SG90S2V5ID0gaG90S2V5c1tob3RLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXNzZWRLZXlzLmxlbmd0aCAhPSBjdXJyZW50SG90S2V5Lmxlbmd0aCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRIb3RLZXkuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkgeyByZXR1cm4ga2V5ID09IHByZXNzZWRLZXlzW2ldfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZ2dlcignaG90S2V5JywgaG90S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdHJpZ2dlcjogZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLnRyaWdnZXIoZXZlbnQsIGFyZ3MpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2ZvY3VzTmV4dENlbGw6IGZ1bmN0aW9uIChrZXlDb2RlLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IHRoaXMuY2VsbFR5cGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLl9nZXRGb2N1c2VkRGF0ZSgpKSxcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNIb3RLZXlQcmVzc2VkKCkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goa2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ2RheScgPyAoZCAtPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ21vbnRoJyA/IChtIC09IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAneWVhcicgPyAoeSAtPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzODogLy8gdXBcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdkYXknID8gKGQgLT0gNykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdtb250aCcgPyAobSAtPSAzKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ3llYXInID8gKHkgLT0gNCkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkICs9IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gKz0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5ICs9IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOiAvLyBkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkICs9IDcpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gKz0gMykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5ICs9IDQpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBuZCA9IG5ldyBEYXRlKHksbSxkKTtcclxuICAgICAgICAgICAgaWYgKG5kLmdldFRpbWUoKSA8IHRoaXMubWluVGltZSkge1xyXG4gICAgICAgICAgICAgICAgbmQgPSB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmQuZ2V0VGltZSgpID4gdGhpcy5tYXhUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZCA9IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gbmQ7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRGb2N1c2VkRGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZm9jdXNlZCAgPSB0aGlzLmZvY3VzZWQgfHwgdGhpcy5zZWxlY3RlZERhdGVzW3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgIGQgPSB0aGlzLnBhcnNlZERhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGF5cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG5ldyBEYXRlKGQueWVhciwgMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZm9jdXNlZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0Q2VsbDogZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgdGhpcy5jZWxsVHlwZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSAnLmRhdGVwaWNrZXItLWNlbGxbZGF0YS15ZWFyPVwiJyArIGQueWVhciArICdcIl0nLFxyXG4gICAgICAgICAgICAgICAgJGNlbGw7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9ICdbZGF0YS1tb250aD1cIicgKyBkLm1vbnRoICsgJ1wiXSc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yICs9ICdbZGF0YS1tb250aD1cIicgKyBkLm1vbnRoICsgJ1wiXVtkYXRhLWRhdGU9XCInICsgZC5kYXRlICsgJ1wiXSc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGNlbGwgPSB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLiRlbC5maW5kKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAkY2VsbC5sZW5ndGggPyAkY2VsbCA6ICQoJycpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgX3RoaXMuJGVsXHJcbiAgICAgICAgICAgICAgICAub2ZmKCcuYWRwJylcclxuICAgICAgICAgICAgICAgIC5kYXRhKCdkYXRlcGlja2VyJywgJycpO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIF90aGlzLnZpZXdzID0ge307XHJcbiAgICAgICAgICAgIF90aGlzLmtleXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRzLmlubGluZSB8fCAhX3RoaXMuZWxJc0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kZGF0ZXBpY2tlci5jbG9zZXN0KCcuZGF0ZXBpY2tlci1pbmxpbmUnKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRkYXRlcGlja2VyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzOiBmdW5jdGlvbiAoYWxyZWFkeVNlbGVjdGVkLCBzZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMudG9nZ2xlU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgcG9zc2liaWxpdHkgdG8gc2VsZWN0IHNhbWUgZGF0ZSB3aGVuIHJhbmdlIGlzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCAhPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NsaWNrQ2VsbCcsIHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURhdGUoc2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdHMudG9nZ2xlU2VsZWN0ZWQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEYXRlKHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENoYW5nZSBsYXN0IHNlbGVjdGVkIGRhdGUgdG8gYmUgYWJsZSB0byBjaGFuZ2UgdGltZSB3aGVuIGNsaWNraW5nIG9uIHRoaXMgY2VsbFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy50b2dnbGVTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gYWxyZWFkeVNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl9zZXRUaW1lKGFscmVhZHlTZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uU2hvd0V2ZW50OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25CbHVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbkZvY3VzICYmIHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZURvd25EYXRlcGlja2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBEYXRlcGlja2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmluRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoIWUub3JpZ2luYWxFdmVudC50aW1lcGlja2VyRm9jdXMpIHRoaXMuJGVsLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5VXBHZW5lcmFsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpcy4kZWwudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uUmVzaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBCb2R5OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50LmluRm9jdXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUgJiYgIXRoaXMuaW5Gb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZVVwRWw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5pbkZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLl9vbktleVVwR2VuZXJhbC5iaW5kKHRoaXMpLDQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZS53aGljaDtcclxuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJLZXkoY29kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBcnJvd3NcclxuICAgICAgICAgICAgaWYgKGNvZGUgPj0gMzcgJiYgY29kZSA8PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNOZXh0Q2VsbChjb2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRW50ZXJcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3ICE9IHRoaXMub3B0cy5taW5WaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bigpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFscmVhZHlTZWxlY3RlZCA9IHRoaXMuX2lzU2VsZWN0ZWQodGhpcy5mb2N1c2VkLCB0aGlzLmNlbGxUeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxyZWFkeVNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuZm9jdXNlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMoYWxyZWFkeVNlbGVjdGVkLCB0aGlzLmZvY3VzZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBFc2NcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT0gMjcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5VXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZS53aGljaDtcclxuICAgICAgICAgICAgdGhpcy5fdW5SZWdpc3RlcktleShjb2RlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Ib3RLZXk6IGZ1bmN0aW9uIChlLCBob3RLZXkpIHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlSG90S2V5KGhvdEtleSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VFbnRlckNlbGw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRlcGlja2VyLS1jZWxsJyksXHJcbiAgICAgICAgICAgICAgICBkYXRlID0gdGhpcy5fZ2V0RGF0ZUZyb21DZWxsKCRjZWxsKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZnJvbSB1bm5lY2Vzc2FyeSByZW5kZXJpbmcgYW5kIHNldHRpbmcgbmV3IGN1cnJlbnREYXRlXHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjZWxsLmFkZENsYXNzKCctZm9jdXMtJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSBkYXRlO1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yYW5nZSAmJiB0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSB0aGlzLnNlbGVjdGVkRGF0ZXNbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5sZXNzKHRoaXMubWluUmFuZ2UsIHRoaXMuZm9jdXNlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gdGhpcy5taW5SYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl91cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlTGVhdmVDZWxsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuZGF0ZXBpY2tlci0tY2VsbCcpO1xyXG5cclxuICAgICAgICAgICAgJGNlbGwucmVtb3ZlQ2xhc3MoJy1mb2N1cy0nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uVGltZUNoYW5nZTogZnVuY3Rpb24gKGUsIGgsIG0pIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLmxhc3RTZWxlY3RlZERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoaCk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyhtKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWQgJiYgIXRoaXMuX2dldENlbGwoZGF0ZSkuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tDZWxsOiBmdW5jdGlvbiAoZSwgZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZShkYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgZm9jdXNlZCh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCF2YWwgJiYgdGhpcy5mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGNlbGwgPSB0aGlzLl9nZXRDZWxsKHRoaXMuZm9jdXNlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRjZWxsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRjZWxsLnJlbW92ZUNsYXNzKCctZm9jdXMtJylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mb2N1c2VkID0gdmFsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJhbmdlICYmIHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9IHRoaXMuc2VsZWN0ZWREYXRlc1swXTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmxlc3ModGhpcy5taW5SYW5nZSwgdGhpcy5fZm9jdXNlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gdGhpcy5taW5SYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2lsZW50KSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHZhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgZm9jdXNlZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvY3VzZWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IHBhcnNlZERhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5kYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgZGF0ZSAodmFsKSB7XHJcbiAgICAgICAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIERhdGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGVkICYmICF0aGlzLnNpbGVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLnZpZXddLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF2Ll9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUgJiYgdGhpcy5lbElzSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgZGF0ZSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnREYXRlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IHZpZXcgKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdJbmRleCA9IHRoaXMudmlld0luZGV4ZXMuaW5kZXhPZih2YWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlld0luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByZXZWaWV3ID0gdGhpcy5jdXJyZW50VmlldztcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHZhbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnZpZXdzW3ZhbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3ZhbF0gPSBuZXcgICQuZm4uZGF0ZXBpY2tlci5Cb2R5KHRoaXMsIHZhbCwgdGhpcy5vcHRzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3ZhbF0uX3JlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5wcmV2Vmlld10uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t2YWxdLnNob3coKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF2Ll9yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9uQ2hhbmdlVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5vbkNoYW5nZVZpZXcodmFsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxJc0lucHV0ICYmIHRoaXMudmlzaWJsZSkgdGhpcy5zZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IHZpZXcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWaWV3O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBjZWxsVHlwZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zdWJzdHJpbmcoMCwgdGhpcy52aWV3Lmxlbmd0aCAtIDEpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IG1pblRpbWUoKSB7XHJcbiAgICAgICAgICAgIHZhciBtaW4gPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5taW5EYXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1pbi55ZWFyLCBtaW4ubW9udGgsIG1pbi5kYXRlKS5nZXRUaW1lKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgbWF4VGltZSgpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLm1heERhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobWF4LnllYXIsIG1heC5tb250aCwgbWF4LmRhdGUpLmdldFRpbWUoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBjdXJEZWNhZGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlcGlja2VyLmdldERlY2FkZSh0aGlzLmRhdGUpXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyAgVXRpbHNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBkYXRlcGlja2VyLmdldERheXNDb3VudCA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgICAgbW9udGg6IGRhdGUuZ2V0TW9udGgoKSxcclxuICAgICAgICAgICAgZnVsbE1vbnRoOiAoZGF0ZS5nZXRNb250aCgpICsgMSkgPCAxMCA/ICcwJyArIChkYXRlLmdldE1vbnRoKCkgKyAxKSA6IGRhdGUuZ2V0TW9udGgoKSArIDEsIC8vIE9uZSBiYXNlZFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgZnVsbERhdGU6IGRhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyBkYXRlLmdldERhdGUoKSA6IGRhdGUuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICBkYXk6IGRhdGUuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgIGhvdXJzOiBkYXRlLmdldEhvdXJzKCksXHJcbiAgICAgICAgICAgIGZ1bGxIb3VyczogIGRhdGUuZ2V0SG91cnMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRIb3VycygpIDogIGRhdGUuZ2V0SG91cnMoKSAsXHJcbiAgICAgICAgICAgIG1pbnV0ZXM6IGRhdGUuZ2V0TWludXRlcygpLFxyXG4gICAgICAgICAgICBmdWxsTWludXRlczogIGRhdGUuZ2V0TWludXRlcygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldE1pbnV0ZXMoKSA6ICBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5nZXREZWNhZGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIHZhciBmaXJzdFllYXIgPSBNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIDEwKSAqIDEwO1xyXG5cclxuICAgICAgICByZXR1cm4gW2ZpcnN0WWVhciwgZmlyc3RZZWFyICsgOV07XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIudGVtcGxhdGUgPSBmdW5jdGlvbiAoc3RyLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8jXFx7KFtcXHddKylcXH0vZywgZnVuY3Rpb24gKHNvdXJjZSwgbWF0Y2gpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbbWF0Y2hdIHx8IGRhdGFbbWF0Y2hdID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVttYXRjaF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmlzU2FtZSA9IGZ1bmN0aW9uIChkYXRlMSwgZGF0ZTIsIHR5cGUpIHtcclxuICAgICAgICBpZiAoIWRhdGUxIHx8ICFkYXRlMikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBkMSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlMSksXHJcbiAgICAgICAgICAgIGQyID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUyKSxcclxuICAgICAgICAgICAgX3R5cGUgPSB0eXBlID8gdHlwZSA6ICdkYXknLFxyXG5cclxuICAgICAgICAgICAgY29uZGl0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGRheTogZDEuZGF0ZSA9PSBkMi5kYXRlICYmIGQxLm1vbnRoID09IGQyLm1vbnRoICYmIGQxLnllYXIgPT0gZDIueWVhcixcclxuICAgICAgICAgICAgICAgIG1vbnRoOiBkMS5tb250aCA9PSBkMi5tb250aCAmJiBkMS55ZWFyID09IGQyLnllYXIsXHJcbiAgICAgICAgICAgICAgICB5ZWFyOiBkMS55ZWFyID09IGQyLnllYXJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbnNbX3R5cGVdO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmxlc3MgPSBmdW5jdGlvbiAoZGF0ZUNvbXBhcmVUbywgZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgIGlmICghZGF0ZUNvbXBhcmVUbyB8fCAhZGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKSA8IGRhdGVDb21wYXJlVG8uZ2V0VGltZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmJpZ2dlciA9IGZ1bmN0aW9uIChkYXRlQ29tcGFyZVRvLCBkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRlQ29tcGFyZVRvIHx8ICFkYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpID4gZGF0ZUNvbXBhcmVUby5nZXRUaW1lKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuZ2V0TGVhZGluZ1plcm9OdW0gPSBmdW5jdGlvbiAobnVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KG51bSkgPCAxMCA/ICcwJyArIG51bSA6IG51bTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNvcHkgb2YgZGF0ZSB3aXRoIGhvdXJzIGFuZCBtaW51dGVzIGVxdWFscyB0byAwXHJcbiAgICAgKiBAcGFyYW0gZGF0ZSB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgZGF0ZXBpY2tlci5yZXNldFRpbWUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0ZSAhPSAnb2JqZWN0JykgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUueWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXRlKVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIgPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgIHBsdWdpbk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IERhdGVwaWNrZXIoIHRoaXMsIG9wdGlvbnMgKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSAkLmRhdGEodGhpcywgcGx1Z2luTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIF90aGlzLm9wdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJC5mbi5kYXRlcGlja2VyLkNvbnN0cnVjdG9yID0gRGF0ZXBpY2tlcjtcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UgPSB7XHJcbiAgICAgICAgcnU6IHtcclxuICAgICAgICAgICAgZGF5czogWyfQktC+0YHQutGA0LXRgdC10L3RjNC1JywgJ9Cf0L7QvdC10LTQtdC70YzQvdC40LonLCAn0JLRgtC+0YDQvdC40LonLCAn0KHRgNC10LTQsCcsICfQp9C10YLQstC10YDQsycsICfQn9GP0YLQvdC40YbQsCcsICfQodGD0LHQsdC+0YLQsCddLFxyXG4gICAgICAgICAgICBkYXlzU2hvcnQ6IFsn0JLQvtGBJywn0J/QvtC9Jywn0JLRgtC+Jywn0KHRgNC1Jywn0KfQtdGCJywn0J/Rj9GCJywn0KHRg9CxJ10sXHJcbiAgICAgICAgICAgIGRheXNNaW46IFsn0JLRgScsJ9Cf0L0nLCfQktGCJywn0KHRgCcsJ9Cn0YInLCfQn9GCJywn0KHQsSddLFxyXG4gICAgICAgICAgICBtb250aHM6IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ10sXHJcbiAgICAgICAgICAgIG1vbnRoc1Nob3J0OiBbJ9Cv0L3QsicsICfQpNC10LInLCAn0JzQsNGAJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0JjRjtC9JywgJ9CY0Y7QuycsICfQkNCy0LMnLCAn0KHQtdC9JywgJ9Ce0LrRgicsICfQndC+0Y8nLCAn0JTQtdC6J10sXHJcbiAgICAgICAgICAgIHRvZGF5OiAn0KHQtdCz0L7QtNC90Y8nLFxyXG4gICAgICAgICAgICBjbGVhcjogJ9Ce0YfQuNGB0YLQuNGC0YwnLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiAnZGQubW0ueXl5eScsXHJcbiAgICAgICAgICAgIHRpbWVGb3JtYXQ6ICdoaDppaScsXHJcbiAgICAgICAgICAgIGZpcnN0RGF5OiAxXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKGF1dG9Jbml0U2VsZWN0b3IpLmRhdGVwaWNrZXIoKTtcclxuICAgIH0pXHJcblxyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZXMgPSB7XHJcbiAgICAgICAgZGF5czonJyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXlzIGRhdGVwaWNrZXItLWJvZHlcIj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheXMtbmFtZXNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNlbGxzIGRhdGVwaWNrZXItLWNlbGxzLWRheXNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICBtb250aHM6ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW1vbnRocyBkYXRlcGlja2VyLS1ib2R5XCI+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1tb250aHNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICB5ZWFyczogJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0teWVhcnMgZGF0ZXBpY2tlci0tYm9keVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY2VsbHMgZGF0ZXBpY2tlci0tY2VsbHMteWVhcnNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5Cb2R5ID0gZnVuY3Rpb24gKGQsIHR5cGUsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcclxuICAgICAgICB0aGlzLiRlbCA9ICQoJycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuQm9keS5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZEV2ZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdjbGljaycsICcuZGF0ZXBpY2tlci0tY2VsbCcsICQucHJveHkodGhpcy5fb25DbGlja0NlbGwsIHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbCA9ICQodGVtcGxhdGVzW3RoaXMudHlwZV0pLmFwcGVuZFRvKHRoaXMuZC4kY29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuJG5hbWVzID0gJCgnLmRhdGVwaWNrZXItLWRheXMtbmFtZXMnLCB0aGlzLiRlbCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNlbGxzID0gJCgnLmRhdGVwaWNrZXItLWNlbGxzJywgdGhpcy4kZWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREYXlOYW1lc0h0bWw6IGZ1bmN0aW9uIChmaXJzdERheSwgY3VyRGF5LCBodG1sLCBpKSB7XHJcbiAgICAgICAgICAgIGN1ckRheSA9IGN1ckRheSAhPSB1bmRlZmluZWQgPyBjdXJEYXkgOiBmaXJzdERheTtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwgPyBodG1sIDogJyc7XHJcbiAgICAgICAgICAgIGkgPSBpICE9IHVuZGVmaW5lZCA/IGkgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgPiA3KSByZXR1cm4gaHRtbDtcclxuICAgICAgICAgICAgaWYgKGN1ckRheSA9PSA3KSByZXR1cm4gdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKGZpcnN0RGF5LCAwLCBodG1sLCArK2kpO1xyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheS1uYW1lJyArICh0aGlzLmQuaXNXZWVrZW5kKGN1ckRheSkgPyBcIiAtd2Vla2VuZC1cIiA6IFwiXCIpICsgJ1wiPicgKyB0aGlzLmQubG9jLmRheXNNaW5bY3VyRGF5XSArICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldERheU5hbWVzSHRtbChmaXJzdERheSwgKytjdXJEYXksIGh0bWwsICsraSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldENlbGxDb250ZW50czogZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBcImRhdGVwaWNrZXItLWNlbGwgZGF0ZXBpY2tlci0tY2VsbC1cIiArIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLmQsXHJcbiAgICAgICAgICAgICAgICBtaW5SYW5nZSA9IGRwLnJlc2V0VGltZShwYXJlbnQubWluUmFuZ2UpLFxyXG4gICAgICAgICAgICAgICAgbWF4UmFuZ2UgPSBkcC5yZXNldFRpbWUocGFyZW50Lm1heFJhbmdlKSxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBwYXJlbnQub3B0cyxcclxuICAgICAgICAgICAgICAgIGQgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyID0ge30sXHJcbiAgICAgICAgICAgICAgICBodG1sID0gZC5kYXRlO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaXNXZWVrZW5kKGQuZGF5KSkgY2xhc3NlcyArPSBcIiAtd2Vla2VuZC1cIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5tb250aCAhPSB0aGlzLmQucGFyc2VkRGF0ZS5tb250aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9IFwiIC1vdGhlci1tb250aC1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNlbGVjdE90aGVyTW9udGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9IFwiIC1kaXNhYmxlZC1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2hvd090aGVyTW9udGhzKSBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBwYXJlbnQubG9jW3BhcmVudC5vcHRzLm1vbnRoc0ZpZWxkXVtkLm1vbnRoXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNhZGUgPSBwYXJlbnQuY3VyRGVjYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQueWVhciA8IGRlY2FkZVswXSB8fCBkLnllYXIgPiBkZWNhZGVbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1vdGhlci1kZWNhZGUtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNlbGVjdE90aGVyWWVhcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLWRpc2FibGVkLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5zaG93T3RoZXJZZWFycykgaHRtbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMub25SZW5kZXJDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXIgPSBvcHRzLm9uUmVuZGVyQ2VsbChkYXRlLCB0eXBlKSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSByZW5kZXIuaHRtbCA/IHJlbmRlci5odG1sIDogaHRtbDtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gcmVuZGVyLmNsYXNzZXMgPyAnICcgKyByZW5kZXIuY2xhc3NlcyA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzU2FtZShtaW5SYW5nZSwgZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtcmFuZ2UtZnJvbS0nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzU2FtZShtYXhSYW5nZSwgZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtcmFuZ2UtdG8tJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDEgJiYgcGFyZW50LmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmxlc3MocGFyZW50LmZvY3VzZWQsIGRhdGUpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZHAubGVzcyhtYXhSYW5nZSwgZGF0ZSkgJiYgZHAuYmlnZ2VyKHBhcmVudC5mb2N1c2VkLCBkYXRlKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLWluLXJhbmdlLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSAmJiBkcC5pc1NhbWUocGFyZW50LmZvY3VzZWQsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtcmFuZ2UtZnJvbS0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmlzU2FtZShwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1yYW5nZS10by0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50LnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHAuYmlnZ2VyKG1pblJhbmdlLCBkYXRlKSAmJiBkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLWluLXJhbmdlLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoZHAuaXNTYW1lKGN1cnJlbnREYXRlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1jdXJyZW50LSc7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQuZm9jdXNlZCAmJiBkcC5pc1NhbWUoZGF0ZSwgcGFyZW50LmZvY3VzZWQsIHR5cGUpKSBjbGFzc2VzICs9ICcgLWZvY3VzLSc7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQuX2lzU2VsZWN0ZWQoZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtc2VsZWN0ZWQtJztcclxuICAgICAgICAgICAgaWYgKCFwYXJlbnQuX2lzSW5SYW5nZShkYXRlLCB0eXBlKSB8fCByZW5kZXIuZGlzYWJsZWQpIGNsYXNzZXMgKz0gJyAtZGlzYWJsZWQtJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyBkYXlzIG51bWJlciB0byByZW5kZXIuIEdlbmVyYXRlcyBkYXlzIGh0bWwgYW5kIHJldHVybnMgaXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGUgLSBEYXRlIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0RGF5c0h0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbE1vbnRoRGF5cyA9IGRwLmdldERheXNDb3VudChkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0TW9udGhEYXkgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSkuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgICAgICBsYXN0TW9udGhEYXkgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgdG90YWxNb250aERheXMpLmdldERheSgpLFxyXG4gICAgICAgICAgICAgICAgZGF5c0Zyb21QZXZNb250aCA9IGZpcnN0TW9udGhEYXkgLSB0aGlzLmQubG9jLmZpcnN0RGF5LFxyXG4gICAgICAgICAgICAgICAgZGF5c0Zyb21OZXh0TW9udGggPSA2IC0gbGFzdE1vbnRoRGF5ICsgdGhpcy5kLmxvYy5maXJzdERheTtcclxuXHJcbiAgICAgICAgICAgIGRheXNGcm9tUGV2TW9udGggPSBkYXlzRnJvbVBldk1vbnRoIDwgMCA/IGRheXNGcm9tUGV2TW9udGggKyA3IDogZGF5c0Zyb21QZXZNb250aDtcclxuICAgICAgICAgICAgZGF5c0Zyb21OZXh0TW9udGggPSBkYXlzRnJvbU5leHRNb250aCA+IDYgPyBkYXlzRnJvbU5leHRNb250aCAtIDcgOiBkYXlzRnJvbU5leHRNb250aDtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdGFydERheUluZGV4ID0gLWRheXNGcm9tUGV2TW9udGggKyAxLFxyXG4gICAgICAgICAgICAgICAgbSwgeSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydERheUluZGV4LCBtYXggPSB0b3RhbE1vbnRoRGF5cyArIGRheXNGcm9tTmV4dE1vbnRoOyBpIDw9IG1heDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUuZ2V0TW9udGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBodG1sICs9IHRoaXMuX2dldERheUh0bWwobmV3IERhdGUoeSwgbSwgaSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREYXlIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICdkYXknKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cIicgKyBjb250ZW50LmNsYXNzZXMgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS1kYXRlPVwiJyArIGRhdGUuZ2V0RGF0ZSgpICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgJ2RhdGEtbW9udGg9XCInICsgZGF0ZS5nZXRNb250aCgpICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgJ2RhdGEteWVhcj1cIicgKyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnXCI+JyArIGNvbnRlbnQuaHRtbCArICc8L2Rpdj4nO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdlbmVyYXRlcyBtb250aHMgaHRtbFxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRlIC0gZGF0ZSBpbnN0YW5jZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0TW9udGhzSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSAnJyxcclxuICAgICAgICAgICAgICAgIGQgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgaSA9IDA7XHJcblxyXG4gICAgICAgICAgICB3aGlsZShpIDwgMTIpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0TW9udGhIdG1sKG5ldyBEYXRlKGQueWVhciwgaSkpO1xyXG4gICAgICAgICAgICAgICAgaSsrXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRNb250aEh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICdtb250aCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiBkYXRhLW1vbnRoPVwiJyArIGRhdGUuZ2V0TW9udGgoKSArICdcIj4nICsgY29udGVudC5odG1sICsgJzwvZGl2PidcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0WWVhcnNIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBkZWNhZGUgPSBkcC5nZXREZWNhZGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBmaXJzdFllYXIgPSBkZWNhZGVbMF0gLSAxLFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgaSA9IGZpcnN0WWVhcjtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaTsgaSA8PSBkZWNhZGVbMV0gKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0WWVhckh0bWwobmV3IERhdGUoaSAsIDApKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldFllYXJIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENlbGxDb250ZW50cyhkYXRlLCAneWVhcicpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiBkYXRhLXllYXI9XCInICsgZGF0ZS5nZXRGdWxsWWVhcigpICsgJ1wiPicgKyBjb250ZW50Lmh0bWwgKyAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZW5kZXJUeXBlczoge1xyXG4gICAgICAgICAgICBkYXlzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF5TmFtZXMgPSB0aGlzLl9nZXREYXlOYW1lc0h0bWwodGhpcy5kLmxvYy5maXJzdERheSksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2dldERheXNIdG1sKHRoaXMuZC5jdXJyZW50RGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2VsbHMuaHRtbChkYXlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJG5hbWVzLmh0bWwoZGF5TmFtZXMpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vbnRoczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSB0aGlzLl9nZXRNb250aHNIdG1sKHRoaXMuZC5jdXJyZW50RGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2VsbHMuaHRtbChodG1sKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5ZWFyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSB0aGlzLl9nZXRZZWFyc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGh0bWwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVuZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVHlwZXNbdGhpcy50eXBlXS5iaW5kKHRoaXMpKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJGNlbGxzID0gJCgnLmRhdGVwaWNrZXItLWNlbGwnLCB0aGlzLiRjZWxscyksXHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzLFxyXG4gICAgICAgICAgICAgICAgJGNlbGwsXHJcbiAgICAgICAgICAgICAgICBkYXRlO1xyXG4gICAgICAgICAgICAkY2VsbHMuZWFjaChmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgJGNlbGwgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IF90aGlzLmQuX2dldERhdGVGcm9tQ2VsbCgkKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsIF90aGlzLmQuY2VsbFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgJGNlbGwuYXR0cignY2xhc3MnLGNsYXNzZXMuY2xhc3NlcylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgdGhpcy5hY2l0dmUgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vICBFdmVudHNcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIF9oYW5kbGVDbGljazogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gZWwuZGF0YSgnZGF0ZScpIHx8IDEsXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IGVsLmRhdGEoJ21vbnRoJykgfHwgMCxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBlbC5kYXRhKCd5ZWFyJykgfHwgdGhpcy5kLnBhcnNlZERhdGUueWVhcixcclxuICAgICAgICAgICAgICAgIGRwID0gdGhpcy5kO1xyXG4gICAgICAgICAgICAvLyBDaGFuZ2UgdmlldyBpZiBtaW4gdmlldyBkb2VzIG5vdCByZWFjaCB5ZXRcclxuICAgICAgICAgICAgaWYgKGRwLnZpZXcgIT0gdGhpcy5vcHRzLm1pblZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGRwLmRvd24obmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZWxlY3QgZGF0ZSBpZiBtaW4gdmlldyBpcyByZWFjaGVkXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBhbHJlYWR5U2VsZWN0ZWQgPSB0aGlzLmQuX2lzU2VsZWN0ZWQoc2VsZWN0ZWREYXRlLCB0aGlzLmQuY2VsbFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbHJlYWR5U2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRwLl90cmlnZ2VyKCdjbGlja0NlbGwnLCBzZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkcC5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMuYmluZChkcCwgYWxyZWFkeVNlbGVjdGVkLCBzZWxlY3RlZERhdGUpKCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkNsaWNrQ2VsbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRlbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRlcGlja2VyLS1jZWxsJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNsaWNrLmJpbmQodGhpcykoJGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cInByZXZcIj4je3ByZXZIdG1sfTwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCI+I3t0aXRsZX08L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cIm5leHRcIj4je25leHRIdG1sfTwvZGl2PicsXHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25zXCI+PC9kaXY+JyxcclxuICAgICAgICBidXR0b24gPSAnPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25cIiBkYXRhLWFjdGlvbj1cIiN7YWN0aW9ufVwiPiN7bGFiZWx9PC9zcGFuPicsXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5OYXZpZ2F0aW9uID0gZnVuY3Rpb24gKGQsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcblxyXG4gICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIgPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuTmF2aWdhdGlvbi5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmQuJG5hdi5vbignY2xpY2snLCAnLmRhdGVwaWNrZXItLW5hdi1hY3Rpb24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5kLiRuYXYub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1uYXYtdGl0bGUnLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZUaXRsZSwgdGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmQuJGRhdGVwaWNrZXIub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1idXR0b24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uc0lmTmVlZCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zSWZOZWVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudG9kYXlCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbigndG9kYXknKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xlYXJCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbignY2xlYXInKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLl9nZXRUaXRsZSh0aGlzLmQuY3VycmVudERhdGUpLFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9IGRwLnRlbXBsYXRlKHRlbXBsYXRlLCAkLmV4dGVuZCh7dGl0bGU6IHRpdGxlfSwgdGhpcy5vcHRzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kbmF2Lmh0bWwoaHRtbCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAneWVhcnMnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tbmF2LXRpdGxlJywgdGhpcy5kLiRuYXYpLmFkZENsYXNzKCctZGlzYWJsZWQtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXROYXZTdGF0dXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0VGl0bGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmQuZm9ybWF0RGF0ZSh0aGlzLm9wdHMubmF2VGl0bGVzW3RoaXMuZC52aWV3XSwgZGF0ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYWRkQnV0dG9uOiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJGJ1dHRvbnNDb250YWluZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRCdXR0b25zQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5kLmxvY1t0eXBlXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBkcC50ZW1wbGF0ZShidXR0b24sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCQoJ1tkYXRhLWFjdGlvbj0nICsgdHlwZSArICddJywgdGhpcy4kYnV0dG9uc0NvbnRhaW5lcikubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKGh0bWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kZGF0ZXBpY2tlci5hcHBlbmQoYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlKTtcclxuICAgICAgICAgICAgdGhpcy4kYnV0dG9uc0NvbnRhaW5lciA9ICQoJy5kYXRlcGlja2VyLS1idXR0b25zJywgdGhpcy5kLiRkYXRlcGlja2VyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXROYXZTdGF0dXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCEodGhpcy5vcHRzLm1pbkRhdGUgfHwgdGhpcy5vcHRzLm1heERhdGUpIHx8ICF0aGlzLm9wdHMuZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZC5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGUuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbS0xLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbSsxLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdignbmV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKHktMSwgbSwgZCksICd5ZWFyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSsxLCBtLCBkKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2FkZSA9IGRwLmdldERlY2FkZSh0aGlzLmQuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMF0gLSAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCdwcmV2JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMV0gKyAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGlzYWJsZU5hdjogZnVuY3Rpb24gKG5hdikge1xyXG4gICAgICAgICAgICAkKCdbZGF0YS1hY3Rpb249XCInICsgbmF2ICsgJ1wiXScsIHRoaXMuZC4kbmF2KS5hZGRDbGFzcygnLWRpc2FibGVkLScpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FjdGl2YXRlTmF2OiBmdW5jdGlvbiAobmF2KSB7XHJcbiAgICAgICAgICAgICQoJ1tkYXRhLWFjdGlvbj1cIicgKyBuYXYgKyAnXCJdJywgdGhpcy5kLiRuYXYpLnJlbW92ZUNsYXNzKCctZGlzYWJsZWQtJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25DbGlja05hdkJ1dHRvbjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRlbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLWFjdGlvbl0nKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICRlbC5kYXRhKCdhY3Rpb24nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZFthY3Rpb25dKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tOYXZUaXRsZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAnZGF5cycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmQudmlldyA9ICdtb250aHMnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZC52aWV3ID0gJ3llYXJzJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50XCI+JyArXHJcbiAgICAgICAgJyAgIDxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWhvdXJzXCI+I3tob3VyVmlzaWJsZX08L3NwYW4+JyArXHJcbiAgICAgICAgJyAgIDxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWNvbG9uXCI+Ojwvc3Bhbj4nICtcclxuICAgICAgICAnICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtbWludXRlc1wiPiN7bWluVmFsdWV9PC9zcGFuPicgK1xyXG4gICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtc2xpZGVyc1wiPicgK1xyXG4gICAgICAgICcgICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4nICtcclxuICAgICAgICAnICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJob3Vyc1wiIHZhbHVlPVwiI3tob3VyVmFsdWV9XCIgbWluPVwiI3tob3VyTWlufVwiIG1heD1cIiN7aG91ck1heH1cIiBzdGVwPVwiI3tob3VyU3RlcH1cIi8+JyArXHJcbiAgICAgICAgJyAgIDwvZGl2PicgK1xyXG4gICAgICAgICcgICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4nICtcclxuICAgICAgICAnICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJtaW51dGVzXCIgdmFsdWU9XCIje21pblZhbHVlfVwiIG1pbj1cIiN7bWluTWlufVwiIG1heD1cIiN7bWluTWF4fVwiIHN0ZXA9XCIje21pblN0ZXB9XCIvPicgK1xyXG4gICAgICAgICcgICA8L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5UaW1lcGlja2VyID0gZnVuY3Rpb24gKGluc3QsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBpbnN0O1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLlRpbWVwaWNrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gJ2lucHV0JztcclxuICAgICAgICAgICAgdGhpcy5fc2V0VGltZSh0aGlzLmQuZGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSFRNTCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL3RyaWRlbnQvZ2kpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9ICdjaGFuZ2UnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmQuJGVsLm9uKCdzZWxlY3REYXRlJywgdGhpcy5fb25TZWxlY3REYXRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oaW5wdXQsIHRoaXMuX29uQ2hhbmdlUmFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcy5vbignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcFJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oJ21vdXNlbW92ZSBmb2N1cyAnLCB0aGlzLl9vbk1vdXNlRW50ZXJSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzLm9uKCdtb3VzZW91dCBibHVyJywgdGhpcy5fb25Nb3VzZU91dFJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRUaW1lOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgX2RhdGUgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5ob3VycyA9IF9kYXRlLmhvdXJzIDwgdGhpcy5taW5Ib3VycyA/IHRoaXMubWluSG91cnMgOiBfZGF0ZS5ob3VycztcclxuICAgICAgICAgICAgdGhpcy5taW51dGVzID0gX2RhdGUubWludXRlcyA8IHRoaXMubWluTWludXRlcyA/IHRoaXMubWluTWludXRlcyA6IF9kYXRlLm1pbnV0ZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBtaW5Ib3VycyBhbmQgbWluTWludXRlcyBmcm9tIGRhdGUgKHVzdWFsbHkgaXQncyBhIG1pbkRhdGUpXHJcbiAgICAgICAgICogQWxzbyBjaGFuZ2VzIG1pbk1pbnV0ZXMgaWYgY3VycmVudCBob3VycyBhcmUgYmlnZ2VyIHRoZW4gQGRhdGUgaG91cnNcclxuICAgICAgICAgKiBAcGFyYW0gZGF0ZSB7RGF0ZX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRNaW5UaW1lRnJvbURhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWluSG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWluTWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYsIGZvciBleGFtcGxlLCBtaW4gaG91cnMgYXJlIDEwLCBhbmQgY3VycmVudCBob3VycyBhcmUgMTIsXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBtaW5NaW51dGVzIHRvIGRlZmF1bHQgdmFsdWUsIHRvIGJlIGFibGUgdG8gY2hvb3NlIHdob2xlIHJhbmdlIG9mIHZhbHVlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZS5nZXRIb3VycygpID4gZGF0ZS5nZXRIb3VycygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5NaW51dGVzID0gdGhpcy5vcHRzLm1pbk1pbnV0ZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0TWF4VGltZUZyb21EYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1heEhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1heE1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlLmdldEhvdXJzKCkgPCBkYXRlLmdldEhvdXJzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heE1pbnV0ZXMgPSB0aGlzLm9wdHMubWF4TWludXRlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXREZWZhdWx0TWluTWF4VGltZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4SG91cnMgPSAyMyxcclxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXMgPSA1OSxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSB0aGlzLm9wdHM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1pbkhvdXJzID0gb3B0cy5taW5Ib3VycyA8IDAgfHwgb3B0cy5taW5Ib3VycyA+IG1heEhvdXJzID8gMCA6IG9wdHMubWluSG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMubWluTWludXRlcyA9IG9wdHMubWluTWludXRlcyA8IDAgfHwgb3B0cy5taW5NaW51dGVzID4gbWF4TWludXRlcyA/IDAgOiBvcHRzLm1pbk1pbnV0ZXM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4SG91cnMgPSBvcHRzLm1heEhvdXJzIDwgMCB8fCBvcHRzLm1heEhvdXJzID4gbWF4SG91cnMgPyBtYXhIb3VycyA6IG9wdHMubWF4SG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4TWludXRlcyA9IG9wdHMubWF4TWludXRlcyA8IDAgfHwgb3B0cy5tYXhNaW51dGVzID4gbWF4TWludXRlcyA/IG1heE1pbnV0ZXMgOiBvcHRzLm1heE1pbnV0ZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTG9va3MgZm9yIG1pbi9tYXggaG91cnMvbWludXRlcyBhbmQgaWYgY3VycmVudCB2YWx1ZXNcclxuICAgICAgICAgKiBhcmUgb3V0IG9mIHJhbmdlIHNldHMgdmFsaWQgdmFsdWVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3ZhbGlkYXRlSG91cnNNaW51dGVzOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ob3VycyA8IHRoaXMubWluSG91cnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMgPSB0aGlzLm1pbkhvdXJzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaG91cnMgPiB0aGlzLm1heEhvdXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzID0gdGhpcy5tYXhIb3VycztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWludXRlcyA8IHRoaXMubWluTWludXRlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzID0gdGhpcy5taW5NaW51dGVzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWludXRlcyA+IHRoaXMubWF4TWludXRlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzID0gdGhpcy5tYXhNaW51dGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2J1aWxkSFRNTDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbHogPSBkcC5nZXRMZWFkaW5nWmVyb051bSxcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG91ck1pbjogdGhpcy5taW5Ib3VycyxcclxuICAgICAgICAgICAgICAgICAgICBob3VyTWF4OiBseih0aGlzLm1heEhvdXJzKSxcclxuICAgICAgICAgICAgICAgICAgICBob3VyU3RlcDogdGhpcy5vcHRzLmhvdXJzU3RlcCxcclxuICAgICAgICAgICAgICAgICAgICBob3VyVmFsdWU6IHRoaXMuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaG91clZpc2libGU6IGx6KHRoaXMuZGlzcGxheUhvdXJzKSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5NaW46IHRoaXMubWluTWludXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBtaW5NYXg6IGx6KHRoaXMubWF4TWludXRlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3RlcDogdGhpcy5vcHRzLm1pbnV0ZXNTdGVwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiBseih0aGlzLm1pbnV0ZXMpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgX3RlbXBsYXRlID0gZHAudGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kdGltZXBpY2tlciA9ICQoX3RlbXBsYXRlKS5hcHBlbmRUbyh0aGlzLmQuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMgPSAkKCdbdHlwZT1cInJhbmdlXCJdJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzID0gJCgnW25hbWU9XCJob3Vyc1wiXScsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzID0gJCgnW25hbWU9XCJtaW51dGVzXCJdJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzVGV4dCA9ICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnMnLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kbWludXRlc1RleHQgPSAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LW1pbnV0ZXMnLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQuYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYW1wbSA9ICQoJzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWFtcG1cIj4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50JywgdGhpcy4kdGltZXBpY2tlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwodGhpcy5kYXlQZXJpb2QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJHRpbWVwaWNrZXIuYWRkQ2xhc3MoJy1hbS1wbS0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF91cGRhdGVDdXJyZW50VGltZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaCA9ICBkcC5nZXRMZWFkaW5nWmVyb051bSh0aGlzLmRpc3BsYXlIb3VycyksXHJcbiAgICAgICAgICAgICAgICBtID0gZHAuZ2V0TGVhZGluZ1plcm9OdW0odGhpcy5taW51dGVzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzVGV4dC5odG1sKGgpO1xyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzVGV4dC5odG1sKG0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5hbXBtKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRhbXBtLmh0bWwodGhpcy5kYXlQZXJpb2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VwZGF0ZVJhbmdlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRob3Vycy5hdHRyKHtcclxuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5Ib3VycyxcclxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhIb3Vyc1xyXG4gICAgICAgICAgICB9KS52YWwodGhpcy5ob3Vycyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgbWluOiB0aGlzLm1pbk1pbnV0ZXMsXHJcbiAgICAgICAgICAgICAgICBtYXg6IHRoaXMubWF4TWludXRlc1xyXG4gICAgICAgICAgICB9KS52YWwodGhpcy5taW51dGVzKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgbWluSG91cnMsIG1pbk1pbnV0ZXMgZXRjLiBmcm9tIGRhdGUuIElmIGRhdGUgaXMgbm90IHBhc3NlZCwgdGhhbiBzZXRzXHJcbiAgICAgICAgICogdmFsdWVzIGZyb20gb3B0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSBbZGF0ZV0ge29iamVjdH0gLSBEYXRlIG9iamVjdCwgdG8gZ2V0IHZhbHVlcyBmcm9tXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaGFuZGxlRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0RGVmYXVsdE1pbk1heFRpbWUoKTtcclxuICAgICAgICAgICAgaWYgKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkcC5pc1NhbWUoZGF0ZSwgdGhpcy5kLm9wdHMubWluRGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRNaW5UaW1lRnJvbURhdGUodGhpcy5kLm9wdHMubWluRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRwLmlzU2FtZShkYXRlLCB0aGlzLmQub3B0cy5tYXhEYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldE1heFRpbWVGcm9tRGF0ZSh0aGlzLmQub3B0cy5tYXhEYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGVIb3Vyc01pbnV0ZXMoZGF0ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJhbmdlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdmFsaWQgaG91ciB2YWx1ZSB0byBkaXNwbGF5IGluIHRleHQgaW5wdXQgYW5kIGRhdGVwaWNrZXIncyBib2R5LlxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRlIHtEYXRlfE51bWJlcn0gLSBkYXRlIG9yIGhvdXJzXHJcbiAgICAgICAgICogQHBhcmFtIFthbXBtXSB7Qm9vbGVhbn0gLSAxMiBob3VycyBtb2RlXHJcbiAgICAgICAgICogQHJldHVybnMge3tob3VyczogKiwgZGF5UGVyaW9kOiBzdHJpbmd9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2dldFZhbGlkSG91cnNGcm9tRGF0ZTogZnVuY3Rpb24gKGRhdGUsIGFtcG0pIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBkYXRlLFxyXG4gICAgICAgICAgICAgICAgaG91cnMgPSBkYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBkID0gZHAuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gZC5ob3VycztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIF9hbXBtID0gYW1wbSB8fCB0aGlzLmQuYW1wbSxcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdhbSc7XHJcblxyXG4gICAgICAgICAgICBpZiAoX2FtcG0pIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBob3VycyA9PSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VycyA9IDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGhvdXJzID09IDEyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSAncG0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGhvdXJzID4gMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gaG91cnMgLSAxMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gJ3BtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBob3VyczogaG91cnMsXHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2Q6IGRheVBlcmlvZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IGhvdXJzICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5faG91cnMgPSB2YWw7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGlzcGxheUhvdXJzID0gdGhpcy5fZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlKHZhbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlIb3VycyA9IGRpc3BsYXlIb3Vycy5ob3VycztcclxuICAgICAgICAgICAgdGhpcy5kYXlQZXJpb2QgPSBkaXNwbGF5SG91cnMuZGF5UGVyaW9kO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBob3VycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hvdXJzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vICBFdmVudHNcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIF9vbkNoYW5nZVJhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpLFxyXG4gICAgICAgICAgICAgICAgbmFtZSA9ICR0YXJnZXQuYXR0cignbmFtZScpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzW25hbWVdID0gJHRhcmdldC52YWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5kLl90cmlnZ2VyKCd0aW1lQ2hhbmdlJywgW3RoaXMuaG91cnMsIHRoaXMubWludXRlc10pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0ZSh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25TZWxlY3REYXRlOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEYXRlKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlRW50ZXJSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGUudGFyZ2V0KS5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtJyArIG5hbWUsIHRoaXMuJHRpbWVwaWNrZXIpLmFkZENsYXNzKCctZm9jdXMtJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VPdXRSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGUudGFyZ2V0KS5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQuaW5Gb2N1cykgcmV0dXJuOyAvLyBQcmV2ZW50IHJlbW92aW5nIGZvY3VzIHdoZW4gbW91c2Ugb3V0IG9mIHJhbmdlIHNsaWRlclxyXG4gICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LScgKyBuYW1lLCB0aGlzLiR0aW1lcGlja2VyKS5yZW1vdmVDbGFzcygnLWZvY3VzLScpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7XHJcbiIsImltcG9ydCB7ZGF0ZVBpY2tlckNvbmZpZ30gZnJvbSAnLi4vLi4vLi4vc2NyaXB0cy9kYXRlcGlja2VyLmpzJztcblxuY29uc3QgY29uZmlnID0gZGF0ZVBpY2tlckNvbmZpZztcbmNvbmZpZy5kYXRlRm9ybWF0ID0gJ3l5eXktbW0tZGQnO1xuXG5cbiQoJy5zZWFyY2gtZm9ybV9fY29udHJvbCcpLmRhdGVwaWNrZXIoY29uZmlnKTtcblxuLy8gQXJyb3dcblxuJCgnLnNlYXJjaC1mb3JtX19pbnB1dC1hcnJvdycpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gIGlmICghJCh0aGlzKS5oYXNDbGFzcygnc2VhcmNoLWZvcm1fX2Fycm93LS1hY3RpdmUnKSkge1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ3NlYXJjaC1mb3JtX19hcnJvdy0tYWN0aXZlJyk7XG4gICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCQoJy5zZWFyY2gtZm9ybV9fY29udHJvbCcpKS5mb2N1cygpO1xuICB9IGVsc2Uge1xuICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3NlYXJjaC1mb3JtX19hcnJvdy0tYWN0aXZlJyk7XG4gIH1cbn0pO1xuXG4vLyBUT0RPOiBvbiBmb3JtIHN1Ym1pdCB2YWxpZGF0aW9uIC0gY2hlY2sgaWYgYXJyaXZhbCBkYXRlIGxlc3MgdGhhbiBkZXAuXG4vLyAkKCcuc2VhcmNoLWZvcm0nKS5vbiggXCJzdWJtaXRcIiwgaGFuZGxlcik7XG4iLCJpbXBvcnQge2dldERlZmF1bHRPcHRpb25zLCB1cGRhdGVPcHRpb25zLCBzd2l0Y2hBbW91bnR9IGZyb20gJy4uLy4uLy4uL3NjcmlwdHMvZHJvcGRvd24uanMnO1xuXG5jb25zdCBndWVzdHNJRHMgPSBbJ9CS0LfRgNC+0YHQu9GL0LUnLCAn0JTQtdGC0LgnLCAn0JzQu9Cw0LTQtdC90YbRiyddO1xuY29uc3QgZ3Vlc3RzRGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucyhndWVzdHNJRHMpO1xuXG4kKFwiI0d1ZXN0c1wiKS5maW5kKFwiLmNhbGVuZGFyX19idG4tLXN1Ym1pdFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAkKFwiI0d1ZXN0c1wiKS5jbG9zZXN0KCcuc2VsZWN0X19kcm9wZG93bicpLmFkZENsYXNzKCdtb2RhbC1jbG9zZScpO1xuICAgJChcIi5zZWFyY2gtZm9ybV9fc2VsZWN0LWFycm93XCIpLnRvZ2dsZUNsYXNzKCdzZWFyY2gtZm9ybV9fYXJyb3ctLWFjdGl2ZScpO1xufSk7XG5cbiQoXCIuR3Vlc3RzXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciAkYnV0dG9uID0gJCh0aGlzKTtcbiAgdmFyIGlucHV0ID0gJGJ1dHRvbi5wYXJlbnQoKS5maW5kKFwiaW5wdXRcIik7XG5cbiAgdmFyIG5ld1ZhbCA9IHN3aXRjaEFtb3VudCgkYnV0dG9uLCBpbnB1dCk7XG5cbiAgdmFyIHRhcmdldElucHV0ID0gJCgnLnNlYXJjaC1mb3JtX19wc2V1ZG8tc2VsZWN0Jyk7XG4gIHZhciBpbnB1dElEID0gaW5wdXQuYXR0cihcImlkXCIpO1xuICB1cGRhdGVPcHRpb25zKGd1ZXN0c0RlZmF1bHRPcHRpb25zLCBpbnB1dElELCBuZXdWYWwpO1xuXG4gIGxldCBndWVzdHNDb3VudCA9IE51bWJlcihndWVzdHNEZWZhdWx0T3B0aW9ucy5maXJzdC5hbW91bnQpICArIE51bWJlcihndWVzdHNEZWZhdWx0T3B0aW9ucy5zZWNvbmQuYW1vdW50KTtcbiAgdGFyZ2V0SW5wdXQudmFsKGd1ZXN0c0NvdW50ICsgJyAnICsgJ9Cz0L7RgdGC0LXQuScgICsgJywgJyArIGd1ZXN0c0RlZmF1bHRPcHRpb25zLnRoaXJkLmFtb3VudCArICcgJyArIGd1ZXN0c0RlZmF1bHRPcHRpb25zLnRoaXJkLmlkKTtcbn0pO1xuXG5jb25zdCBvbkVudGVyQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGV2dCkge1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgaWYoZXZ0LmtleSA9PT0gJ0VudGVyJykge1xuICAgICQoJzpmb2N1cycpLnBhcmVudCgpLmZpbmQoJCgnLnNlbGVjdF9fZHJvcGRvd24nKSkudG9nZ2xlQ2xhc3MoJ21vZGFsLWNsb3NlJyk7XG4gICAgJChcIi5zZWFyY2gtZm9ybV9fc2VsZWN0LWFycm93XCIpLnRvZ2dsZUNsYXNzKCdzZWFyY2gtZm9ybV9fYXJyb3ctLWFjdGl2ZScpO1xuICB9XG59O1xuXG4vLyBBcnJvdyBvbiBjbGlja1xuXG4kKFwiLnNlYXJjaC1mb3JtX19zZWxlY3QtYXJyb3dcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgJCh0aGlzKS50b2dnbGVDbGFzcygnc2VhcmNoLWZvcm1fX2Fycm93LS1hY3RpdmUnKTtcbiAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCQoJy5zZWxlY3RfX2Ryb3Bkb3duJykpLnRvZ2dsZUNsYXNzKCdtb2RhbC1jbG9zZScpO1xufSk7XG5cbiQoJy5zZWFyY2gtZm9ybV9fcHNldWRvLXNlbGVjdCcpLmZvY3VzKGZ1bmN0aW9uKGV2dCkge1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgJCh0aGlzKS5yZW1vdmVBdHRyKCdwbGFjZWhvbGRlcicpO1xuICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlckNsaWNrSGFuZGxlcik7XG59KS5ibHVyKGZ1bmN0aW9uKGV2dCkge1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgJCh0aGlzKS5hdHRyKCdwbGFjZWhvbGRlcicsICfQodC60L7Qu9GM0LrQviDQs9C+0YHRgtC10LknKTtcbiAgLy8gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJDbGlja0hhbmRsZXIpO1xufSk7XG5cbi8vIEJVRyEgLSDRhNC+0LrRg9GBINC30LDQu9C40L/QsNC10YIg0L3QsCDQuNC90L/Rg9GC0LUg0L/RgNC4INC00L7QsdCw0LLQu9C10L3QuNC4IG9uRW50ZXJDbGlja0hhbmRsZXJcbiIsIi8vIFJvb20gcGhvdG9zIHNsaWRlclxuXG5mdW5jdGlvbiAkKGVsZW0pIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtKTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICByZXR1cm4gZWwuY2xhc3NMaXN0ID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgOiBuZXcgUmVnRXhwKCcoXnwgKScgKyBjbGFzc05hbWUgKyAnKCB8JCknLCAnZ2knKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2Uge1xuICAgZWwuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgY2xhc3NOYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyhcXFxcYnwkKScsICdnaScpLCAnICcpO1xuICB9XG59XG5cbmZ1bmN0aW9uICRleHRlbmRPYmooX2RlZiwgYWRkb25zKSB7XG4gICAgaWYgKHR5cGVvZiBhZGRvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIF9kZWYpIHtcbiAgICAgICAgaWYgKGFkZG9uc1twcm9wXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfZGVmW3Byb3BdID0gYWRkb25zW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxufVxuXG5cbnZhciBzbGlkZXJfcGx1Z2luID0gKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBmaWZpX3NsaWRlciA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgIHZhciBfID0gdGhpcztcblxuICAgIC8vIGFsd2F5cyBsb29wXG4gICAgXy5kZWYgPSB7XG4gICAgICB0YXJnZXQ6ICQoJy5zbGlkZXInKSxcbiAgICAgIGRvdHNXcmFwcGVyOiAkKCcuZG90cy13cmFwcGVyJyksXG4gICAgICBhcnJvd0xlZnQ6ICQoJy5hcnJvdy1sZWZ0JyksXG4gICAgICBhcnJvd1JpZ2h0OiAkKCcuYXJyb3ctcmlnaHQnKSxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgc3BlZWQ6IDMwMCxcbiAgICAgICAgZWFzaW5nOiAnJ1xuICAgICAgfSxcbiAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgYXV0b0hlaWdodDogZmFsc2UsXG4gICAgICBhZnRlckNoYW5nZVNsaWRlOiBmdW5jdGlvbiBhZnRlckNoYW5nZVNsaWRlKCkge31cbiAgICB9XG5cbiAgICAkZXh0ZW5kT2JqKF8uZGVmLCBzZXR0aW5ncyk7XG5cbiAgICBfLmluaXQoKTtcbiAgfVxuXG4gIGZpZmlfc2xpZGVyLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLnRvdGFsU2xpZGVzOyBpKyspIHtcbiAgICAgIHZhciBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgZG90LnNldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZScsIGkgKyAxKTtcbiAgICAgIF8uZGVmLmRvdHNXcmFwcGVyLmFwcGVuZENoaWxkKGRvdCk7XG4gICAgfVxuXG4gICAgXy5kZWYuZG90c1dyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0Lm5vZGVOYW1lID09IFwiTElcIikge1xuICAgICAgICBfLmN1clNsaWRlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlJyk7XG4gICAgICAgIF8uZ290b1NsaWRlKCk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuICB9XG5cblxuICBmaWZpX3NsaWRlci5wcm90b3R5cGUuZ2V0Q3VyTGVmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgXyA9IHRoaXM7XG4gICAgXy5jdXJMZWZ0ID0gcGFyc2VJbnQoXy5zbGlkZXJJbm5lci5zdHlsZS5sZWZ0LnNwbGl0KCdweCcpWzBdKTtcbiAgfVxuXG5cbiAgZmlmaV9zbGlkZXIucHJvdG90eXBlLmdvdG9TbGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICBfLnNsaWRlcklubmVyLnN0eWxlLnRyYW5zaXRpb24gPSAnbGVmdCAnICsgXy5kZWYudHJhbnNpdGlvbi5zcGVlZCAvIDEwMDAgKyAncyAnICsgXy5kZWYudHJhbnNpdGlvbi5lYXNpbmc7XG4gICAgXy5zbGlkZXJJbm5lci5zdHlsZS5sZWZ0ID0gLV8uY3VyU2xpZGUgKiBfLnNsaWRlVyArICdweCc7XG4gICAgYWRkQ2xhc3MoXy5kZWYudGFyZ2V0LCAnaXNBbmltYXRpbmcnKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF8uc2xpZGVySW5uZXIuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgcmVtb3ZlQ2xhc3MoXy5kZWYudGFyZ2V0LCAnaXNBbmltYXRpbmcnKTtcbiAgICB9LCBfLmRlZi50cmFuc2l0aW9uLnNwZWVkKTtcbiAgICBfLnNldERvdCgpO1xuICAgIGlmIChfLmRlZi5hdXRvSGVpZ2h0KSB7XG4gICAgICBfLmRlZi50YXJnZXQuc3R5bGUuaGVpZ2h0ID0gXy5hbGxTbGlkZXNbXy5jdXJTbGlkZV0ub2Zmc2V0SGVpZ2h0ICsgXCJweFwiO1xuICAgIH1cbiAgICBfLmRlZi5hZnRlckNoYW5nZVNsaWRlKF8pO1xuICB9XG5cblxuICBmaWZpX3NsaWRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgZnVuY3Rpb24gbG9hZGVkSW1nKGVsKSB7XG4gICAgICAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuXG4gICAgICAgZnVuY3Rpb24gbG9hZEhhbmRsZXIoKSB7XG4gICAgICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgICAgIHJldHVybjtcbiAgICAgICAgIH1cbiAgICAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgICAgICBfLmxvYWRlZENudCsrO1xuICAgICAgICAgaWYgKF8ubG9hZGVkQ250ID49IF8udG90YWxTbGlkZXMgKyAyKSB7XG4gICAgICAgICAgIF8udXBkYXRlU2xpZGVyRGltZW5zaW9uKCk7XG4gICAgICAgICB9XG4gICAgICAgfVxuXG4gICAgICAgdmFyIGltZyA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xuICAgICAgIGlmIChpbWcpIHtcbiAgICAgICAgIGltZy5vbmxvYWQgPSBsb2FkSGFuZGxlcjtcbiAgICAgICAgIGltZy5zcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xuICAgICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgaWYgKGltZy5jb21wbGV0ZSkge1xuICAgICAgICAgICBsb2FkSGFuZGxlcigpO1xuICAgICAgICAgfVxuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICBfLnVwZGF0ZVNsaWRlckRpbWVuc2lvbigpO1xuICAgICAgIH1cbiAgICAgfVxuXG5cbiAgICBfLmFsbFNsaWRlcyA9IDA7XG4gICAgXy5jdXJTbGlkZSA9IDA7XG4gICAgXy5jdXJMZWZ0ID0gMDtcbiAgICBfLnRvdGFsU2xpZGVzID0gXy5kZWYudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZScpLmxlbmd0aDtcblxuICAgIF8uc2xpZGVySW5uZXIgPSBfLmRlZi50YXJnZXQucXVlcnlTZWxlY3RvcignLnJvb20tY2FyZF9fc2xpZGVyLWNvbnRhaW5lcicpO1xuICAgIF8ubG9hZGVkQ250ID0gMDtcblxuICAgIC8vIGFwcGVuZCBjbG9uZXNcbiAgICB2YXIgY2xvbmVGaXJzdCA9IF8uZGVmLnRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGUnKVswXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgXy5zbGlkZXJJbm5lci5hcHBlbmRDaGlsZChjbG9uZUZpcnN0KTtcbiAgICB2YXIgY2xvbmVMYXN0ID0gXy5kZWYudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZScpW18udG90YWxTbGlkZXMgLSAxXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgXy5zbGlkZXJJbm5lci5pbnNlcnRCZWZvcmUoY2xvbmVMYXN0LCBfLnNsaWRlcklubmVyLmZpcnN0Q2hpbGQpO1xuXG4gICAgXy5jdXJTbGlkZSsrO1xuICAgIF8uYWxsU2xpZGVzID0gXy5kZWYudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZScpO1xuXG4gICAgLy8gXy5kZWYudGFyZ2V0LnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG4gICAgXy5zbGlkZXJJbm5lci5zdHlsZS53aWR0aCA9IChfLnRvdGFsU2xpZGVzICsgMikgKiAxMDAgKyBcIiVcIjtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgXy50b3RhbFNsaWRlcyArIDI7IF9pKyspIHtcbiAgICAgIF8uYWxsU2xpZGVzW19pXS5zdHlsZS53aWR0aCA9IDEwMCAvIChfLnRvdGFsU2xpZGVzICsgMikgKyBcIiVcIjtcbiAgICAgIGxvYWRlZEltZyhfLmFsbFNsaWRlc1tfaV0pO1xuICAgIH1cblxuICAgIF8uYnVpbGREb3RzKCk7XG4gICAgXy5zZXREb3QoKTtcbiAgICBfLmluaXRBcnJvd3MoKTtcblxuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyTXVsdGkoZWwsIHMsIGZuKSB7XG4gICAgICBzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZWwuYWRkRXZlbnRMaXN0ZW5lcihlLCBmbiwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJNdWx0aShlbCwgcywgZm4pIHtcbiAgICAgIHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGZuLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoXy5kZWYuc3dpcGUpIHtcbiAgICAgIGFkZExpc3RlbmVyTXVsdGkoXy5zbGlkZXJJbm5lciwgJ21vdXNlZG93biB0b3VjaHN0YXJ0Jywgc3RhcnRTd2lwZSk7XG4gICAgfVxuXG4gICAgXy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gc3RhcnRTd2lwZShlKSB7XG4gICAgICB2YXIgdG91Y2ggPSBlO1xuICAgICAgXy5nZXRDdXJMZWZ0KCk7XG4gICAgICBpZiAoIV8uaXNBbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgICB0b3VjaCA9IGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIF8uc3RhcnRYID0gdG91Y2gucGFnZVg7XG4gICAgICAgIF8uc3RhcnRZID0gdG91Y2gucGFnZVk7XG4gICAgICAgIGFkZExpc3RlbmVyTXVsdGkoXy5zbGlkZXJJbm5lciwgJ21vdXNlbW92ZSB0b3VjaG1vdmUnLCBzd2lwZU1vdmUpO1xuICAgICAgICBhZGRMaXN0ZW5lck11bHRpKCQoJ2JvZHknKSwgJ21vdXNldXAgdG91Y2hlbmQnLCBzd2lwZUVuZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpcGVNb3ZlKGUpIHtcbiAgICAgIHZhciB0b3VjaCA9IGU7XG4gICAgICBpZiAoZS50eXBlID09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIHRvdWNoID0gZS50YXJnZXRUb3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICB9XG4gICAgICBfLm1vdmVYID0gdG91Y2gucGFnZVg7XG4gICAgICBfLm1vdmVZID0gdG91Y2gucGFnZVk7XG5cbiAgICAvLyBmb3Igc2Nyb2xsaW5nIHVwIGFuZCBkb3duXG4gICAgaWYgKE1hdGguYWJzKF8ubW92ZVggLSBfLnN0YXJ0WCkgPCA0MCkgcmV0dXJuO1xuXG4gICAgXy5pc0FuaW1hdGluZyA9IHRydWU7XG4gICAgYWRkQ2xhc3MoXy5kZWYudGFyZ2V0LCAnaXNBbmltYXRpbmcnKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoXy5jdXJMZWZ0ICsgXy5tb3ZlWCAtIF8uc3RhcnRYID4gMCAmJiBfLmN1ckxlZnQgPT0gMCkge1xuICAgICAgXy5jdXJMZWZ0ID0gLV8udG90YWxTbGlkZXMgKiBfLnNsaWRlVztcbiAgICB9IGVsc2UgaWYgKF8uY3VyTGVmdCArIF8ubW92ZVggLSBfLnN0YXJ0WCA8IC0oXy50b3RhbFNsaWRlcyArIDEpICogXy5zbGlkZVcpIHtcbiAgICAgIF8uY3VyTGVmdCA9IC1fLnNsaWRlVztcbiAgICB9XG4gICAgICBfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQgPSBfLmN1ckxlZnQgKyBfLm1vdmVYIC0gXy5zdGFydFggKyBcInB4XCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpcGVFbmQoZSkge1xuICAgICAgdmFyIHRvdWNoID0gZTtcbiAgICAgIF8uZ2V0Q3VyTGVmdCgpO1xuXG4gICAgaWYgKE1hdGguYWJzKF8ubW92ZVggLSBfLnN0YXJ0WCkgPT09IDApIHJldHVybjtcblxuICAgIF8uc3RheUF0Q3VyID0gTWF0aC5hYnMoXy5tb3ZlWCAtIF8uc3RhcnRYKSA8IDQwIHx8IHR5cGVvZiBfLm1vdmVYID09PSBcInVuZGVmaW5lZFwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgIF8uZGlyID0gXy5zdGFydFggPCBfLm1vdmVYID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAgIGlmIChfLnN0YXlBdEN1cikge30gZWxzZSB7XG4gICAgICBfLmRpciA9PSAnbGVmdCcgPyBfLmN1clNsaWRlLS0gOiBfLmN1clNsaWRlKys7XG4gICAgICBpZiAoXy5jdXJTbGlkZSA8IDApIHtcbiAgICAgICAgXy5jdXJTbGlkZSA9IF8udG90YWxTbGlkZXM7XG4gICAgICB9IGVsc2UgaWYgKF8uY3VyU2xpZGUgPT0gXy50b3RhbFNsaWRlcyArIDIpIHtcbiAgICAgICAgXy5jdXJTbGlkZSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgXy5nb3RvU2xpZGUoKTtcblxuICAgIGRlbGV0ZSBfLnN0YXJ0WDtcbiAgICBkZWxldGUgXy5zdGFydFk7XG4gICAgZGVsZXRlIF8ubW92ZVg7XG4gICAgZGVsZXRlIF8ubW92ZVk7XG5cbiAgICBfLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgcmVtb3ZlQ2xhc3MoXy5kZWYudGFyZ2V0LCAnaXNBbmltYXRpbmcnKTtcbiAgICByZW1vdmVMaXN0ZW5lck11bHRpKF8uc2xpZGVySW5uZXIsICdtb3VzZW1vdmUgdG91Y2htb3ZlJywgc3dpcGVNb3ZlKTtcbiAgICByZW1vdmVMaXN0ZW5lck11bHRpKCQoJ2JvZHknKSwgJ21vdXNldXAgdG91Y2hlbmQnLCBzd2lwZUVuZCk7XG4gICAgfVxuICB9XG5cbiAgZmlmaV9zbGlkZXIucHJvdG90eXBlLmluaXRBcnJvd3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgaWYgKF8uZGVmLmFycm93TGVmdCAhPSAnJykge1xuICAgICAgXy5kZWYuYXJyb3dMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWhhc0NsYXNzKF8uZGVmLnRhcmdldCwgJ2lzQW5pbWF0aW5nJykpIHtcbiAgICAgICAgICBpZiAoXy5jdXJTbGlkZSA9PSAxKSB7XG4gICAgICAgICAgICBfLmN1clNsaWRlID0gXy50b3RhbFNsaWRlcyArIDE7XG4gICAgICAgICAgICBfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQgPSAtXy5jdXJTbGlkZSAqIF8uc2xpZGVXICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgICAgXy5jdXJTbGlkZS0tO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXy5nb3RvU2xpZGUoKTtcbiAgICAgICAgICB9LCAyMCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoXy5kZWYuYXJyb3dSaWdodCAhPSAnJykge1xuICAgICAgXy5kZWYuYXJyb3dSaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFoYXNDbGFzcyhfLmRlZi50YXJnZXQsICdpc0FuaW1hdGluZycpKSB7XG4gICAgICAgICAgaWYgKF8uY3VyU2xpZGUgPT0gXy50b3RhbFNsaWRlcykge1xuICAgICAgICAgICAgXy5jdXJTbGlkZSA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQgPSAtXy5jdXJTbGlkZSAqIF8uc2xpZGVXICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgICAgXy5jdXJTbGlkZSsrO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXy5nb3RvU2xpZGUoKTtcbiAgICAgICAgICB9LCAyMCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmaWZpX3NsaWRlci5wcm90b3R5cGUuc2V0RG90ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfID0gdGhpcztcbiAgICB2YXIgdGFyZG90ID0gXy5jdXJTbGlkZSAtIDE7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IF8udG90YWxTbGlkZXM7IGorKykge1xuICAgICAgcmVtb3ZlQ2xhc3MoXy5kZWYuZG90c1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnbGknKVtqXSwgJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmIChfLmN1clNsaWRlIC0gMSA8IDApIHtcbiAgICAgIHRhcmRvdCA9IF8udG90YWxTbGlkZXMgLSAxO1xuICAgIH0gZWxzZSBpZiAoXy5jdXJTbGlkZSAtIDEgPiBfLnRvdGFsU2xpZGVzIC0gMSkge1xuICAgICAgdGFyZG90ID0gMDtcbiAgICB9XG4gICAgYWRkQ2xhc3MoXy5kZWYuZG90c1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnbGknKVt0YXJkb3RdLCAnYWN0aXZlJyk7XG4gIH1cblxuXG4gICBmaWZpX3NsaWRlci5wcm90b3R5cGUudXBkYXRlU2xpZGVyRGltZW5zaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgXy5zbGlkZVcgPSAyNzA7ICAvL18uc2xpZGVySW5uZXIub2Zmc2V0SGVpZ2h0IC8gXy50b3RhbFNsaWRlc1xuICAgICBfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQgPSAtXy5zbGlkZVcgKiBfLmN1clNsaWRlICsgXCJweFwiO1xuXG4gICAgIGlmIChfLmRlZi5hdXRvSGVpZ2h0KSB7XG4gICAgICAgXy5kZWYudGFyZ2V0LnN0eWxlLmhlaWdodCA9IF8uYWxsU2xpZGVzW18uY3VyU2xpZGVdLm9mZnNldEhlaWdodCArIFwicHhcIjtcbiAgICAgfSBlbHNlIHtcbiAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8udG90YWxTbGlkZXMgKyAyOyBpKyspIHtcbiAgICAgICAgIGlmIChfLmFsbFNsaWRlc1tpXS5vZmZzZXRIZWlnaHQgPiBfLmRlZi50YXJnZXQub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgIF8uZGVmLnRhcmdldC5zdHlsZS5oZWlnaHQgPSBfLmFsbFNsaWRlc1tpXS5vZmZzZXRIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICB9XG4gICAgICAgfVxuICAgICB9XG4gICAgIF8uZGVmLmFmdGVyQ2hhbmdlU2xpZGUoXyk7XG4gICB9XG5cbiAgcmV0dXJuIGZpZmlfc2xpZGVyO1xufSkoKTtcblxudmFyIHNsaWRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucm9vbS1jYXJkX19zbGlkZXInKTtcbnNsaWRlcnMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIG5ldyBzbGlkZXJfcGx1Z2luKHtcbiAgICAgICAgdGFyZ2V0OiBpdGVtLFxuICAgICAgICBkb3RzV3JhcHBlcjogaXRlbS5xdWVyeVNlbGVjdG9yKCcuZG90cy13cmFwcGVyJyksXG4gICAgICAgIGFycm93TGVmdDogaXRlbS5xdWVyeVNlbGVjdG9yKCcuYXJyb3ctbGVmdCcpLFxuICAgICAgICBhcnJvd1JpZ2h0OiBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdy1yaWdodCcpXG4gICAgfSk7XG59KVxuIiwiaW1wb3J0IHtkYXRlUGlja2VyQ29uZmlnfSBmcm9tICcuLi8uLi8uLi9zY3JpcHRzL2RhdGVwaWNrZXIuanMnO1xuXG5cbiQoJyNiaXJ0aGRheScpLmRhdGVwaWNrZXIoZGF0ZVBpY2tlckNvbmZpZyk7XG5cbi8vIEFycm93XG5cbiQoJy5yZWdpc3Rlcl9pbnB1dC1hcnJvdycpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gIGlmICghJCh0aGlzKS5oYXNDbGFzcygncmVnaXN0ZXJfaW5wdXQtYXJyb3ctLWFjdGl2ZScpKSB7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygncmVnaXN0ZXJfaW5wdXQtYXJyb3ctLWFjdGl2ZScpO1xuICAgICQodGhpcykucGFyZW50KCkuZmluZCgkKCcucmVnaXN0ZXJfX2Zvcm0tY29udHJvbCcpKS5mb2N1cygpO1xuICB9IGVsc2Uge1xuICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3JlZ2lzdGVyX2lucHV0LWFycm93LS1hY3RpdmUnKTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgJy4uLy4uL2Jsb2Nrcy9zZWFyY2gtZm9ybS9zZWFyY2gtZGF0ZXBpY2tlci5qcyc7XG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9zZWFyY2gtZm9ybS9zZWFyY2gtZHJvcGRvd24uanMnO1xuaW1wb3J0ICcuLi8uLi9ibG9ja3Mvcm9vbS1jYXJkLXRlbXBsYXRlL3Jvb20tcGhvdG8tc2xpZGVyLmpzJztcbmltcG9ydCAnLi4vLi4vYmxvY2tzL3JlZ2lzdGVyL3JlZ2lzdGVyLWRhdGVwaWNrZXIuanMnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==