!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=17)}([function(t,e,i){"use strict";i.d(e,"c",(function(){return s})),i.d(e,"a",(function(){return a})),i.d(e,"d",(function(){return n})),i.d(e,"b",(function(){return r}));const s=(t,e)=>{t.classList.toggle(e)};document.querySelectorAll(".select__dropdown-input").forEach(t=>{t.addEventListener("input",(function(e){!function(t){t.validity.typeMismatch?(t.setCustomValidity("Please, enter an integer"),t.reportValidity()):t.rangeUnderflow?(t.setCustomValidity("We need a higher number!"),t.reportValidity()):t.rangeOverflow?(t.setCustomValidity("Thats too high!"),t.reportValidity()):(t.setCustomValidity(""),t.reportValidity())}(t)}))});const a=t=>({first:{id:t[0],amount:2},second:{id:t[1],amount:2},third:{id:t[2],amount:0}}),n=(t,e,i)=>{e===t.first.id?t.first.amount=i:e===t.second.id?t.second.amount=i:e===t.third.id&&(t.third.amount=i)},r=(t,e)=>{var i=t.parent().find("input").val();if("+"==t.text())var s=parseFloat(i)+1<e.attr("max")?parseFloat(i)+1:e.attr("max");else if(i>0)s=parseFloat(i)-1;else s=0;return e.val(s),s}},function(t,e,i){"use strict";i.d(e,"a",(function(){return s}));i(2);const s={language:{today:"Применить"},autoClose:!0,minDate:new Date,dateFormat:"dd M",multipleDatesSeparator:" - ",todayButton:!0,clearButton:!0,prevHtml:'<svg width="17" height="18" viewBox="0 0 17 18"><path d="M16.1755 8.01562V9.98438H3.98801L9.56613 15.6094L8.15988 17.0156L0.144258 9L8.15988 0.984375L9.56613 2.39062L3.98801 8.01562H16.1755Z" fill="#BC9CFF"></path></svg>',nextHtml:'<svg width="17" height="18" viewBox="0 0 17 18"><path d="M8.36301 0.984375L16.3786 9L8.36301 17.0156L6.95676 15.6094L12.5349 9.98438H0.347383V8.01562H12.5349L6.95676 2.39062L8.36301 0.984375Z" fill="#BC9CFF"></path></svg>',navTitles:{days:"MM  <i>yyyy</i>"}}},function(t,e,i){i(3),i(4),i(5),i(6)},function(t,e){var i,s,a,n,r,o,h;n=!1,r={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},o={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},(a=h=function(t,e){this.el=t,this.$el=$(t),this.opts=$.extend(!0,{},r,e,this.$el.data()),null==i&&(i=$("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?$(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()}).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){n||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new $.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new $.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new $.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),$(window).on("resize.adp",this._onResize.bind(this)),$("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(t){return-1!==this.opts.weekends.indexOf(t)},_defineLocale:function(t){"string"==typeof t?(this.loc=$.fn.datepicker.language[t],this.loc||(console.warn("Can't find language \""+t+'" in Datepicker.language, will use "ru" instead'),this.loc=$.extend(!0,{},$.fn.datepicker.language.ru)),this.loc=$.extend(!0,{},$.fn.datepicker.language.ru,$.fn.datepicker.language[t])):this.loc=$.extend(!0,{},$.fn.datepicker.language.ru,t),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var e=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(e("aa"))||this.loc.timeFormat.match(e("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){n=!0,i.append('<div class="datepickers-container" id="datepickers-container"></div>'),s=$("#datepickers-container")},_buildBaseHtml:function(){var t,e=$('<div class="datepicker-inline">');t="INPUT"==this.el.nodeName?this.opts.inline?e.insertAfter(this.$el):s:e.appendTo(this.$el),this.$datepicker=$('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(t),this.$content=$(".datepicker--content",this.$datepicker),this.$nav=$(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var t,e=this.selectedDates,i=a.getParsedDate(e[0]),s=this,n=new Date(i.year,i.month,i.date,i.hours,i.minutes);t=e.map((function(t){return s.formatDate(s.loc.dateFormat,t)})).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(n=e.map((function(t){var e=a.getParsedDate(t);return new Date(e.year,e.month,e.date,e.hours,e.minutes)}))),this._prevOnSelectValue=t,this.opts.onSelect(t,n,this)},next:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month+1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year+1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year+10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},prev:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month-1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year-1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year-10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},formatDate:function(t,e){e=e||this.date;var i,s=t,n=this._getWordBoundaryRegExp,r=this.loc,o=a.getLeadingZeroNum,h=a.getDecade(e),l=a.getParsedDate(e),d=l.fullHours,c=l.hours,u=t.match(n("aa"))||t.match(n("AA")),m="am",p=this._replacer;switch(this.opts.timepicker&&this.timepicker&&u&&(d=o((i=this.timepicker._getValidHoursFromDate(e,u)).hours),c=i.hours,m=i.dayPeriod),!0){case/@/.test(s):s=s.replace(/@/,e.getTime());case/aa/.test(s):s=p(s,n("aa"),m);case/AA/.test(s):s=p(s,n("AA"),m.toUpperCase());case/dd/.test(s):s=p(s,n("dd"),l.fullDate);case/d/.test(s):s=p(s,n("d"),l.date);case/DD/.test(s):s=p(s,n("DD"),r.days[l.day]);case/D/.test(s):s=p(s,n("D"),r.daysShort[l.day]);case/mm/.test(s):s=p(s,n("mm"),l.fullMonth);case/m/.test(s):s=p(s,n("m"),l.month+1);case/MM/.test(s):s=p(s,n("MM"),this.loc.months[l.month]);case/M/.test(s):s=p(s,n("M"),r.monthsShort[l.month]);case/ii/.test(s):s=p(s,n("ii"),l.fullMinutes);case/i/.test(s):s=p(s,n("i"),l.minutes);case/hh/.test(s):s=p(s,n("hh"),d);case/h/.test(s):s=p(s,n("h"),c);case/yyyy/.test(s):s=p(s,n("yyyy"),l.year);case/yyyy1/.test(s):s=p(s,n("yyyy1"),h[0]);case/yyyy2/.test(s):s=p(s,n("yyyy2"),h[1]);case/yy/.test(s):s=p(s,n("yy"),l.year.toString().slice(-2))}return s},_replacer:function(t,e,i){return t.replace(e,(function(t,e,s,a){return e+i+a}))},_getWordBoundaryRegExp:function(t){var e="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+e+")("+t+")($|<|"+e+")","g")},selectDate:function(t){var e=this,i=e.opts,s=e.parsedDate,n=e.selectedDates.length,r="";if(Array.isArray(t))t.forEach((function(t){e.selectDate(t)}));else if(t instanceof Date){if(this.lastSelectedDate=t,this.timepicker&&this.timepicker._setTime(t),e._trigger("selectDate",t),this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),"days"==e.view&&t.getMonth()!=s.month&&i.moveToOtherMonthsOnSelect&&(r=new Date(t.getFullYear(),t.getMonth(),1)),"years"==e.view&&t.getFullYear()!=s.year&&i.moveToOtherYearsOnSelect&&(r=new Date(t.getFullYear(),0,1)),r&&(e.silent=!0,e.date=r,e.silent=!1,e.nav._render()),i.multipleDates&&!i.range){if(n===i.multipleDates)return;e._isSelected(t)||e.selectedDates.push(t)}else i.range?2==n?(e.selectedDates=[t],e.minRange=t,e.maxRange=""):1==n?(e.selectedDates.push(t),e.maxRange?e.minRange=t:e.maxRange=t,a.bigger(e.maxRange,e.minRange)&&(e.maxRange=e.minRange,e.minRange=t),e.selectedDates=[e.minRange,e.maxRange]):(e.selectedDates=[t],e.minRange=t):e.selectedDates=[t];e._setInputValue(),i.onSelect&&e._triggerOnChange(),i.autoClose&&!this.timepickerIsActive&&(i.multipleDates||i.range?i.range&&2==e.selectedDates.length&&e.hide():e.hide()),e.views[this.currentView]._render()}},removeDate:function(t){var e=this.selectedDates,i=this;if(t instanceof Date)return e.some((function(s,n){if(a.isSame(s,t))return e.splice(n,1),i.selectedDates.length?i.lastSelectedDate=i.selectedDates[i.selectedDates.length-1]:(i.minRange="",i.maxRange="",i.lastSelectedDate=""),i.views[i.currentView]._render(),i._setInputValue(),i.opts.onSelect&&i._triggerOnChange(),!0}))},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(t,e){var i=arguments.length,s=this.lastSelectedDate;return 2==i?this.opts[t]=e:1==i&&"object"==typeof t&&(this.opts=$.extend(!0,this.opts,t)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(s&&this.timepicker._handleDate(s),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),s&&(s.setHours(this.timepicker.hours),s.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var t=this.date.getTime();this.silent=!0,this.minTime>t&&(this.date=this.minDate),this.maxTime<t&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(t,e){var i=!1;return this.selectedDates.some((function(s){if(a.isSame(s,t,e))return i=s,!0})),i},_setInputValue:function(){var t,e=this,i=e.opts,s=e.loc.dateFormat,a=i.altFieldDateFormat,n=e.selectedDates.map((function(t){return e.formatDate(s,t)}));i.altField&&e.$altField.length&&(t=(t=this.selectedDates.map((function(t){return e.formatDate(a,t)}))).join(this.opts.multipleDatesSeparator),this.$altField.val(t)),n=n.join(this.opts.multipleDatesSeparator),this.$el.val(n)},_isInRange:function(t,e){var i=t.getTime(),s=a.getParsedDate(t),n=a.getParsedDate(this.minDate),r=a.getParsedDate(this.maxDate),o=new Date(s.year,s.month,n.date).getTime(),h=new Date(s.year,s.month,r.date).getTime(),l={day:i>=this.minTime&&i<=this.maxTime,month:o>=this.minTime&&h<=this.maxTime,year:s.year>=n.year&&s.year<=r.year};return e?l[e]:l.day},_getDimensions:function(t){var e=t.offset();return{width:t.outerWidth(),height:t.outerHeight(),left:e.left,top:e.top}},_getDateFromCell:function(t){var e=this.parsedDate,i=t.data("year")||e.year,s=null==t.data("month")?e.month:t.data("month"),a=t.data("date")||1;return new Date(i,s,a)},_setPositionClasses:function(t){var e=(t=t.split(" "))[0],i="datepicker -"+e+"-"+t[1]+"- -from-"+e+"-";this.visible&&(i+=" active"),this.$datepicker.removeAttr("class").addClass(i)},setPosition:function(t){t=t||this.opts.position;var e,i,s=this._getDimensions(this.$el),a=this._getDimensions(this.$datepicker),n=t.split(" "),r=this.opts.offset,o=n[0],h=n[1];switch(o){case"top":e=s.top-a.height-r;break;case"right":i=s.left+s.width+r;break;case"bottom":e=s.top+s.height+r;break;case"left":i=s.left-a.width-r}switch(h){case"top":e=s.top;break;case"right":i=s.left+s.width-a.width;break;case"bottom":e=s.top+s.height-a.height;break;case"left":i=s.left;break;case"center":/left|right/.test(o)?e=s.top+s.height/2-a.height/2:i=s.left+s.width/2-a.width/2}this.$datepicker.css({left:i,top:e})},show:function(){var t=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,t&&this._bindVisionEvents(t)},hide:function(){var t=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),t&&this._bindVisionEvents(t)},down:function(t){this._changeView(t,"down")},up:function(t){this._changeView(t,"up")},_bindVisionEvents:function(t){this.$datepicker.off("transitionend.dp"),t(this,!1),this.$datepicker.one("transitionend.dp",t.bind(this,this,!0))},_changeView:function(t,e){t=t||this.focused||this.date;var i="up"==e?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),i<0&&(i=0),this.silent=!0,this.date=new Date(t.getFullYear(),t.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[i]},_handleHotKey:function(t){var e,i,s,n=a.getParsedDate(this._getFocusedDate()),r=this.opts,o=!1,h=!1,l=!1,d=n.year,c=n.month,u=n.date;switch(t){case"ctrlRight":case"ctrlUp":c+=1,o=!0;break;case"ctrlLeft":case"ctrlDown":c-=1,o=!0;break;case"shiftRight":case"shiftUp":h=!0,d+=1;break;case"shiftLeft":case"shiftDown":h=!0,d-=1;break;case"altRight":case"altUp":l=!0,d+=10;break;case"altLeft":case"altDown":l=!0,d-=10;break;case"ctrlShiftUp":this.up()}s=a.getDaysCount(new Date(d,c)),i=new Date(d,c,u),s<u&&(u=s),i.getTime()<this.minTime?i=this.minDate:i.getTime()>this.maxTime&&(i=this.maxDate),this.focused=i,e=a.getParsedDate(i),o&&r.onChangeMonth&&r.onChangeMonth(e.month,e.year),h&&r.onChangeYear&&r.onChangeYear(e.year),l&&r.onChangeDecade&&r.onChangeDecade(this.curDecade)},_registerKey:function(t){this.keys.some((function(e){return e==t}))||this.keys.push(t)},_unRegisterKey:function(t){var e=this.keys.indexOf(t);this.keys.splice(e,1)},_isHotKeyPressed:function(){var t,e=!1,i=this.keys.sort();for(var s in o)t=o[s],i.length==t.length&&t.every((function(t,e){return t==i[e]}))&&(this._trigger("hotKey",s),e=!0);return e},_trigger:function(t,e){this.$el.trigger(t,e)},_focusNextCell:function(t,e){e=e||this.cellType;var i=a.getParsedDate(this._getFocusedDate()),s=i.year,n=i.month,r=i.date;if(!this._isHotKeyPressed()){switch(t){case 37:"day"==e&&(r-=1),"month"==e&&(n-=1),"year"==e&&(s-=1);break;case 38:"day"==e&&(r-=7),"month"==e&&(n-=3),"year"==e&&(s-=4);break;case 39:"day"==e&&(r+=1),"month"==e&&(n+=1),"year"==e&&(s+=1);break;case 40:"day"==e&&(r+=7),"month"==e&&(n+=3),"year"==e&&(s+=4)}var o=new Date(s,n,r);o.getTime()<this.minTime?o=this.minDate:o.getTime()>this.maxTime&&(o=this.maxDate),this.focused=o}},_getFocusedDate:function(){var t=this.focused||this.selectedDates[this.selectedDates.length-1],e=this.parsedDate;if(!t)switch(this.view){case"days":t=new Date(e.year,e.month,(new Date).getDate());break;case"months":t=new Date(e.year,e.month,1);break;case"years":t=new Date(e.year,0,1)}return t},_getCell:function(t,e){e=e||this.cellType;var i,s=a.getParsedDate(t),n='.datepicker--cell[data-year="'+s.year+'"]';switch(e){case"month":n='[data-month="'+s.month+'"]';break;case"day":n+='[data-month="'+s.month+'"][data-date="'+s.date+'"]'}return(i=this.views[this.currentView].$el.find(n)).length?i:$("")},destroy:function(){this.$el.off(".adp").data("datepicker",""),this.selectedDates=[],this.focused="",this.views={},this.keys=[],this.minRange="",this.maxRange="",this.opts.inline||!this.elIsInput?this.$datepicker.closest(".datepicker-inline").remove():this.$datepicker.remove()},_handleAlreadySelectedDates:function(t,e){this.opts.range?this.opts.toggleSelected?this.removeDate(e):2!=this.selectedDates.length&&this._trigger("clickCell",e):this.opts.toggleSelected&&this.removeDate(e),this.opts.toggleSelected||(this.lastSelectedDate=t,this.opts.timepicker&&(this.timepicker._setTime(t),this.timepicker.update()))},_onShowEvent:function(t){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(t){this.inFocus=!0},_onMouseUpDatepicker:function(t){this.inFocus=!1,t.originalEvent.inFocus=!0,t.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(t){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(t){t.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(t){t.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(t){var e=t.which;if(this._registerKey(e),e>=37&&e<=40&&(t.preventDefault(),this._focusNextCell(e)),13==e&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var i=this._isSelected(this.focused,this.cellType);if(!i)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(i,this.focused)}}27==e&&this.hide()},_onKeyUp:function(t){var e=t.which;this._unRegisterKey(e)},_onHotKey:function(t,e){this._handleHotKey(e)},_onMouseEnterCell:function(t){var e=$(t.target).closest(".datepicker--cell"),i=this._getDateFromCell(e);this.silent=!0,this.focused&&(this.focused=""),e.addClass("-focus-"),this.focused=i,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(t){$(t.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(t,e,i){var s=new Date,a=!1;this.selectedDates.length&&(a=!0,s=this.lastSelectedDate),s.setHours(e),s.setMinutes(i),a||this._getCell(s).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(s)},_onClickCell:function(t,e){this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),this.selectDate(e)},set focused(t){if(!t&&this.focused){var e=this._getCell(this.focused);e.length&&e.removeClass("-focus-")}this._focused=t,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=t)},get focused(){return this._focused},get parsedDate(){return a.getParsedDate(this.date)},set date(t){if(t instanceof Date)return this.currentDate=t,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),t},get date(){return this.currentDate},set view(t){if(this.viewIndex=this.viewIndexes.indexOf(t),!(this.viewIndex<0))return this.prevView=this.currentView,this.currentView=t,this.inited&&(this.views[t]?this.views[t]._render():this.views[t]=new $.fn.datepicker.Body(this,t,this.opts),this.views[this.prevView].hide(),this.views[t].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(t),this.elIsInput&&this.visible&&this.setPosition()),t},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var t=a.getParsedDate(this.minDate);return new Date(t.year,t.month,t.date).getTime()},get maxTime(){var t=a.getParsedDate(this.maxDate);return new Date(t.year,t.month,t.date).getTime()},get curDecade(){return a.getDecade(this.date)}},a.getDaysCount=function(t){return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()},a.getParsedDate=function(t){return{year:t.getFullYear(),month:t.getMonth(),fullMonth:t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1,date:t.getDate(),fullDate:t.getDate()<10?"0"+t.getDate():t.getDate(),day:t.getDay(),hours:t.getHours(),fullHours:t.getHours()<10?"0"+t.getHours():t.getHours(),minutes:t.getMinutes(),fullMinutes:t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes()}},a.getDecade=function(t){var e=10*Math.floor(t.getFullYear()/10);return[e,e+9]},a.template=function(t,e){return t.replace(/#\{([\w]+)\}/g,(function(t,i){if(e[i]||0===e[i])return e[i]}))},a.isSame=function(t,e,i){if(!t||!e)return!1;var s=a.getParsedDate(t),n=a.getParsedDate(e),r=i||"day";return{day:s.date==n.date&&s.month==n.month&&s.year==n.year,month:s.month==n.month&&s.year==n.year,year:s.year==n.year}[r]},a.less=function(t,e,i){return!(!t||!e)&&e.getTime()<t.getTime()},a.bigger=function(t,e,i){return!(!t||!e)&&e.getTime()>t.getTime()},a.getLeadingZeroNum=function(t){return parseInt(t)<10?"0"+t:t},a.resetTime=function(t){if("object"==typeof t)return t=a.getParsedDate(t),new Date(t.year,t.month,t.date)},$.fn.datepicker=function(t){return this.each((function(){if($.data(this,"datepicker")){var e=$.data(this,"datepicker");e.opts=$.extend(!0,e.opts,t),e.update()}else $.data(this,"datepicker",new h(this,t))}))},$.fn.datepicker.Constructor=h,$.fn.datepicker.language={ru:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},$((function(){$(".datepicker-here").datepicker()}))},function(t,e){var i,s,a;i={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},s=$.fn.datepicker,a=s.Constructor,s.Body=function(t,e,i){this.d=t,this.type=e,this.opts=i,this.$el=$(""),this.opts.onlyTimepicker||this.init()},s.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",$.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=$(i[this.type]).appendTo(this.d.$content),this.$names=$(".datepicker--days-names",this.$el),this.$cells=$(".datepicker--cells",this.$el)},_getDayNamesHtml:function(t,e,i,s){return i=i||"",(s=null!=s?s:0)>7?i:7==(e=null!=e?e:t)?this._getDayNamesHtml(t,0,i,++s):(i+='<div class="datepicker--day-name'+(this.d.isWeekend(e)?" -weekend-":"")+'">'+this.d.loc.daysMin[e]+"</div>",this._getDayNamesHtml(t,++e,i,++s))},_getCellContents:function(t,e){var i="datepicker--cell datepicker--cell-"+e,s=new Date,n=this.d,r=a.resetTime(n.minRange),o=a.resetTime(n.maxRange),h=n.opts,l=a.getParsedDate(t),d={},c=l.date;switch(e){case"day":n.isWeekend(l.day)&&(i+=" -weekend-"),l.month!=this.d.parsedDate.month&&(i+=" -other-month-",h.selectOtherMonths||(i+=" -disabled-"),h.showOtherMonths||(c=""));break;case"month":c=n.loc[n.opts.monthsField][l.month];break;case"year":var u=n.curDecade;c=l.year,(l.year<u[0]||l.year>u[1])&&(i+=" -other-decade-",h.selectOtherYears||(i+=" -disabled-"),h.showOtherYears||(c=""))}return h.onRenderCell&&(c=(d=h.onRenderCell(t,e)||{}).html?d.html:c,i+=d.classes?" "+d.classes:""),h.range&&(a.isSame(r,t,e)&&(i+=" -range-from-"),a.isSame(o,t,e)&&(i+=" -range-to-"),1==n.selectedDates.length&&n.focused?((a.bigger(r,t)&&a.less(n.focused,t)||a.less(o,t)&&a.bigger(n.focused,t))&&(i+=" -in-range-"),a.less(o,t)&&a.isSame(n.focused,t)&&(i+=" -range-from-"),a.bigger(r,t)&&a.isSame(n.focused,t)&&(i+=" -range-to-")):2==n.selectedDates.length&&a.bigger(r,t)&&a.less(o,t)&&(i+=" -in-range-")),a.isSame(s,t,e)&&(i+=" -current-"),n.focused&&a.isSame(t,n.focused,e)&&(i+=" -focus-"),n._isSelected(t,e)&&(i+=" -selected-"),n._isInRange(t,e)&&!d.disabled||(i+=" -disabled-"),{html:c,classes:i}},_getDaysHtml:function(t){for(var e,i,s=a.getDaysCount(t),n=new Date(t.getFullYear(),t.getMonth(),1).getDay(),r=new Date(t.getFullYear(),t.getMonth(),s).getDay(),o=n-this.d.loc.firstDay,h=6-r+this.d.loc.firstDay,l="",d=1-(o=o<0?o+7:o),c=s+(h=h>6?h-7:h);d<=c;d++)i=t.getFullYear(),e=t.getMonth(),l+=this._getDayHtml(new Date(i,e,d));return l},_getDayHtml:function(t){var e=this._getCellContents(t,"day");return'<div class="'+e.classes+'" data-date="'+t.getDate()+'" data-month="'+t.getMonth()+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_getMonthsHtml:function(t){for(var e="",i=a.getParsedDate(t),s=0;s<12;)e+=this._getMonthHtml(new Date(i.year,s)),s++;return e},_getMonthHtml:function(t){var e=this._getCellContents(t,"month");return'<div class="'+e.classes+'" data-month="'+t.getMonth()+'">'+e.html+"</div>"},_getYearsHtml:function(t){a.getParsedDate(t);for(var e=a.getDecade(t),i="",s=e[0]-1;s<=e[1]+1;s++)i+=this._getYearHtml(new Date(s,0));return i},_getYearHtml:function(t){var e=this._getCellContents(t,"year");return'<div class="'+e.classes+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_renderTypes:{days:function(){var t=this._getDayNamesHtml(this.d.loc.firstDay),e=this._getDaysHtml(this.d.currentDate);this.$cells.html(e),this.$names.html(t)},months:function(){var t=this._getMonthsHtml(this.d.currentDate);this.$cells.html(t)},years:function(){var t=this._getYearsHtml(this.d.currentDate);this.$cells.html(t)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var t,e,i,s=$(".datepicker--cell",this.$cells),a=this;s.each((function(s,n){e=$(this),i=a.d._getDateFromCell($(this)),t=a._getCellContents(i,a.d.cellType),e.attr("class",t.classes)}))},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(t){var e=t.data("date")||1,i=t.data("month")||0,s=t.data("year")||this.d.parsedDate.year,a=this.d;if(a.view==this.opts.minView){var n=new Date(s,i,e),r=this.d._isSelected(n,this.d.cellType);r?a._handleAlreadySelectedDates.bind(a,r,n)():a._trigger("clickCell",n)}else a.down(new Date(s,i,e))},_onClickCell:function(t){var e=$(t.target).closest(".datepicker--cell");e.hasClass("-disabled-")||this._handleClick.bind(this)(e)}}},function(t,e){var i,s;i=$.fn.datepicker,s=i.Constructor,i.Navigation=function(t,e){this.d=t,this.opts=e,this.$buttonsContainer="",this.init()},i.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",$.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",$.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",$.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var t=this._getTitle(this.d.currentDate),e=s.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',$.extend({title:t},this.opts));this.d.$nav.html(e),"years"==this.d.view&&$(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(t){return this.d.formatDate(this.opts.navTitles[this.d.view],t)},_addButton:function(t){this.$buttonsContainer.length||this._addButtonsContainer();var e={action:t,label:this.d.loc[t]},i=s.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',e);$("[data-action="+t+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(i)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=$(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var t=this.d.parsedDate,e=t.month,i=t.year,a=t.date;switch(this.d.view){case"days":this.d._isInRange(new Date(i,e-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(i,e+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(i-1,e,a),"year")||this._disableNav("prev"),this.d._isInRange(new Date(i+1,e,a),"year")||this._disableNav("next");break;case"years":var n=s.getDecade(this.d.date);this.d._isInRange(new Date(n[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(n[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(t){$('[data-action="'+t+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(t){$('[data-action="'+t+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(t){var e=$(t.target).closest("[data-action]").data("action");this.d[e]()},_onClickNavTitle:function(t){if(!$(t.target).hasClass("-disabled-"))return"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}},function(t,e){var i,s;i=$.fn.datepicker,s=i.Constructor,i.Timepicker=function(t,e){this.d=t,this.opts=e,this.init()},i.Timepicker.prototype={init:function(){var t="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(t="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(t,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(t){var e=s.getParsedDate(t);this._handleDate(t),this.hours=e.hours<this.minHours?this.minHours:e.hours,this.minutes=e.minutes<this.minMinutes?this.minMinutes:e.minutes},_setMinTimeFromDate:function(t){this.minHours=t.getHours(),this.minMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>t.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(t){this.maxHours=t.getHours(),this.maxMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<t.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var t=this.opts;this.minHours=t.minHours<0||t.minHours>23?0:t.minHours,this.minMinutes=t.minMinutes<0||t.minMinutes>59?0:t.minMinutes,this.maxHours=t.maxHours<0||t.maxHours>23?23:t.maxHours,this.maxMinutes=t.maxMinutes<0||t.maxMinutes>59?59:t.maxMinutes},_validateHoursMinutes:function(t){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var t=s.getLeadingZeroNum,e={hourMin:this.minHours,hourMax:t(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:t(this.displayHours),minMin:this.minMinutes,minMax:t(this.maxMinutes),minStep:this.opts.minutesStep,minValue:t(this.minutes)},i=s.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',e);this.$timepicker=$(i).appendTo(this.d.$datepicker),this.$ranges=$('[type="range"]',this.$timepicker),this.$hours=$('[name="hours"]',this.$timepicker),this.$minutes=$('[name="minutes"]',this.$timepicker),this.$hoursText=$(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=$(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=$('<span class="datepicker--time-current-ampm">').appendTo($(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var t=s.getLeadingZeroNum(this.displayHours),e=s.getLeadingZeroNum(this.minutes);this.$hoursText.html(t),this.$minutesText.html(e),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(t){this._setDefaultMinMaxTime(),t&&(s.isSame(t,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):s.isSame(t,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(t)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(t,e){var i=t;t instanceof Date&&(i=s.getParsedDate(t).hours);var a="am";if(e||this.d.ampm)switch(!0){case 0==i:i=12;break;case 12==i:a="pm";break;case i>11:i-=12,a="pm"}return{hours:i,dayPeriod:a}},set hours(t){this._hours=t;var e=this._getValidHoursFromDate(t);this.displayHours=e.hours,this.dayPeriod=e.dayPeriod},get hours(){return this._hours},_onChangeRange:function(t){var e=$(t.target),i=e.attr("name");this.d.timepickerIsActive=!0,this[i]=e.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(t,e){this._handleDate(e),this.update()},_onMouseEnterRange:function(t){var e=$(t.target).attr("name");$(".datepicker--time-current-"+e,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(t){var e=$(t.target).attr("name");this.d.inFocus||$(".datepicker--time-current-"+e,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(t){this.d.timepickerIsActive=!1}}},,,function(t,e){function i(t){return document.querySelector(t)}function s(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)}function a(t,e){t.classList?t.classList.add(e):t.className+=" "+e}function n(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}var r,o=((r=function(t){var e=this;e.def={target:i(".slider"),dotsWrapper:i(".dots-wrapper"),arrowLeft:i(".arrow-left"),arrowRight:i(".arrow-right"),transition:{speed:300,easing:""},swipe:!0,autoHeight:!1,afterChangeSlide:function(){}},function(t,e){if(void 0!==e)for(var i in t)null!=e[i]&&(t[i]=e[i])}(e.def,t),e.init()}).prototype.buildDots=function(){for(var t=this,e=0;e<t.totalSlides;e++){var i=document.createElement("li");i.setAttribute("data-slide",e+1),t.def.dotsWrapper.appendChild(i)}t.def.dotsWrapper.addEventListener("click",(function(e){e.target&&"LI"==e.target.nodeName&&(t.curSlide=e.target.getAttribute("data-slide"),t.gotoSlide())}),!1)},r.prototype.getCurLeft=function(){this.curLeft=parseInt(this.sliderInner.style.left.split("px")[0])},r.prototype.gotoSlide=function(){var t=this;t.sliderInner.style.transition="left "+t.def.transition.speed/1e3+"s "+t.def.transition.easing,t.sliderInner.style.left=-t.curSlide*t.slideW+"px",a(t.def.target,"isAnimating"),setTimeout((function(){t.sliderInner.style.transition="",n(t.def.target,"isAnimating")}),t.def.transition.speed),t.setDot(),t.def.autoHeight&&(t.def.target.style.height=t.allSlides[t.curSlide].offsetHeight+"px"),t.def.afterChangeSlide(t)},r.prototype.init=function(){var t=this;function e(e){var i=!1;function s(){i||(i=!0,t.loadedCnt++,t.loadedCnt>=t.totalSlides+2&&t.updateSliderDimension())}var a=e.querySelector("img");a?(a.onload=s,a.src=a.getAttribute("data-src"),a.style.display="block",a.complete&&s()):t.updateSliderDimension()}t.allSlides=0,t.curSlide=0,t.curLeft=0,t.totalSlides=t.def.target.querySelectorAll(".slide").length,t.sliderInner=t.def.target.querySelector(".room-card__slider-container"),t.loadedCnt=0;var s=t.def.target.querySelectorAll(".slide")[0].cloneNode(!0);t.sliderInner.appendChild(s);var r=t.def.target.querySelectorAll(".slide")[t.totalSlides-1].cloneNode(!0);t.sliderInner.insertBefore(r,t.sliderInner.firstChild),t.curSlide++,t.allSlides=t.def.target.querySelectorAll(".slide"),t.sliderInner.style.width=100*(t.totalSlides+2)+"%";for(var o=0;o<t.totalSlides+2;o++)t.allSlides[o].style.width=100/(t.totalSlides+2)+"%",e(t.allSlides[o]);function h(t,e,i){e.split(" ").forEach((function(e){return t.addEventListener(e,i,!1)}))}function l(t,e,i){e.split(" ").forEach((function(e){return t.removeEventListener(e,i,!1)}))}function d(e){var i=e;"touchmove"==e.type&&(i=e.targetTouches[0]||e.changedTouches[0]),t.moveX=i.pageX,t.moveY=i.pageY,Math.abs(t.moveX-t.startX)<40||(t.isAnimating=!0,a(t.def.target,"isAnimating"),e.preventDefault(),t.curLeft+t.moveX-t.startX>0&&0==t.curLeft?t.curLeft=-t.totalSlides*t.slideW:t.curLeft+t.moveX-t.startX<-(t.totalSlides+1)*t.slideW&&(t.curLeft=-t.slideW),t.sliderInner.style.left=t.curLeft+t.moveX-t.startX+"px")}function c(e){t.getCurLeft(),0!==Math.abs(t.moveX-t.startX)&&(t.stayAtCur=Math.abs(t.moveX-t.startX)<40||void 0===t.moveX,t.dir=t.startX<t.moveX?"left":"right",t.stayAtCur||("left"==t.dir?t.curSlide--:t.curSlide++,t.curSlide<0?t.curSlide=t.totalSlides:t.curSlide==t.totalSlides+2&&(t.curSlide=1)),t.gotoSlide(),delete t.startX,delete t.startY,delete t.moveX,delete t.moveY,t.isAnimating=!1,n(t.def.target,"isAnimating"),l(t.sliderInner,"mousemove touchmove",d),l(i("body"),"mouseup touchend",c))}t.buildDots(),t.setDot(),t.initArrows(),t.def.swipe&&h(t.sliderInner,"mousedown touchstart",(function(e){var s=e;t.getCurLeft(),t.isAnimating||("touchstart"==e.type&&(s=e.targetTouches[0]||e.changedTouches[0]),t.startX=s.pageX,t.startY=s.pageY,h(t.sliderInner,"mousemove touchmove",d),h(i("body"),"mouseup touchend",c))})),t.isAnimating=!1},r.prototype.initArrows=function(){var t=this;""!=t.def.arrowLeft&&t.def.arrowLeft.addEventListener("click",(function(){s(t.def.target,"isAnimating")||(1==t.curSlide&&(t.curSlide=t.totalSlides+1,t.sliderInner.style.left=-t.curSlide*t.slideW+"px"),t.curSlide--,setTimeout((function(){t.gotoSlide()}),20))}),!1),""!=t.def.arrowRight&&t.def.arrowRight.addEventListener("click",(function(){s(t.def.target,"isAnimating")||(t.curSlide==t.totalSlides&&(t.curSlide=0,t.sliderInner.style.left=-t.curSlide*t.slideW+"px"),t.curSlide++,setTimeout((function(){t.gotoSlide()}),20))}),!1)},r.prototype.setDot=function(){for(var t=this,e=t.curSlide-1,i=0;i<t.totalSlides;i++)n(t.def.dotsWrapper.querySelectorAll("li")[i],"active");t.curSlide-1<0?e=t.totalSlides-1:t.curSlide-1>t.totalSlides-1&&(e=0),a(t.def.dotsWrapper.querySelectorAll("li")[e],"active")},r.prototype.updateSliderDimension=function(){var t=this;if(t.slideW=270,t.sliderInner.style.left=-t.slideW*t.curSlide+"px",t.def.autoHeight)t.def.target.style.height=t.allSlides[t.curSlide].offsetHeight+"px";else for(var e=0;e<t.totalSlides+2;e++)t.allSlides[e].offsetHeight>t.def.target.offsetHeight&&(t.def.target.style.height=t.allSlides[e].offsetHeight+"px");t.def.afterChangeSlide(t)},r);document.querySelectorAll(".room-card__slider").forEach((function(t){return new o({target:t,dotsWrapper:t.querySelector(".dots-wrapper"),arrowLeft:t.querySelector(".arrow-left"),arrowRight:t.querySelector(".arrow-right")})}))},,,,,,,,function(t,e,i){"use strict";i.r(e);i(9);var s=i(1),a=i(0);const n=s.a;n.range=!0,$("#filterDates").datepicker(n),$(".filter-form__datepicker-arrow").on("click",(function(){$(this).hasClass("filter-form__arrow--active")?$(this).removeClass("filter-form__arrow--active"):($(this).addClass("filter-form__arrow--active"),$(this).parent().find($(".filter-form__input")).focus())})),$("#filterDates").on("blur",(function(){$(".filter-form__datepicker-arrow").removeClass("filter-form__arrow--active")}));const r=document.querySelector(".filter-form__dropdown-btn"),o=document.querySelector(".filter-form__div");o.classList.add("modal-close"),r.addEventListener("click",(function(t){t.preventDefault(),Object(a.c)(o,"modal-close")})),$(".filter-form__input-arrow").on("click",(function(){$(this).toggleClass("filter-form__arrow--active"),$(this).parent().find($(".select__dropdown")).toggleClass("modal-close")})),$(".search-form__select-arrow").on("click",(function(){$(this).toggleClass("search-form__arrow--active"),$(this).parent().find($(".select__dropdown")).toggleClass("modal-close")}));const h=Object(a.a)(["Спальни","Кровати","Ванные комнаты"]);$(".Comfort").on("click",(function(){var t=$(this),e=t.parent().find("input"),i=Object(a.b)(t,e),s=$("#comfortInput"),n=e.attr("id");Object(a.d)(h,n,i),s.val(h.first.amount+" "+h.first.id+", "+h.second.amount+" "+h.second.id+", "+h.third.amount+" "+h.third.id)}));const l=Object(a.a)(["Взрослые","Дети","Младенцы"]);$("#Guests").find(".calendar__btn--submit").on("click",(function(t){t.preventDefault(),$("#Guests").closest(".select__dropdown").addClass("modal-close")})),$(".Guests").on("click",(function(){var t=$(this),e=t.parent().find("input"),i=Object(a.b)(t,e),s=$("#guestsInput"),n=e.attr("id");Object(a.d)(l,n,i);let r=Number(l.first.amount)+Number(l.second.amount);s.val(r+" гостей, "+l.third.amount+" "+l.third.id)})),$("#guestsInput").focus((function(t){$(this).removeAttr("placeholder")})).blur((function(){$(this).attr("placeholder","3 гостя, 1 младенец")})),$("#comfortInput").focus((function(t){$(this).removeAttr("placeholder")})).blur((function(){$(this).attr("placeholder","2 спальни, 2 кровати, ... ")}));$("#slider").slider({animate:"slow",min:5e3,max:1e4,step:100,values:[6500,8100],range:!0,stop:function(t,e){$("input#minCost").val($("#slider").slider("values",0)),$("input#maxCost").val($("#slider").slider("values",1))},slide:function(t,e){$("input#minCost").val($("#slider").slider("values",0)),$("input#maxCost").val($("#slider").slider("values",1))}});var d=$("#slider").slider("values",0),c=$("#slider").slider("values",1);$("input#minCost").val(d),$("input#maxCost").val(c),$("input#minCost").change((function(){$("#slider").slider("values",0,$(this).val())})),$("input#maxCost").change((function(){$("#slider").slider("values",1,$(this).val())}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZGF0ZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvc3JjL2pzL2Fpci1kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvZGF0ZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvc3JjL2pzL2JvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL3NyYy9qcy9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvdGltZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHVnL2Jsb2Nrcy9yb29tLWNhcmQtdGVtcGxhdGUvcm9vbS1waG90by1zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3B1Zy9wYWdlcy9zZWFyY2gvc2VhcmNoLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidG9nZ2xlIiwiZWxlbSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpbnB1dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJ2YWxpZGl0eSIsInR5cGVNaXNtYXRjaCIsInNldEN1c3RvbVZhbGlkaXR5IiwicmVwb3J0VmFsaWRpdHkiLCJyYW5nZVVuZGVyZmxvdyIsInJhbmdlT3ZlcmZsb3ciLCJ2YWxpZGF0ZSIsImdldERlZmF1bHRPcHRpb25zIiwiSURzIiwiZmlyc3QiLCJpZCIsImFtb3VudCIsInNlY29uZCIsInRoaXJkIiwidXBkYXRlT3B0aW9ucyIsIkRlZmF1bHRPcHRpb25zIiwiaW5wdXRJRCIsIm5ld1ZhbCIsInN3aXRjaEFtb3VudCIsImJ1dHRvbiIsIm9sZFZhbHVlIiwicGFyZW50IiwiZmluZCIsInZhbCIsInRleHQiLCJwYXJzZUZsb2F0IiwiYXR0ciIsImRhdGVQaWNrZXJDb25maWciLCJsYW5ndWFnZSIsInRvZGF5IiwiYXV0b0Nsb3NlIiwibWluRGF0ZSIsIkRhdGUiLCJkYXRlRm9ybWF0IiwibXVsdGlwbGVEYXRlc1NlcGFyYXRvciIsInRvZGF5QnV0dG9uIiwiY2xlYXJCdXR0b24iLCJwcmV2SHRtbCIsIm5leHRIdG1sIiwibmF2VGl0bGVzIiwiZGF5cyIsIiRib2R5IiwiJGRhdGVwaWNrZXJzQ29udGFpbmVyIiwiZGF0ZXBpY2tlciIsImNvbnRhaW5lckJ1aWx0IiwiZGVmYXVsdHMiLCJob3RLZXlzIiwiRGF0ZXBpY2tlciIsImNsYXNzZXMiLCJpbmxpbmUiLCJzdGFydERhdGUiLCJmaXJzdERheSIsIndlZWtlbmRzIiwiYWx0RmllbGQiLCJhbHRGaWVsZERhdGVGb3JtYXQiLCJ0b2dnbGVTZWxlY3RlZCIsImtleWJvYXJkTmF2IiwicG9zaXRpb24iLCJvZmZzZXQiLCJ2aWV3IiwibWluVmlldyIsInNob3dPdGhlck1vbnRocyIsInNlbGVjdE90aGVyTW9udGhzIiwibW92ZVRvT3RoZXJNb250aHNPblNlbGVjdCIsInNob3dPdGhlclllYXJzIiwic2VsZWN0T3RoZXJZZWFycyIsIm1vdmVUb090aGVyWWVhcnNPblNlbGVjdCIsIm1heERhdGUiLCJkaXNhYmxlTmF2V2hlbk91dE9mUmFuZ2UiLCJtdWx0aXBsZURhdGVzIiwicmFuZ2UiLCJzaG93RXZlbnQiLCJtb250aHNGaWVsZCIsIm1vbnRocyIsInllYXJzIiwidGltZXBpY2tlciIsIm9ubHlUaW1lcGlja2VyIiwiZGF0ZVRpbWVTZXBhcmF0b3IiLCJ0aW1lRm9ybWF0IiwibWluSG91cnMiLCJtYXhIb3VycyIsIm1pbk1pbnV0ZXMiLCJtYXhNaW51dGVzIiwiaG91cnNTdGVwIiwibWludXRlc1N0ZXAiLCJvblNlbGVjdCIsIm9uU2hvdyIsIm9uSGlkZSIsIm9uQ2hhbmdlTW9udGgiLCJvbkNoYW5nZVllYXIiLCJvbkNoYW5nZURlY2FkZSIsIm9uQ2hhbmdlVmlldyIsIm9uUmVuZGVyQ2VsbCIsImVsIiwib3B0aW9ucyIsInRoaXMiLCIkZWwiLCIkIiwib3B0cyIsImV4dGVuZCIsImRhdGEiLCJ1bmRlZmluZWQiLCJub2RlTmFtZSIsImVsSXNJbnB1dCIsIiRhbHRGaWVsZCIsImluaXRlZCIsInZpc2libGUiLCJzaWxlbnQiLCJjdXJyZW50RGF0ZSIsImN1cnJlbnRWaWV3IiwiX2NyZWF0ZVNob3J0Q3V0cyIsInNlbGVjdGVkRGF0ZXMiLCJ2aWV3cyIsImtleXMiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwiX3ByZXZPblNlbGVjdFZhbHVlIiwiaW5pdCIsIlZFUlNJT04iLCJ2aWV3SW5kZXhlcyIsIl9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyIiwiX2J1aWxkQmFzZUh0bWwiLCJfZGVmaW5lTG9jYWxlIiwiX3N5bmNXaXRoTWluTWF4RGF0ZXMiLCJfc2V0UG9zaXRpb25DbGFzc2VzIiwiX2JpbmRFdmVudHMiLCJfYmluZEtleWJvYXJkRXZlbnRzIiwiJGRhdGVwaWNrZXIiLCJvbiIsIl9vbk1vdXNlRG93bkRhdGVwaWNrZXIiLCJfb25Nb3VzZVVwRGF0ZXBpY2tlciIsImFkZENsYXNzIiwiZm4iLCJUaW1lcGlja2VyIiwiX2JpbmRUaW1lcGlja2VyRXZlbnRzIiwiQm9keSIsInNob3ciLCJuYXYiLCJOYXZpZ2F0aW9uIiwiX29uQ2xpY2tDZWxsIiwiX29uTW91c2VFbnRlckNlbGwiLCJfb25Nb3VzZUxlYXZlQ2VsbCIsIl9vblNob3dFdmVudCIsIl9vbk1vdXNlVXBFbCIsIl9vbkJsdXIiLCJfb25LZXlVcEdlbmVyYWwiLCJ3aW5kb3ciLCJfb25SZXNpemUiLCJfb25Nb3VzZVVwQm9keSIsIl9vbktleURvd24iLCJfb25LZXlVcCIsIl9vbkhvdEtleSIsIl9vblRpbWVDaGFuZ2UiLCJpc1dlZWtlbmQiLCJkYXkiLCJpbmRleE9mIiwibGFuZyIsImxvYyIsImNvbnNvbGUiLCJ3YXJuIiwicnUiLCJqb2luIiwiYm91bmRhcnkiLCJfZ2V0V29yZEJvdW5kYXJ5UmVnRXhwIiwibWF0Y2giLCJhbXBtIiwiYXBwZW5kIiwiJGFwcGVuZFRhcmdldCIsIiRpbmxpbmUiLCJpbnNlcnRBZnRlciIsImFwcGVuZFRvIiwiJGNvbnRlbnQiLCIkbmF2IiwiX3RyaWdnZXJPbkNoYW5nZSIsImxlbmd0aCIsImZvcm1hdHRlZERhdGVzIiwicGFyc2VkU2VsZWN0ZWQiLCJnZXRQYXJzZWREYXRlIiwiX3RoaXMiLCJkYXRlcyIsInllYXIiLCJtb250aCIsImRhdGUiLCJob3VycyIsIm1pbnV0ZXMiLCJtYXAiLCJmb3JtYXREYXRlIiwicGFyc2VkRGF0ZSIsIm5leHQiLCJjdXJEZWNhZGUiLCJwcmV2Iiwic3RyaW5nIiwidmFsaWRIb3VycyIsInJlc3VsdCIsImxvY2FsZSIsImxlYWRpbmdaZXJvIiwiZ2V0TGVhZGluZ1plcm9OdW0iLCJkZWNhZGUiLCJnZXREZWNhZGUiLCJmdWxsSG91cnMiLCJkYXlQZXJpb2QiLCJyZXBsYWNlciIsIl9yZXBsYWNlciIsIl9nZXRWYWxpZEhvdXJzRnJvbURhdGUiLCJ0ZXN0IiwicmVwbGFjZSIsImdldFRpbWUiLCJ0b1VwcGVyQ2FzZSIsImZ1bGxEYXRlIiwiZGF5c1Nob3J0IiwiZnVsbE1vbnRoIiwibW9udGhzU2hvcnQiLCJmdWxsTWludXRlcyIsInRvU3RyaW5nIiwic2xpY2UiLCJzdHIiLCJyZWciLCJwMSIsInAyIiwicDMiLCJzaWduIiwic3ltYm9scyIsIlJlZ0V4cCIsInNlbGVjdERhdGUiLCJsZW4iLCJuZXdEYXRlIiwiQXJyYXkiLCJpc0FycmF5IiwibGFzdFNlbGVjdGVkRGF0ZSIsIl9zZXRUaW1lIiwiX3RyaWdnZXIiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiX3JlbmRlciIsIl9pc1NlbGVjdGVkIiwicHVzaCIsImJpZ2dlciIsIl9zZXRJbnB1dFZhbHVlIiwidGltZXBpY2tlcklzQWN0aXZlIiwiaGlkZSIsInJlbW92ZURhdGUiLCJzZWxlY3RlZCIsInNvbWUiLCJjdXJEYXRlIiwiaXNTYW1lIiwic3BsaWNlIiwiY2xlYXIiLCJ1cGRhdGUiLCJwYXJhbSIsImFyZ3VtZW50cyIsIl9hZGRCdXR0b25zSWZOZWVkIiwic2V0UG9zaXRpb24iLCJfaGFuZGxlRGF0ZSIsIl91cGRhdGVSYW5nZXMiLCJfdXBkYXRlQ3VycmVudFRpbWUiLCJjdXJUaW1lIiwibWluVGltZSIsIm1heFRpbWUiLCJjaGVja0RhdGUiLCJjZWxsVHlwZSIsInJlcyIsImFsdFZhbHVlcyIsImZvcm1hdCIsImFsdEZvcm1hdCIsIl9pc0luUmFuZ2UiLCJ0eXBlIiwidGltZSIsIm1pbiIsIm1heCIsImRNaW5UaW1lIiwiZE1heFRpbWUiLCJ0eXBlcyIsIl9nZXREaW1lbnNpb25zIiwid2lkdGgiLCJvdXRlcldpZHRoIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJsZWZ0IiwidG9wIiwiX2dldERhdGVGcm9tQ2VsbCIsImNlbGwiLCJwb3MiLCJtYWluIiwic3BsaXQiLCJyZW1vdmVBdHRyIiwiZGltcyIsInNlbGZEaW1zIiwic2Vjb25kYXJ5IiwiY3NzIiwiX2JpbmRWaXNpb25FdmVudHMiLCJyZW1vdmVDbGFzcyIsImZvY3VzZWQiLCJpbkZvY3VzIiwiYmx1ciIsImRvd24iLCJfY2hhbmdlVmlldyIsInVwIiwiZXZlbnQiLCJvZmYiLCJvbmUiLCJkaXIiLCJuZXh0VmlldyIsInZpZXdJbmRleCIsIl9oYW5kbGVIb3RLZXkiLCJmb2N1c2VkUGFyc2VkIiwidG90YWxEYXlzSW5OZXh0TW9udGgiLCJfZ2V0Rm9jdXNlZERhdGUiLCJtb250aENoYW5nZWQiLCJ5ZWFyQ2hhbmdlZCIsImRlY2FkZUNoYW5nZWQiLCJ5IiwiZ2V0RGF5c0NvdW50IiwiX3JlZ2lzdGVyS2V5IiwiY3VyS2V5IiwiX3VuUmVnaXN0ZXJLZXkiLCJpbmRleCIsIl9pc0hvdEtleVByZXNzZWQiLCJjdXJyZW50SG90S2V5IiwiZm91bmQiLCJwcmVzc2VkS2V5cyIsInNvcnQiLCJob3RLZXkiLCJldmVyeSIsImFyZ3MiLCJ0cmlnZ2VyIiwiX2ZvY3VzTmV4dENlbGwiLCJrZXlDb2RlIiwibmQiLCJnZXREYXRlIiwiX2dldENlbGwiLCIkY2VsbCIsInNlbGVjdG9yIiwiZGVzdHJveSIsImNsb3Nlc3QiLCJyZW1vdmUiLCJfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMiLCJhbHJlYWR5U2VsZWN0ZWQiLCJzZWxlY3RlZERhdGUiLCJlIiwib3JpZ2luYWxFdmVudCIsInRpbWVwaWNrZXJGb2N1cyIsImZvY3VzIiwic2V0VGltZW91dCIsImNvZGUiLCJ3aGljaCIsInByZXZlbnREZWZhdWx0IiwiaGFzQ2xhc3MiLCJ0YXJnZXQiLCJsZXNzIiwiX3VwZGF0ZSIsImgiLCJfZm9jdXNlZCIsInByZXZWaWV3Iiwic3Vic3RyaW5nIiwiZ2V0RGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZmlyc3RZZWFyIiwiTWF0aCIsImZsb29yIiwidGVtcGxhdGUiLCJzb3VyY2UiLCJkYXRlMSIsImRhdGUyIiwiZDEiLCJkMiIsIl90eXBlIiwiZGF0ZUNvbXBhcmVUbyIsIm51bSIsInBhcnNlSW50IiwicmVzZXRUaW1lIiwiZWFjaCIsIkNvbnN0cnVjdG9yIiwiZGF5c01pbiIsInRlbXBsYXRlcyIsImRwIiwicHJveHkiLCIkbmFtZXMiLCIkY2VsbHMiLCJfZ2V0RGF5TmFtZXNIdG1sIiwiY3VyRGF5IiwiaHRtbCIsIl9nZXRDZWxsQ29udGVudHMiLCJyZW5kZXIiLCJkaXNhYmxlZCIsIl9nZXREYXlzSHRtbCIsInRvdGFsTW9udGhEYXlzIiwiZmlyc3RNb250aERheSIsImxhc3RNb250aERheSIsImRheXNGcm9tUGV2TW9udGgiLCJkYXlzRnJvbU5leHRNb250aCIsIl9nZXREYXlIdG1sIiwiY29udGVudCIsIl9nZXRNb250aHNIdG1sIiwiX2dldE1vbnRoSHRtbCIsIl9nZXRZZWFyc0h0bWwiLCJfZ2V0WWVhckh0bWwiLCJfcmVuZGVyVHlwZXMiLCJkYXlOYW1lcyIsImFjaXR2ZSIsImFjdGl2ZSIsIl9oYW5kbGVDbGljayIsIiRidXR0b25zQ29udGFpbmVyIiwiX29uQ2xpY2tOYXZCdXR0b24iLCJfb25DbGlja05hdlRpdGxlIiwiX2FkZEJ1dHRvbiIsInRpdGxlIiwiX2dldFRpdGxlIiwic2V0TmF2U3RhdHVzIiwiX2FkZEJ1dHRvbnNDb250YWluZXIiLCJhY3Rpb24iLCJsYWJlbCIsIl9kaXNhYmxlTmF2IiwiX2FjdGl2YXRlTmF2IiwiaW5zdCIsIl9idWlsZEhUTUwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfb25TZWxlY3REYXRlIiwiJHJhbmdlcyIsIl9vbkNoYW5nZVJhbmdlIiwiX29uTW91c2VVcFJhbmdlIiwiX29uTW91c2VFbnRlclJhbmdlIiwiX29uTW91c2VPdXRSYW5nZSIsIl9kYXRlIiwiX3NldE1pblRpbWVGcm9tRGF0ZSIsIl9zZXRNYXhUaW1lRnJvbURhdGUiLCJfc2V0RGVmYXVsdE1pbk1heFRpbWUiLCJfdmFsaWRhdGVIb3Vyc01pbnV0ZXMiLCJseiIsImhvdXJNaW4iLCJob3VyTWF4IiwiaG91clN0ZXAiLCJob3VyVmFsdWUiLCJob3VyVmlzaWJsZSIsImRpc3BsYXlIb3VycyIsIm1pbk1pbiIsIm1pbk1heCIsIm1pblN0ZXAiLCJtaW5WYWx1ZSIsIl90ZW1wbGF0ZSIsIiR0aW1lcGlja2VyIiwiJGhvdXJzIiwiJG1pbnV0ZXMiLCIkaG91cnNUZXh0IiwiJG1pbnV0ZXNUZXh0IiwiJGFtcG0iLCJfaG91cnMiLCIkdGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRhaW5zIiwiYWRkIiwiZmlmaV9zbGlkZXIiLCJzbGlkZXJfcGx1Z2luIiwic2V0dGluZ3MiLCJfIiwiZGVmIiwiZG90c1dyYXBwZXIiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwidHJhbnNpdGlvbiIsInNwZWVkIiwiZWFzaW5nIiwic3dpcGUiLCJhdXRvSGVpZ2h0IiwiYWZ0ZXJDaGFuZ2VTbGlkZSIsIl9kZWYiLCJhZGRvbnMiLCJwcm9wIiwiJGV4dGVuZE9iaiIsImJ1aWxkRG90cyIsInRvdGFsU2xpZGVzIiwiZG90IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3VyU2xpZGUiLCJnZXRBdHRyaWJ1dGUiLCJnb3RvU2xpZGUiLCJnZXRDdXJMZWZ0IiwiY3VyTGVmdCIsInNsaWRlcklubmVyIiwic3R5bGUiLCJzbGlkZVciLCJzZXREb3QiLCJhbGxTbGlkZXMiLCJvZmZzZXRIZWlnaHQiLCJsb2FkZWRJbWciLCJsb2FkZWQiLCJsb2FkSGFuZGxlciIsImxvYWRlZENudCIsInVwZGF0ZVNsaWRlckRpbWVuc2lvbiIsImltZyIsIm9ubG9hZCIsInNyYyIsImRpc3BsYXkiLCJjb21wbGV0ZSIsImNsb25lRmlyc3QiLCJjbG9uZU5vZGUiLCJjbG9uZUxhc3QiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiX2kiLCJhZGRMaXN0ZW5lck11bHRpIiwicmVtb3ZlTGlzdGVuZXJNdWx0aSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzd2lwZU1vdmUiLCJ0b3VjaCIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIm1vdmVYIiwicGFnZVgiLCJtb3ZlWSIsInBhZ2VZIiwiYWJzIiwic3RhcnRYIiwiaXNBbmltYXRpbmciLCJzd2lwZUVuZCIsInN0YXlBdEN1ciIsInN0YXJ0WSIsImluaXRBcnJvd3MiLCJ0YXJkb3QiLCJqIiwiaXRlbSIsInJhbmdlQ29uZmlnIiwiYWRkQnRuIiwiYWRkRHJvcGRvd24iLCJ0b2dnbGVDbGFzcyIsImNvbWZvcnREZWZhdWx0T3B0aW9ucyIsIiRidXR0b24iLCJ0YXJnZXRJbnB1dCIsImd1ZXN0c0RlZmF1bHRPcHRpb25zIiwiZ3Vlc3RzQ291bnQiLCJOdW1iZXIiLCJzbGlkZXIiLCJhbmltYXRlIiwic3RlcCIsInZhbHVlcyIsInN0b3AiLCJ1aSIsInNsaWRlIiwiY2hhbmdlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMv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QUUsaUJBQWlCMUUsSUFBSTBFLEVBQUUsV0FBV3ViLE9BQU8sU0FBUyxJQUNwRHZiLEVBQUUsaUJBQWlCMUUsSUFBSTBFLEVBQUUsV0FBV3ViLE9BQU8sU0FBUyxPQUsxRCxJQUFJM1EsRUFBTTVLLEVBQUUsV0FBV3ViLE9BQU8sU0FBVSxHQUNwQzFRLEVBQU03SyxFQUFFLFdBQVd1YixPQUFPLFNBQVUsR0FDeEN2YixFQUFFLGlCQUFpQjFFLElBQUlzUCxHQUN2QjVLLEVBQUUsaUJBQWlCMUUsSUFBSXVQLEdBRXZCN0ssRUFBRyxpQkFBa0I4YixRQUFPLFdBQzFCOWIsRUFBRSxXQUFXdWIsT0FBTyxTQUFVLEVBQUd2YixFQUFFRixNQUFNeEUsVUFHM0MwRSxFQUFHLGlCQUFrQjhiLFFBQU8sV0FDMUI5YixFQUFFLFdBQVd1YixPQUFPLFNBQVUsRUFBR3ZiLEVBQUVGLE1BQU14RSIsImZpbGUiOiJzZWFyY2guYzAxZDQzN2E1ZTBkZmQ0NWViNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTcpO1xuIiwiZXhwb3J0IGNvbnN0IHRvZ2dsZSA9IChlbGVtLCBjbGFzc05hbWUpID0+IHtcbiAgZWxlbS5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7XG59O1xuXG4vLyBWYWxpZGF0aW9uXG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgdmFsaWRpdHlTdGF0ZV9vYmplY3QgPSBpbnB1dC52YWxpZGl0eTtcbiAgaWYgKHZhbGlkaXR5U3RhdGVfb2JqZWN0LnR5cGVNaXNtYXRjaCkge1xuICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1BsZWFzZSwgZW50ZXIgYW4gaW50ZWdlcicpO1xuICAgaW5wdXQucmVwb3J0VmFsaWRpdHkoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5yYW5nZVVuZGVyZmxvdykge1xuICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1dlIG5lZWQgYSBoaWdoZXIgbnVtYmVyIScpO1xuICAgaW5wdXQucmVwb3J0VmFsaWRpdHkoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5yYW5nZU92ZXJmbG93KSB7XG4gICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnVGhhdHMgdG9vIGhpZ2ghJyk7XG4gICBpbnB1dC5yZXBvcnRWYWxpZGl0eSgpO1xuICB9IGVsc2Uge1xuICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuICAgaW5wdXQucmVwb3J0VmFsaWRpdHkoKTtcbiAgfVxufTtcblxuY29uc3QgY3VzdG9tSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlbGVjdF9fZHJvcGRvd24taW5wdXQnKTtcblxuY3VzdG9tSW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbihldnQpe1xuICAgIHZhbGlkYXRlKGlucHV0KTtcbiAgfSk7XG59KTtcblxuLy8gTnVtYmVyc1xuZXhwb3J0IGNvbnN0IElOSVRJQUxfVkFMVUUgPSAyO1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRPcHRpb25zID0gKElEcykgPT4ge1xuICByZXR1cm4ge1xuICAgZmlyc3Q6IHtcbiAgICAgaWQ6IElEc1swXSxcbiAgICAgYW1vdW50IDogSU5JVElBTF9WQUxVRSxcbiAgIH0sXG4gICBzZWNvbmQ6IHtcbiAgICAgaWQ6IElEc1sxXSxcbiAgICAgYW1vdW50OiBJTklUSUFMX1ZBTFVFLFxuICAgfSxcbiAgIHRoaXJkOiB7XG4gICAgIGlkOiBJRHNbMl0sXG4gICAgIGFtb3VudDogMCxcbiAgIH1cbiB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZU9wdGlvbnMgPSAoRGVmYXVsdE9wdGlvbnMsIGlucHV0SUQsIG5ld1ZhbCkgPT4ge1xuICBpZiAoaW5wdXRJRCA9PT0gRGVmYXVsdE9wdGlvbnMuZmlyc3QuaWQpIHtcbiAgICBEZWZhdWx0T3B0aW9ucy5maXJzdC5hbW91bnQgPSBuZXdWYWw7XG4gIH0gZWxzZSBpZiAoaW5wdXRJRCA9PT0gRGVmYXVsdE9wdGlvbnMuc2Vjb25kLmlkKSB7XG4gICAgRGVmYXVsdE9wdGlvbnMuc2Vjb25kLmFtb3VudCA9IG5ld1ZhbDtcbiAgfSBlbHNlIGlmIChpbnB1dElEID09PSBEZWZhdWx0T3B0aW9ucy50aGlyZC5pZCkge1xuICAgIERlZmF1bHRPcHRpb25zLnRoaXJkLmFtb3VudCA9IG5ld1ZhbDtcbiAgfVxuICByZXR1cm47XG59O1xuXG5cbmV4cG9ydCBjb25zdCBzd2l0Y2hBbW91bnQgPSAoYnV0dG9uLCBpbnB1dCkgPT4ge1xuICB2YXIgb2xkVmFsdWUgPSBidXR0b24ucGFyZW50KCkuZmluZChcImlucHV0XCIpLnZhbCgpO1xuICBpZiAoYnV0dG9uLnRleHQoKSA9PSBcIitcIikge1xuICAgIHZhciBuZXdWYWwgPSBwYXJzZUZsb2F0KG9sZFZhbHVlKSArIDEgPCBpbnB1dC5hdHRyKCdtYXgnKSA/IHBhcnNlRmxvYXQob2xkVmFsdWUpICsgMSA6IGlucHV0LmF0dHIoJ21heCcpO1xuICB9IGVsc2Uge1xuICAgLy8gRG9uJ3QgYWxsb3cgZGVjcmVtZW50aW5nIGJlbG93IHplcm9cbiAgICBpZiAob2xkVmFsdWUgPiAwKSB7XG4gICAgICB2YXIgbmV3VmFsID0gcGFyc2VGbG9hdChvbGRWYWx1ZSkgLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdWYWwgPSAwO1xuICAgIH1cbiAgfVxuICBpbnB1dC52YWwobmV3VmFsKTtcbiAgcmV0dXJuIG5ld1ZhbDtcbn07XG5cblxuIiwiaW1wb3J0ICdhaXItZGF0ZXBpY2tlcic7XG5cbmV4cG9ydCBjb25zdCBkYXRlUGlja2VyQ29uZmlnID0ge1xuICBsYW5ndWFnZToge1xuICAgIHRvZGF5OiAn0J/RgNC40LzQtdC90LjRgtGMJyxcbiAgfSxcbiAgYXV0b0Nsb3NlOiB0cnVlLFxuICBtaW5EYXRlOiBuZXcgRGF0ZSgpLFxuICBkYXRlRm9ybWF0OiBcImRkIE1cIixcbiAgbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjogXCIgLSBcIixcbiAgdG9kYXlCdXR0b246IHRydWUsXG4gIGNsZWFyQnV0dG9uOiB0cnVlLFxuICBwcmV2SHRtbDogJzxzdmcgd2lkdGg9XCIxN1wiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAxNyAxOFwiPjxwYXRoIGQ9XCJNMTYuMTc1NSA4LjAxNTYyVjkuOTg0MzhIMy45ODgwMUw5LjU2NjEzIDE1LjYwOTRMOC4xNTk4OCAxNy4wMTU2TDAuMTQ0MjU4IDlMOC4xNTk4OCAwLjk4NDM3NUw5LjU2NjEzIDIuMzkwNjJMMy45ODgwMSA4LjAxNTYySDE2LjE3NTVaXCIgZmlsbD1cIiNCQzlDRkZcIj48L3BhdGg+PC9zdmc+JyxcbiAgbmV4dEh0bWw6ICc8c3ZnIHdpZHRoPVwiMTdcIiBoZWlnaHQ9XCIxOFwiIHZpZXdCb3g9XCIwIDAgMTcgMThcIj48cGF0aCBkPVwiTTguMzYzMDEgMC45ODQzNzVMMTYuMzc4NiA5TDguMzYzMDEgMTcuMDE1Nkw2Ljk1Njc2IDE1LjYwOTRMMTIuNTM0OSA5Ljk4NDM4SDAuMzQ3MzgzVjguMDE1NjJIMTIuNTM0OUw2Ljk1Njc2IDIuMzkwNjJMOC4zNjMwMSAwLjk4NDM3NVpcIiBmaWxsPVwiI0JDOUNGRlwiPjwvcGF0aD48L3N2Zz4nLFxuICBuYXZUaXRsZXM6IHtcbiAgICBkYXlzOiAnTU0gIDxpPnl5eXk8L2k+JyxcbiAgfSxcbn07XG4iLCJyZXF1aXJlKCcuL2RhdGVwaWNrZXInKTtcclxucmVxdWlyZSgnLi9ib2R5Jyk7XHJcbnJlcXVpcmUoJy4vbmF2aWdhdGlvbicpO1xyXG5yZXF1aXJlKCcuL3RpbWVwaWNrZXInKTsiLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBWRVJTSU9OID0gJzIuMi4zJyxcclxuICAgICAgICBwbHVnaW5OYW1lID0gJ2RhdGVwaWNrZXInLFxyXG4gICAgICAgIGF1dG9Jbml0U2VsZWN0b3IgPSAnLmRhdGVwaWNrZXItaGVyZScsXHJcbiAgICAgICAgJGJvZHksICRkYXRlcGlja2Vyc0NvbnRhaW5lcixcclxuICAgICAgICBjb250YWluZXJCdWlsdCA9IGZhbHNlLFxyXG4gICAgICAgIGJhc2VUZW1wbGF0ZSA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyXCI+JyArXHJcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImRhdGVwaWNrZXItLXBvaW50ZXJcIj48L2k+JyArXHJcbiAgICAgICAgICAgICc8bmF2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2XCI+PC9uYXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY29udGVudFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICBkZWZhdWx0cyA9IHtcclxuICAgICAgICAgICAgY2xhc3NlczogJycsXHJcbiAgICAgICAgICAgIGlubGluZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGxhbmd1YWdlOiAncnUnLFxyXG4gICAgICAgICAgICBzdGFydERhdGU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgIGZpcnN0RGF5OiAnJyxcclxuICAgICAgICAgICAgd2Vla2VuZHM6IFs2LCAwXSxcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogJycsXHJcbiAgICAgICAgICAgIGFsdEZpZWxkOiAnJyxcclxuICAgICAgICAgICAgYWx0RmllbGREYXRlRm9ybWF0OiAnQCcsXHJcbiAgICAgICAgICAgIHRvZ2dsZVNlbGVjdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBrZXlib2FyZE5hdjogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tIGxlZnQnLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IDEyLFxyXG5cclxuICAgICAgICAgICAgdmlldzogJ2RheXMnLFxyXG4gICAgICAgICAgICBtaW5WaWV3OiAnZGF5cycsXHJcblxyXG4gICAgICAgICAgICBzaG93T3RoZXJNb250aHM6IHRydWUsXHJcbiAgICAgICAgICAgIHNlbGVjdE90aGVyTW9udGhzOiB0cnVlLFxyXG4gICAgICAgICAgICBtb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0OiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgc2hvd090aGVyWWVhcnM6IHRydWUsXHJcbiAgICAgICAgICAgIHNlbGVjdE90aGVyWWVhcnM6IHRydWUsXHJcbiAgICAgICAgICAgIG1vdmVUb090aGVyWWVhcnNPblNlbGVjdDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIG1pbkRhdGU6ICcnLFxyXG4gICAgICAgICAgICBtYXhEYXRlOiAnJyxcclxuICAgICAgICAgICAgZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlOiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgbXVsdGlwbGVEYXRlczogZmFsc2UsIC8vIEJvb2xlYW4gb3IgTnVtYmVyXHJcbiAgICAgICAgICAgIG11bHRpcGxlRGF0ZXNTZXBhcmF0b3I6ICcsJyxcclxuICAgICAgICAgICAgcmFuZ2U6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgdG9kYXlCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICBjbGVhckJ1dHRvbjogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICBzaG93RXZlbnQ6ICdmb2N1cycsXHJcbiAgICAgICAgICAgIGF1dG9DbG9zZTogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICAvLyBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgIG1vbnRoc0ZpZWxkOiAnbW9udGhzU2hvcnQnLFxyXG4gICAgICAgICAgICBwcmV2SHRtbDogJzxzdmc+PHBhdGggZD1cIk0gMTcsMTIgbCAtNSw1IGwgNSw1XCI+PC9wYXRoPjwvc3ZnPicsXHJcbiAgICAgICAgICAgIG5leHRIdG1sOiAnPHN2Zz48cGF0aCBkPVwiTSAxNCwxMiBsIDUsNSBsIC01LDVcIj48L3BhdGg+PC9zdmc+JyxcclxuICAgICAgICAgICAgbmF2VGl0bGVzOiB7XHJcbiAgICAgICAgICAgICAgICBkYXlzOiAnTU0sIDxpPnl5eXk8L2k+JyxcclxuICAgICAgICAgICAgICAgIG1vbnRoczogJ3l5eXknLFxyXG4gICAgICAgICAgICAgICAgeWVhcnM6ICd5eXl5MSAtIHl5eXkyJ1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gdGltZXBpY2tlclxyXG4gICAgICAgICAgICB0aW1lcGlja2VyOiBmYWxzZSxcclxuICAgICAgICAgICAgb25seVRpbWVwaWNrZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYXRlVGltZVNlcGFyYXRvcjogJyAnLFxyXG4gICAgICAgICAgICB0aW1lRm9ybWF0OiAnJyxcclxuICAgICAgICAgICAgbWluSG91cnM6IDAsXHJcbiAgICAgICAgICAgIG1heEhvdXJzOiAyNCxcclxuICAgICAgICAgICAgbWluTWludXRlczogMCxcclxuICAgICAgICAgICAgbWF4TWludXRlczogNTksXHJcbiAgICAgICAgICAgIGhvdXJzU3RlcDogMSxcclxuICAgICAgICAgICAgbWludXRlc1N0ZXA6IDEsXHJcblxyXG4gICAgICAgICAgICAvLyBldmVudHNcclxuICAgICAgICAgICAgb25TZWxlY3Q6ICcnLFxyXG4gICAgICAgICAgICBvblNob3c6ICcnLFxyXG4gICAgICAgICAgICBvbkhpZGU6ICcnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZU1vbnRoOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VZZWFyOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VEZWNhZGU6ICcnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZVZpZXc6ICcnLFxyXG4gICAgICAgICAgICBvblJlbmRlckNlbGw6ICcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBob3RLZXlzID0ge1xyXG4gICAgICAgICAgICAnY3RybFJpZ2h0JzogWzE3LCAzOV0sXHJcbiAgICAgICAgICAgICdjdHJsVXAnOiBbMTcsIDM4XSxcclxuICAgICAgICAgICAgJ2N0cmxMZWZ0JzogWzE3LCAzN10sXHJcbiAgICAgICAgICAgICdjdHJsRG93bic6IFsxNywgNDBdLFxyXG4gICAgICAgICAgICAnc2hpZnRSaWdodCc6IFsxNiwgMzldLFxyXG4gICAgICAgICAgICAnc2hpZnRVcCc6IFsxNiwgMzhdLFxyXG4gICAgICAgICAgICAnc2hpZnRMZWZ0JzogWzE2LCAzN10sXHJcbiAgICAgICAgICAgICdzaGlmdERvd24nOiBbMTYsIDQwXSxcclxuICAgICAgICAgICAgJ2FsdFVwJzogWzE4LCAzOF0sXHJcbiAgICAgICAgICAgICdhbHRSaWdodCc6IFsxOCwgMzldLFxyXG4gICAgICAgICAgICAnYWx0TGVmdCc6IFsxOCwgMzddLFxyXG4gICAgICAgICAgICAnYWx0RG93bic6IFsxOCwgNDBdLFxyXG4gICAgICAgICAgICAnY3RybFNoaWZ0VXAnOiBbMTYsIDE3LCAzOF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGVwaWNrZXI7XHJcblxyXG4gICAgdmFyIERhdGVwaWNrZXIgID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsO1xyXG4gICAgICAgIHRoaXMuJGVsID0gJChlbCk7XHJcblxyXG4gICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgb3B0aW9ucywgdGhpcy4kZWwuZGF0YSgpKTtcclxuXHJcbiAgICAgICAgaWYgKCRib2R5ID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAkYm9keSA9ICQoJ2JvZHknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLnN0YXJ0RGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdHMuc3RhcnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsLm5vZGVOYW1lID09ICdJTlBVVCcpIHtcclxuICAgICAgICAgICAgdGhpcy5lbElzSW5wdXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5hbHRGaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLiRhbHRGaWVsZCA9IHR5cGVvZiB0aGlzLm9wdHMuYWx0RmllbGQgPT0gJ3N0cmluZycgPyAkKHRoaXMub3B0cy5hbHRGaWVsZCkgOiB0aGlzLm9wdHMuYWx0RmllbGQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmluaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7IC8vIE5lZWQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZW5kZXJpbmdcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IHRoaXMub3B0cy5zdGFydERhdGU7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHRoaXMub3B0cy52aWV3O1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZVNob3J0Q3V0cygpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMudmlld3MgPSB7fTtcclxuICAgICAgICB0aGlzLmtleXMgPSBbXTtcclxuICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlID0gJyc7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdCgpXHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIgPSBEYXRlcGlja2VyO1xyXG5cclxuICAgIGRhdGVwaWNrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIFZFUlNJT046IFZFUlNJT04sXHJcbiAgICAgICAgdmlld0luZGV4ZXM6IFsnZGF5cycsICdtb250aHMnLCAneWVhcnMnXSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5lckJ1aWx0ICYmICF0aGlzLm9wdHMuaW5saW5lICYmIHRoaXMuZWxJc0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRCYXNlSHRtbCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZpbmVMb2NhbGUodGhpcy5vcHRzLmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxJc0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5pbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZXh0cmEgY2xhc3NlcyBmb3IgcHJvcGVyIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb25DbGFzc2VzKHRoaXMub3B0cy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZEV2ZW50cygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLmtleWJvYXJkTmF2ICYmICF0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kS2V5Ym9hcmRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub24oJ21vdXNlZG93bicsIHRoaXMuX29uTW91c2VEb3duRGF0ZXBpY2tlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub24oJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXBEYXRlcGlja2VyLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3ModGhpcy5vcHRzLmNsYXNzZXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyID0gbmV3ICQuZm4uZGF0ZXBpY2tlci5UaW1lcGlja2VyKHRoaXMsIHRoaXMub3B0cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVGltZXBpY2tlckV2ZW50cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKCctb25seS10aW1lcGlja2VyLScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddID0gbmV3ICQuZm4uZGF0ZXBpY2tlci5Cb2R5KHRoaXMsIHRoaXMuY3VycmVudFZpZXcsIHRoaXMub3B0cyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzLm5hdiA9IG5ldyAkLmZuLmRhdGVwaWNrZXIuTmF2aWdhdGlvbih0aGlzLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLmN1cnJlbnRWaWV3O1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2NsaWNrQ2VsbC5hZHAnLCB0aGlzLl9vbkNsaWNrQ2VsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbignbW91c2VlbnRlcicsICcuZGF0ZXBpY2tlci0tY2VsbCcsIHRoaXMuX29uTW91c2VFbnRlckNlbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub24oJ21vdXNlbGVhdmUnLCAnLmRhdGVwaWNrZXItLWNlbGwnLCB0aGlzLl9vbk1vdXNlTGVhdmVDZWxsLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jcmVhdGVTaG9ydEN1dHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5taW5EYXRlID0gdGhpcy5vcHRzLm1pbkRhdGUgPyB0aGlzLm9wdHMubWluRGF0ZSA6IG5ldyBEYXRlKC04NjM5OTk5OTEzNjAwMDAwKTtcclxuICAgICAgICAgICAgdGhpcy5tYXhEYXRlID0gdGhpcy5vcHRzLm1heERhdGUgPyB0aGlzLm9wdHMubWF4RGF0ZSA6IG5ldyBEYXRlKDg2Mzk5OTk5MTM2MDAwMDApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kRXZlbnRzIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbih0aGlzLm9wdHMuc2hvd0V2ZW50ICsgJy5hZHAnLCB0aGlzLl9vblNob3dFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ21vdXNldXAuYWRwJywgdGhpcy5fb25Nb3VzZVVwRWwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdibHVyLmFkcCcsIHRoaXMuX29uQmx1ci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2tleXVwLmFkcCcsIHRoaXMuX29uS2V5VXBHZW5lcmFsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5hZHAnLCB0aGlzLl9vblJlc2l6ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJCgnYm9keScpLm9uKCdtb3VzZXVwLmFkcCcsIHRoaXMuX29uTW91c2VVcEJvZHkuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRLZXlib2FyZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigna2V5ZG93bi5hZHAnLCB0aGlzLl9vbktleURvd24uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdrZXl1cC5hZHAnLCB0aGlzLl9vbktleVVwLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignaG90S2V5LmFkcCcsIHRoaXMuX29uSG90S2V5LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kVGltZXBpY2tlckV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigndGltZUNoYW5nZS5hZHAnLCB0aGlzLl9vblRpbWVDaGFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNXZWVrZW5kOiBmdW5jdGlvbiAoZGF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHMud2Vla2VuZHMuaW5kZXhPZihkYXkpICE9PSAtMTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGVmaW5lTG9jYWxlOiBmdW5jdGlvbiAobGFuZykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxhbmcgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jID0gJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW2xhbmddO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2FuXFwndCBmaW5kIGxhbmd1YWdlIFwiJyArIGxhbmcgKyAnXCIgaW4gRGF0ZXBpY2tlci5sYW5ndWFnZSwgd2lsbCB1c2UgXCJydVwiIGluc3RlYWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1LCAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2VbbGFuZ10pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUsIGxhbmcpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZGF0ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZGF0ZUZvcm1hdCA9IHRoaXMub3B0cy5kYXRlRm9ybWF0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MudGltZUZvcm1hdCA9IHRoaXMub3B0cy50aW1lRm9ybWF0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZmlyc3REYXkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy5maXJzdERheSA9IHRoaXMub3B0cy5maXJzdERheVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLmRhdGVGb3JtYXQgPSBbdGhpcy5sb2MuZGF0ZUZvcm1hdCwgdGhpcy5sb2MudGltZUZvcm1hdF0uam9pbih0aGlzLm9wdHMuZGF0ZVRpbWVTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy5kYXRlRm9ybWF0ID0gdGhpcy5sb2MudGltZUZvcm1hdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5fZ2V0V29yZEJvdW5kYXJ5UmVnRXhwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sb2MudGltZUZvcm1hdC5tYXRjaChib3VuZGFyeSgnYWEnKSkgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLnRpbWVGb3JtYXQubWF0Y2goYm91bmRhcnkoJ0FBJykpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICB0aGlzLmFtcG0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyQnVpbHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAkYm9keS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJkYXRlcGlja2Vycy1jb250YWluZXJcIiBpZD1cImRhdGVwaWNrZXJzLWNvbnRhaW5lclwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAkZGF0ZXBpY2tlcnNDb250YWluZXIgPSAkKCcjZGF0ZXBpY2tlcnMtY29udGFpbmVyJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2J1aWxkQmFzZUh0bWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyICRhcHBlbmRUYXJnZXQsXHJcbiAgICAgICAgICAgICAgICAkaW5saW5lID0gJCgnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItaW5saW5lXCI+Jyk7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLmVsLm5vZGVOYW1lID09ICdJTlBVVCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLmlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRhcHBlbmRUYXJnZXQgPSAkZGF0ZXBpY2tlcnNDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRhcHBlbmRUYXJnZXQgPSAkaW5saW5lLmluc2VydEFmdGVyKHRoaXMuJGVsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGFwcGVuZFRhcmdldCA9ICRpbmxpbmUuYXBwZW5kVG8odGhpcy4kZWwpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIgPSAkKGJhc2VUZW1wbGF0ZSkuYXBwZW5kVG8oJGFwcGVuZFRhcmdldCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNvbnRlbnQgPSAkKCcuZGF0ZXBpY2tlci0tY29udGVudCcsIHRoaXMuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRuYXYgPSAkKCcuZGF0ZXBpY2tlci0tbmF2JywgdGhpcy4kZGF0ZXBpY2tlcik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3RyaWdnZXJPbkNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZnJvbSB0cmlnZ2VyaW5nIG11bHRpcGxlIG9uU2VsZWN0IGNhbGxiYWNrIHdpdGggc2FtZSBhcmd1bWVudCAoZW1wdHkgc3RyaW5nKSBpbiBJRTEwLTExXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPT09ICcnKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0cy5vblNlbGVjdCgnJywgJycsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWREYXRlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHNlbGVjdGVkRGF0ZXNbMF0pLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBkYXRlcyA9IG5ldyBEYXRlKFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLnllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQubW9udGgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQuZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC5ob3VycyxcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC5taW51dGVzXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGVzID0gc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0RGF0ZShfdGhpcy5sb2MuZGF0ZUZvcm1hdCwgZGF0ZSlcclxuICAgICAgICAgICAgICAgIH0pLmpvaW4odGhpcy5vcHRzLm11bHRpcGxlRGF0ZXNTZXBhcmF0b3IpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBkYXRlcyBhcnJheSwgdG8gc2VwYXJhdGUgaXQgZnJvbSBvcmlnaW5hbCBzZWxlY3RlZERhdGVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMubXVsdGlwbGVEYXRlcyB8fCB0aGlzLm9wdHMucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGRhdGVzID0gc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWREYXRlID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLm1vbnRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLmRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUubWludXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSA9IGZvcm1hdHRlZERhdGVzO1xyXG4gICAgICAgICAgICB0aGlzLm9wdHMub25TZWxlY3QoZm9ybWF0dGVkRGF0ZXMsIGRhdGVzLCB0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0cztcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCArIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlTW9udGgpIG8ub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsIHRoaXMucGFyc2VkRGF0ZS55ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRocyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyICsgMSwgZC5tb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VZZWFyKSBvLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyICsgMTAsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlRGVjYWRlKSBvLm9uQ2hhbmdlRGVjYWRlKHRoaXMuY3VyRGVjYWRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHByZXY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRzO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VNb250aCkgby5vbkNoYW5nZU1vbnRoKHRoaXMucGFyc2VkRGF0ZS5tb250aCwgdGhpcy5wYXJzZWREYXRlLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIgLSAxLCBkLm1vbnRoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZVllYXIpIG8ub25DaGFuZ2VZZWFyKHRoaXMucGFyc2VkRGF0ZS55ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIgLSAxMCwgMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VEZWNhZGUpIG8ub25DaGFuZ2VEZWNhZGUodGhpcy5jdXJEZWNhZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24gKHN0cmluZywgZGF0ZSkge1xyXG4gICAgICAgICAgICBkYXRlID0gZGF0ZSB8fCB0aGlzLmRhdGU7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBib3VuZGFyeSA9IHRoaXMuX2dldFdvcmRCb3VuZGFyeVJlZ0V4cCxcclxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IHRoaXMubG9jLFxyXG4gICAgICAgICAgICAgICAgbGVhZGluZ1plcm8gPSBkYXRlcGlja2VyLmdldExlYWRpbmdaZXJvTnVtLFxyXG4gICAgICAgICAgICAgICAgZGVjYWRlID0gZGF0ZXBpY2tlci5nZXREZWNhZGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgZnVsbEhvdXJzID0gZC5mdWxsSG91cnMsXHJcbiAgICAgICAgICAgICAgICBob3VycyA9IGQuaG91cnMsXHJcbiAgICAgICAgICAgICAgICBhbXBtID0gc3RyaW5nLm1hdGNoKGJvdW5kYXJ5KCdhYScpKSB8fCBzdHJpbmcubWF0Y2goYm91bmRhcnkoJ0FBJykpLFxyXG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gJ2FtJyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VyID0gdGhpcy5fcmVwbGFjZXIsXHJcbiAgICAgICAgICAgICAgICB2YWxpZEhvdXJzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyICYmIHRoaXMudGltZXBpY2tlciAmJiBhbXBtKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZEhvdXJzID0gdGhpcy50aW1lcGlja2VyLl9nZXRWYWxpZEhvdXJzRnJvbURhdGUoZGF0ZSwgYW1wbSk7XHJcbiAgICAgICAgICAgICAgICBmdWxsSG91cnMgPSBsZWFkaW5nWmVybyh2YWxpZEhvdXJzLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gdmFsaWRIb3Vycy5ob3VycztcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9IHZhbGlkSG91cnMuZGF5UGVyaW9kO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgL0AvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvQC8sIGRhdGUuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2FhLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnYWEnKSwgZGF5UGVyaW9kKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL0FBLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnQUEnKSwgZGF5UGVyaW9kLnRvVXBwZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvZGQvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdkZCcpLCBkLmZ1bGxEYXRlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2QvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdkJyksIGQuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9ERC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ0REJyksIGxvY2FsZS5kYXlzW2QuZGF5XSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9ELy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnRCcpLCBsb2NhbGUuZGF5c1Nob3J0W2QuZGF5XSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9tbS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ21tJyksIGQuZnVsbE1vbnRoKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL20vLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdtJyksIGQubW9udGggKyAxKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL01NLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnTU0nKSwgdGhpcy5sb2MubW9udGhzW2QubW9udGhdKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL00vLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdNJyksIGxvY2FsZS5tb250aHNTaG9ydFtkLm1vbnRoXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9paS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2lpJyksIGQuZnVsbE1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvaS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2knKSwgZC5taW51dGVzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2hoLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnaGgnKSwgZnVsbEhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2gvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdoJyksIGhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL3l5eXkvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eXl5JyksIGQueWVhcik7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC95eXl5MS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ3l5eXkxJyksIGRlY2FkZVswXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC95eXl5Mi8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ3l5eXkyJyksIGRlY2FkZVsxXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC95eS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ3l5JyksIGQueWVhci50b1N0cmluZygpLnNsaWNlKC0yKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlcGxhY2VyOiBmdW5jdGlvbiAoc3RyLCByZWcsIGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZywgZnVuY3Rpb24gKG1hdGNoLCBwMSxwMixwMykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHAxICsgZGF0YSArIHAzO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRXb3JkQm91bmRhcnlSZWdFeHA6IGZ1bmN0aW9uIChzaWduKSB7XHJcbiAgICAgICAgICAgIHZhciBzeW1ib2xzID0gJ1xcXFxzfFxcXFwufC18L3xcXFxcXFxcXHwsfFxcXFwkfFxcXFwhfFxcXFw/fDp8Oyc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnKF58PnwnICsgc3ltYm9scyArICcpKCcgKyBzaWduICsgJykoJHw8fCcgKyBzeW1ib2xzICsgJyknLCAnZycpO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICBzZWxlY3REYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IF90aGlzLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBkID0gX3RoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZXMgPSBfdGhpcy5zZWxlY3RlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgbGVuID0gc2VsZWN0ZWREYXRlcy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0RGF0ZShkKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBuZXcgdGltZSB2YWx1ZXMgZnJvbSBEYXRlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlci5fc2V0VGltZShkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gT24gdGhpcyBzdGVwIHRpbWVwaWNrZXIgd2lsbCBzZXQgdmFsaWQgdmFsdWVzIGluIGl0J3MgaW5zdGFuY2VcclxuICAgICAgICAgICAgX3RoaXMuX3RyaWdnZXIoJ3NlbGVjdERhdGUnLCBkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBjb3JyZWN0IHRpbWUgdmFsdWVzIGFmdGVyIHRpbWVwaWNrZXIncyB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZnJvbSBzZXR0aW5nIGhvdXJzIG9yIG1pbnV0ZXMgd2hpY2ggdmFsdWVzIGFyZSBsZXNzZXIgdGhlbiBgbWluYCB2YWx1ZSBvclxyXG4gICAgICAgICAgICAvLyBncmVhdGVyIHRoZW4gYG1heGAgdmFsdWVcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoX3RoaXMudmlldyA9PSAnZGF5cycpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldE1vbnRoKCkgIT0gZC5tb250aCAmJiBvcHRzLm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoX3RoaXMudmlldyA9PSAneWVhcnMnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRGdWxsWWVhcigpICE9IGQueWVhciAmJiBvcHRzLm1vdmVUb090aGVyWWVhcnNPblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmRhdGUgPSBuZXdEYXRlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5uYXYuX3JlbmRlcigpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLm11bHRpcGxlRGF0ZXMgJiYgIW9wdHMucmFuZ2UpIHsgLy8gU2V0IHByaW9yaXR5IHRvIHJhbmdlIGZ1bmN0aW9uYWxpdHlcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPT09IG9wdHMubXVsdGlwbGVEYXRlcykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5faXNTZWxlY3RlZChkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMucHVzaChkYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW2RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsZW4gPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMucHVzaChkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm1heFJhbmdlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3dhcCBkYXRlcyBpZiB0aGV5IHdlcmUgc2VsZWN0ZWQgdmlhIGRwLnNlbGVjdERhdGUoKSBhbmQgc2Vjb25kIGRhdGUgd2FzIHNtYWxsZXIgdGhlbiBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmJpZ2dlcihfdGhpcy5tYXhSYW5nZSwgX3RoaXMubWluUmFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gX3RoaXMubWluUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtfdGhpcy5taW5SYW5nZSwgX3RoaXMubWF4UmFuZ2VdXHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW2RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbZGF0ZV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF90aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3RyaWdnZXJPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5hdXRvQ2xvc2UgJiYgIXRoaXMudGltZXBpY2tlcklzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdHMubXVsdGlwbGVEYXRlcyAmJiAhb3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYW5nZSAmJiBfdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVEYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZC5zb21lKGZ1bmN0aW9uIChjdXJEYXRlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5pc1NhbWUoY3VyRGF0ZSwgZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5zcGxpY2UoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubGFzdFNlbGVjdGVkRGF0ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RTZWxlY3RlZERhdGUgPSBfdGhpcy5zZWxlY3RlZERhdGVzW190aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy52aWV3c1tfdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRzLm9uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyT25DaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9kYXk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLm9wdHMubWluVmlldztcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudG9kYXlCdXR0b24gaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5vcHRzLnRvZGF5QnV0dG9uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyT25DaGFuZ2UoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXBkYXRlcyBkYXRlcGlja2VyIG9wdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHBhcmFtIC0gcGFyYW1ldGVyJ3MgbmFtZSB0byB1cGRhdGUuIElmIG9iamVjdCB0aGVuIGl0IHdpbGwgZXh0ZW5kIGN1cnJlbnQgb3B0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxPYmplY3R9IFt2YWx1ZV0gLSBuZXcgcGFyYW0gdmFsdWVcclxuICAgICAgICAgKi9cclxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChwYXJhbSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBsYXN0U2VsZWN0ZWREYXRlID0gdGhpcy5sYXN0U2VsZWN0ZWREYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxlbiA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdHNbcGFyYW1dID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09IDEgJiYgdHlwZW9mIHBhcmFtID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLm9wdHMsIHBhcmFtKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVTaG9ydEN1dHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZpbmVMb2NhbGUodGhpcy5vcHRzLmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgdGhpcy5uYXYuX2FkZEJ1dHRvbnNJZk5lZWQoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHRoaXMubmF2Ll9yZW5kZXIoKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbElzSW5wdXQgJiYgIXRoaXMub3B0cy5pbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLm9wdHMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5vcHRzLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3ModGhpcy5vcHRzLmNsYXNzZXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoJy1vbmx5LXRpbWVwaWNrZXItJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RTZWxlY3RlZERhdGUpIHRoaXMudGltZXBpY2tlci5faGFuZGxlRGF0ZShsYXN0U2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlci5fdXBkYXRlUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3VwZGF0ZUN1cnJlbnRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgaG91cnMgYW5kIG1pbnV0ZXMgaWYgaXQncyB2YWx1ZXMgaGF2ZSBiZWVuIGNoYW5nZWQgdGhyb3VnaCBtaW4vbWF4IGhvdXJzL21pbnV0ZXNcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2VsZWN0ZWREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlbGVjdGVkRGF0ZS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NldElucHV0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zeW5jV2l0aE1pbk1heERhdGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJUaW1lID0gdGhpcy5kYXRlLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5taW5UaW1lID4gY3VyVGltZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5taW5EYXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhUaW1lIDwgY3VyVGltZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5tYXhEYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2lzU2VsZWN0ZWQ6IGZ1bmN0aW9uIChjaGVja0RhdGUsIGNlbGxUeXBlKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzLnNvbWUoZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmlzU2FtZShkYXRlLCBjaGVja0RhdGUsIGNlbGxUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRJbnB1dFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvcHRzID0gX3RoaXMub3B0cyxcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IF90aGlzLmxvYy5kYXRlRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgYWx0Rm9ybWF0ID0gb3B0cy5hbHRGaWVsZERhdGVGb3JtYXQsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzLnNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdERhdGUoZm9ybWF0LCBkYXRlKVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBhbHRWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5hbHRGaWVsZCAmJiBfdGhpcy4kYWx0RmllbGQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBhbHRWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdERhdGUoYWx0Rm9ybWF0LCBkYXRlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhbHRWYWx1ZXMgPSBhbHRWYWx1ZXMuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRhbHRGaWVsZC52YWwoYWx0VmFsdWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLnZhbCh2YWx1ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVjayBpZiBkYXRlIGlzIGJldHdlZW4gbWluRGF0ZSBhbmQgbWF4RGF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRlIHtvYmplY3R9IC0gZGF0ZSBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSAtIGNlbGwgdHlwZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzSW5SYW5nZTogZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIHRpbWUgPSBkYXRlLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBtaW4gPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5taW5EYXRlKSxcclxuICAgICAgICAgICAgICAgIG1heCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLm1heERhdGUpLFxyXG4gICAgICAgICAgICAgICAgZE1pblRpbWUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIG1pbi5kYXRlKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICBkTWF4VGltZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgbWF4LmRhdGUpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgIHR5cGVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRheTogdGltZSA+PSB0aGlzLm1pblRpbWUgJiYgdGltZSA8PSB0aGlzLm1heFRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IGRNaW5UaW1lID49IHRoaXMubWluVGltZSAmJiBkTWF4VGltZSA8PSB0aGlzLm1heFRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogZC55ZWFyID49IG1pbi55ZWFyICYmIGQueWVhciA8PSBtYXgueWVhclxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPyB0eXBlc1t0eXBlXSA6IHR5cGVzLmRheVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkZWwub2Zmc2V0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICRlbC5vdXRlcldpZHRoKCksXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICRlbC5vdXRlckhlaWdodCgpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogb2Zmc2V0LmxlZnQsXHJcbiAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREYXRlRnJvbUNlbGw6IGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJEYXRlID0gdGhpcy5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgeWVhciA9IGNlbGwuZGF0YSgneWVhcicpIHx8IGN1ckRhdGUueWVhcixcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gY2VsbC5kYXRhKCdtb250aCcpID09IHVuZGVmaW5lZCA/IGN1ckRhdGUubW9udGggOiBjZWxsLmRhdGEoJ21vbnRoJyksXHJcbiAgICAgICAgICAgICAgICBkYXRlID0gY2VsbC5kYXRhKCdkYXRlJykgfHwgMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFBvc2l0aW9uQ2xhc3NlczogZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICBwb3MgPSBwb3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgdmFyIG1haW4gPSBwb3NbMF0sXHJcbiAgICAgICAgICAgICAgICBzZWMgPSBwb3NbMV0sXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0gJ2RhdGVwaWNrZXIgLScgKyBtYWluICsgJy0nICsgc2VjICsgJy0gLWZyb20tJyArIG1haW4gKyAnLSc7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlKSBjbGFzc2VzICs9ICcgYWN0aXZlJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdjbGFzcycpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoY2xhc3Nlcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IHRoaXMub3B0cy5wb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIHZhciBkaW1zID0gdGhpcy5fZ2V0RGltZW5zaW9ucyh0aGlzLiRlbCksXHJcbiAgICAgICAgICAgICAgICBzZWxmRGltcyA9IHRoaXMuX2dldERpbWVuc2lvbnModGhpcy4kZGF0ZXBpY2tlciksXHJcbiAgICAgICAgICAgICAgICBwb3MgPSBwb3NpdGlvbi5zcGxpdCgnICcpLFxyXG4gICAgICAgICAgICAgICAgdG9wLCBsZWZ0LFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5vcHRzLm9mZnNldCxcclxuICAgICAgICAgICAgICAgIG1haW4gPSBwb3NbMF0sXHJcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnkgPSBwb3NbMV07XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKG1haW4pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3AgLSBzZWxmRGltcy5oZWlnaHQgLSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCArIGRpbXMud2lkdGggKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wICsgZGltcy5oZWlnaHQgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0IC0gc2VsZkRpbXMud2lkdGggLSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChzZWNvbmRhcnkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCArIGRpbXMud2lkdGggLSBzZWxmRGltcy53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3AgKyBkaW1zLmhlaWdodCAtIHNlbGZEaW1zLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjZW50ZXInOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgvbGVmdHxyaWdodC8udGVzdChtYWluKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcCArIGRpbXMuaGVpZ2h0LzIgLSBzZWxmRGltcy5oZWlnaHQvMjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0ICsgZGltcy53aWR0aC8yIC0gc2VsZkRpbXMud2lkdGgvMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0b3BcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb25TaG93ID0gdGhpcy5vcHRzLm9uU2hvdztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5vcHRzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAob25TaG93KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVmlzaW9uRXZlbnRzKG9uU2hvdylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9uSGlkZSA9IHRoaXMub3B0cy5vbkhpZGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnLTEwMDAwMHB4J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5rZXlzID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmJsdXIoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvbkhpZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRWaXNpb25FdmVudHMob25IaWRlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZG93bjogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlVmlldyhkYXRlLCAnZG93bicpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VWaWV3KGRhdGUsICd1cCcpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kVmlzaW9uRXZlbnRzOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vZmYoJ3RyYW5zaXRpb25lbmQuZHAnKTtcclxuICAgICAgICAgICAgZXZlbnQodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uZSgndHJhbnNpdGlvbmVuZC5kcCcsIGV2ZW50LmJpbmQodGhpcywgdGhpcywgdHJ1ZSkpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2NoYW5nZVZpZXc6IGZ1bmN0aW9uIChkYXRlLCBkaXIpIHtcclxuICAgICAgICAgICAgZGF0ZSA9IGRhdGUgfHwgdGhpcy5mb2N1c2VkIHx8IHRoaXMuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuZXh0VmlldyA9IGRpciA9PSAndXAnID8gdGhpcy52aWV3SW5kZXggKyAxIDogdGhpcy52aWV3SW5kZXggLSAxO1xyXG4gICAgICAgICAgICBpZiAobmV4dFZpZXcgPiAyKSBuZXh0VmlldyA9IDI7XHJcbiAgICAgICAgICAgIGlmIChuZXh0VmlldyA8IDApIG5leHRWaWV3ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpO1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLnZpZXdJbmRleGVzW25leHRWaWV3XTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2hhbmRsZUhvdEtleTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLl9nZXRGb2N1c2VkRGF0ZSgpKSxcclxuICAgICAgICAgICAgICAgIGZvY3VzZWRQYXJzZWQsXHJcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRzLFxyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZSxcclxuICAgICAgICAgICAgICAgIHRvdGFsRGF5c0luTmV4dE1vbnRoLFxyXG4gICAgICAgICAgICAgICAgbW9udGhDaGFuZ2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB5ZWFyQ2hhbmdlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGVjYWRlQ2hhbmdlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgeSA9IGRhdGUueWVhcixcclxuICAgICAgICAgICAgICAgIG0gPSBkYXRlLm1vbnRoLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGUuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsUmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybFVwJzpcclxuICAgICAgICAgICAgICAgICAgICBtICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxMZWZ0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxEb3duJzpcclxuICAgICAgICAgICAgICAgICAgICBtIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoaWZ0UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2hpZnRVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgeWVhckNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoaWZ0TGVmdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdERvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHllYXJDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbHRSaWdodCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbHRVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjYWRlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgeSArPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FsdExlZnQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0RG93bic6XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjYWRlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxTaGlmdFVwJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvdGFsRGF5c0luTmV4dE1vbnRoID0gZGF0ZXBpY2tlci5nZXREYXlzQ291bnQobmV3IERhdGUoeSxtKSk7XHJcbiAgICAgICAgICAgIG5ld0RhdGUgPSBuZXcgRGF0ZSh5LG0sZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBuZXh0IG1vbnRoIGhhcyBsZXNzIGRheXMgdGhhbiBjdXJyZW50LCBzZXQgZGF0ZSB0byB0b3RhbCBkYXlzIGluIHRoYXQgbW9udGhcclxuICAgICAgICAgICAgaWYgKHRvdGFsRGF5c0luTmV4dE1vbnRoIDwgZCkgZCA9IHRvdGFsRGF5c0luTmV4dE1vbnRoO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbmV3RGF0ZSBpcyBpbiB2YWxpZCByYW5nZVxyXG4gICAgICAgICAgICBpZiAobmV3RGF0ZS5nZXRUaW1lKCkgPCB0aGlzLm1pblRpbWUpIHtcclxuICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3RGF0ZS5nZXRUaW1lKCkgPiB0aGlzLm1heFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1heERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9IG5ld0RhdGU7XHJcblxyXG4gICAgICAgICAgICBmb2N1c2VkUGFyc2VkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKG5ld0RhdGUpO1xyXG4gICAgICAgICAgICBpZiAobW9udGhDaGFuZ2VkICYmIG8ub25DaGFuZ2VNb250aCkge1xyXG4gICAgICAgICAgICAgICAgby5vbkNoYW5nZU1vbnRoKGZvY3VzZWRQYXJzZWQubW9udGgsIGZvY3VzZWRQYXJzZWQueWVhcilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeWVhckNoYW5nZWQgJiYgby5vbkNoYW5nZVllYXIpIHtcclxuICAgICAgICAgICAgICAgIG8ub25DaGFuZ2VZZWFyKGZvY3VzZWRQYXJzZWQueWVhcilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGVjYWRlQ2hhbmdlZCAmJiBvLm9uQ2hhbmdlRGVjYWRlKSB7XHJcbiAgICAgICAgICAgICAgICBvLm9uQ2hhbmdlRGVjYWRlKHRoaXMuY3VyRGVjYWRlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlZ2lzdGVyS2V5OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBleGlzdHMgPSB0aGlzLmtleXMuc29tZShmdW5jdGlvbiAoY3VyS2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VyS2V5ID09IGtleTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VuUmVnaXN0ZXJLZXk6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMua2V5cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9pc0hvdEtleVByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRIb3RLZXksXHJcbiAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgcHJlc3NlZEtleXMgPSB0aGlzLmtleXMuc29ydCgpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaG90S2V5IGluIGhvdEtleXMpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRIb3RLZXkgPSBob3RLZXlzW2hvdEtleV07XHJcbiAgICAgICAgICAgICAgICBpZiAocHJlc3NlZEtleXMubGVuZ3RoICE9IGN1cnJlbnRIb3RLZXkubGVuZ3RoKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEhvdEtleS5ldmVyeShmdW5jdGlvbiAoa2V5LCBpKSB7IHJldHVybiBrZXkgPT0gcHJlc3NlZEtleXNbaV19KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyKCdob3RLZXknLCBob3RLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF90cmlnZ2VyOiBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwudHJpZ2dlcihldmVudCwgYXJncylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZm9jdXNOZXh0Q2VsbDogZnVuY3Rpb24gKGtleUNvZGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgdGhpcy5jZWxsVHlwZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMuX2dldEZvY3VzZWREYXRlKCkpLFxyXG4gICAgICAgICAgICAgICAgeSA9IGRhdGUueWVhcixcclxuICAgICAgICAgICAgICAgIG0gPSBkYXRlLm1vbnRoLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGUuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0hvdEtleVByZXNzZWQoKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChrZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM3OiAvLyBsZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkIC09IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gLT0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5IC09IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM4OiAvLyB1cFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ2RheScgPyAoZCAtPSA3KSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ21vbnRoJyA/IChtIC09IDMpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAneWVhcicgPyAoeSAtPSA0KSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOTogLy8gcmlnaHRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdkYXknID8gKGQgKz0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdtb250aCcgPyAobSArPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ3llYXInID8gKHkgKz0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDA6IC8vIGRvd25cclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdkYXknID8gKGQgKz0gNykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdtb250aCcgPyAobSArPSAzKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ3llYXInID8gKHkgKz0gNCkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIG5kID0gbmV3IERhdGUoeSxtLGQpO1xyXG4gICAgICAgICAgICBpZiAobmQuZ2V0VGltZSgpIDwgdGhpcy5taW5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZCA9IHRoaXMubWluRGF0ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuZC5nZXRUaW1lKCkgPiB0aGlzLm1heFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIG5kID0gdGhpcy5tYXhEYXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSBuZDtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldEZvY3VzZWREYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBmb2N1c2VkICA9IHRoaXMuZm9jdXNlZCB8fCB0aGlzLnNlbGVjdGVkRGF0ZXNbdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgZCA9IHRoaXMucGFyc2VkRGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXlzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgbmV3IERhdGUoKS5nZXREYXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb250aHMnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneWVhcnMnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbmV3IERhdGUoZC55ZWFyLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmb2N1c2VkO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRDZWxsOiBmdW5jdGlvbiAoZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gdHlwZSB8fCB0aGlzLmNlbGxUeXBlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGQgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvciA9ICcuZGF0ZXBpY2tlci0tY2VsbFtkYXRhLXllYXI9XCInICsgZC55ZWFyICsgJ1wiXScsXHJcbiAgICAgICAgICAgICAgICAkY2VsbDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJ1tkYXRhLW1vbnRoPVwiJyArIGQubW9udGggKyAnXCJdJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgKz0gJ1tkYXRhLW1vbnRoPVwiJyArIGQubW9udGggKyAnXCJdW2RhdGEtZGF0ZT1cIicgKyBkLmRhdGUgKyAnXCJdJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkY2VsbCA9IHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uJGVsLmZpbmQoc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRjZWxsLmxlbmd0aCA/ICRjZWxsIDogJCgnJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy4kZWxcclxuICAgICAgICAgICAgICAgIC5vZmYoJy5hZHAnKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoJ2RhdGVwaWNrZXInLCAnJyk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLmZvY3VzZWQgPSAnJztcclxuICAgICAgICAgICAgX3RoaXMudmlld3MgPSB7fTtcclxuICAgICAgICAgICAgX3RoaXMua2V5cyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdHMuaW5saW5lIHx8ICFfdGhpcy5lbElzSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRkYXRlcGlja2VyLmNsb3Nlc3QoJy5kYXRlcGlja2VyLWlubGluZScpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGRhdGVwaWNrZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXM6IGZ1bmN0aW9uIChhbHJlYWR5U2VsZWN0ZWQsIHNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0cy50b2dnbGVTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBwb3NzaWJpbGl0eSB0byBzZWxlY3Qgc2FtZSBkYXRlIHdoZW4gcmFuZ2UgaXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY2xpY2tDZWxsJywgc2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRGF0ZShzZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0cy50b2dnbGVTZWxlY3RlZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURhdGUoc2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2hhbmdlIGxhc3Qgc2VsZWN0ZWQgZGF0ZSB0byBiZSBhYmxlIHRvIGNoYW5nZSB0aW1lIHdoZW4gY2xpY2tpbmcgb24gdGhpcyBjZWxsXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RTZWxlY3RlZERhdGUgPSBhbHJlYWR5U2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUoYWxyZWFkeVNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25TaG93RXZlbnQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkJsdXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmluRm9jdXMgJiYgdGhpcy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlRG93bkRhdGVwaWNrZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5Gb2N1cyA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VVcERhdGVwaWNrZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5Gb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQuaW5Gb2N1cyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICghZS5vcmlnaW5hbEV2ZW50LnRpbWVwaWNrZXJGb2N1cykgdGhpcy4kZWwuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25LZXlVcEdlbmVyYWw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLiRlbC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25SZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VVcEJvZHk6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQuaW5Gb2N1cykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSAmJiAhdGhpcy5pbkZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBFbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmluRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuX29uS2V5VXBHZW5lcmFsLmJpbmQodGhpcyksNCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5RG93bjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUgPSBlLndoaWNoO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWdpc3RlcktleShjb2RlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFycm93c1xyXG4gICAgICAgICAgICBpZiAoY29kZSA+PSAzNyAmJiBjb2RlIDw9IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c05leHRDZWxsKGNvZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBFbnRlclxyXG4gICAgICAgICAgICBpZiAoY29kZSA9PSAxMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9nZXRDZWxsKHRoaXMuZm9jdXNlZCkuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXcgIT0gdGhpcy5vcHRzLm1pblZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3duKClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxyZWFkeVNlbGVjdGVkID0gdGhpcy5faXNTZWxlY3RlZCh0aGlzLmZvY3VzZWQsIHRoaXMuY2VsbFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHJlYWR5U2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWQuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWQuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5mb2N1c2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlcyhhbHJlYWR5U2VsZWN0ZWQsIHRoaXMuZm9jdXNlZClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEVzY1xyXG4gICAgICAgICAgICBpZiAoY29kZSA9PSAyNykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25LZXlVcDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUgPSBlLndoaWNoO1xyXG4gICAgICAgICAgICB0aGlzLl91blJlZ2lzdGVyS2V5KGNvZGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkhvdEtleTogZnVuY3Rpb24gKGUsIGhvdEtleSkge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVIb3RLZXkoaG90S2V5KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZUVudGVyQ2VsbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRjZWxsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmRhdGVwaWNrZXItLWNlbGwnKSxcclxuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLl9nZXREYXRlRnJvbUNlbGwoJGNlbGwpO1xyXG5cclxuICAgICAgICAgICAgLy8gUHJldmVudCBmcm9tIHVubmVjZXNzYXJ5IHJlbmRlcmluZyBhbmQgc2V0dGluZyBuZXcgY3VycmVudERhdGVcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gJydcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGNlbGwuYWRkQ2xhc3MoJy1mb2N1cy0nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9IGRhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJhbmdlICYmIHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9IHRoaXMuc2VsZWN0ZWREYXRlc1swXTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmxlc3ModGhpcy5taW5SYW5nZSwgdGhpcy5mb2N1c2VkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSB0aGlzLm1pblJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3VwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VMZWF2ZUNlbGw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRlcGlja2VyLS1jZWxsJyk7XHJcblxyXG4gICAgICAgICAgICAkY2VsbC5yZW1vdmVDbGFzcygnLWZvY3VzLScpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25UaW1lQ2hhbmdlOiBmdW5jdGlvbiAoZSwgaCwgbSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGVzID0gdGhpcy5zZWxlY3RlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZERhdGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IHRoaXMubGFzdFNlbGVjdGVkRGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0ZS5zZXRIb3VycyhoKTtcclxuICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKG0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCAmJiAhdGhpcy5fZ2V0Q2VsbChkYXRlKS5oYXNDbGFzcygnLWRpc2FibGVkLScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25DbGlja0NlbGw6IGZ1bmN0aW9uIChlLCBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKGRhdGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldCBmb2N1c2VkKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAoIXZhbCAmJiB0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkY2VsbCA9IHRoaXMuX2dldENlbGwodGhpcy5mb2N1c2VkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJGNlbGwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGNlbGwucmVtb3ZlQ2xhc3MoJy1mb2N1cy0nKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWQgPSB2YWw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMucmFuZ2UgJiYgdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gdGhpcy5zZWxlY3RlZERhdGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIubGVzcyh0aGlzLm1pblJhbmdlLCB0aGlzLl9mb2N1c2VkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSB0aGlzLm1pblJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zaWxlbnQpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRlID0gdmFsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBmb2N1c2VkKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9jdXNlZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgcGFyc2VkRGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLmRhdGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldCBkYXRlICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCEodmFsIGluc3RhbmNlb2YgRGF0ZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB2YWw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pbml0ZWQgJiYgIXRoaXMuc2lsZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMudmlld10uX3JlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYXYuX3JlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSAmJiB0aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBkYXRlICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudERhdGVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgdmlldyAodmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld0luZGV4ID0gdGhpcy52aWV3SW5kZXhlcy5pbmRleE9mKHZhbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aWV3SW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJldlZpZXcgPSB0aGlzLmN1cnJlbnRWaWV3O1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudmlld3NbdmFsXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdmFsXSA9IG5ldyAgJC5mbi5kYXRlcGlja2VyLkJvZHkodGhpcywgdmFsLCB0aGlzLm9wdHMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdmFsXS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLnByZXZWaWV3XS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3ZhbF0uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYXYuX3JlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25DaGFuZ2VWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRzLm9uQ2hhbmdlVmlldyh2YWwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbElzSW5wdXQgJiYgdGhpcy52aXNpYmxlKSB0aGlzLnNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgdmlldygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFZpZXc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IGNlbGxUeXBlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3LnN1YnN0cmluZygwLCB0aGlzLnZpZXcubGVuZ3RoIC0gMSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgbWluVGltZSgpIHtcclxuICAgICAgICAgICAgdmFyIG1pbiA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLm1pbkRhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobWluLnllYXIsIG1pbi5tb250aCwgbWluLmRhdGUpLmdldFRpbWUoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBtYXhUaW1lKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4ID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMubWF4RGF0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXgueWVhciwgbWF4Lm1vbnRoLCBtYXguZGF0ZSkuZ2V0VGltZSgpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IGN1ckRlY2FkZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGVwaWNrZXIuZ2V0RGVjYWRlKHRoaXMuZGF0ZSlcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vICBVdGlsc1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGRhdGVwaWNrZXIuZ2V0RGF5c0NvdW50ID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwKS5nZXREYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeWVhcjogZGF0ZS5nZXRGdWxsWWVhcigpLFxyXG4gICAgICAgICAgICBtb250aDogZGF0ZS5nZXRNb250aCgpLFxyXG4gICAgICAgICAgICBmdWxsTW9udGg6IChkYXRlLmdldE1vbnRoKCkgKyAxKSA8IDEwID8gJzAnICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpIDogZGF0ZS5nZXRNb250aCgpICsgMSwgLy8gT25lIGJhc2VkXHJcbiAgICAgICAgICAgIGRhdGU6IGRhdGUuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICBmdWxsRGF0ZTogZGF0ZS5nZXREYXRlKCkgPCAxMCA/ICcwJyArIGRhdGUuZ2V0RGF0ZSgpIDogZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAgIGRheTogZGF0ZS5nZXREYXkoKSxcclxuICAgICAgICAgICAgaG91cnM6IGRhdGUuZ2V0SG91cnMoKSxcclxuICAgICAgICAgICAgZnVsbEhvdXJzOiAgZGF0ZS5nZXRIb3VycygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldEhvdXJzKCkgOiAgZGF0ZS5nZXRIb3VycygpICxcclxuICAgICAgICAgICAgbWludXRlczogZGF0ZS5nZXRNaW51dGVzKCksXHJcbiAgICAgICAgICAgIGZ1bGxNaW51dGVzOiAgZGF0ZS5nZXRNaW51dGVzKCkgPCAxMCA/ICcwJyArIGRhdGUuZ2V0TWludXRlcygpIDogIGRhdGUuZ2V0TWludXRlcygpXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmdldERlY2FkZSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgdmFyIGZpcnN0WWVhciA9IE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gMTApICogMTA7XHJcblxyXG4gICAgICAgIHJldHVybiBbZmlyc3RZZWFyLCBmaXJzdFllYXIgKyA5XTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzdHIsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyNcXHsoW1xcd10rKVxcfS9nLCBmdW5jdGlvbiAoc291cmNlLCBtYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YVttYXRjaF0gfHwgZGF0YVttYXRjaF0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW21hdGNoXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuaXNTYW1lID0gZnVuY3Rpb24gKGRhdGUxLCBkYXRlMiwgdHlwZSkge1xyXG4gICAgICAgIGlmICghZGF0ZTEgfHwgIWRhdGUyKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGQxID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUxKSxcclxuICAgICAgICAgICAgZDIgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZTIpLFxyXG4gICAgICAgICAgICBfdHlwZSA9IHR5cGUgPyB0eXBlIDogJ2RheScsXHJcblxyXG4gICAgICAgICAgICBjb25kaXRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgZGF5OiBkMS5kYXRlID09IGQyLmRhdGUgJiYgZDEubW9udGggPT0gZDIubW9udGggJiYgZDEueWVhciA9PSBkMi55ZWFyLFxyXG4gICAgICAgICAgICAgICAgbW9udGg6IGQxLm1vbnRoID09IGQyLm1vbnRoICYmIGQxLnllYXIgPT0gZDIueWVhcixcclxuICAgICAgICAgICAgICAgIHllYXI6IGQxLnllYXIgPT0gZDIueWVhclxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gY29uZGl0aW9uc1tfdHlwZV07XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIubGVzcyA9IGZ1bmN0aW9uIChkYXRlQ29tcGFyZVRvLCBkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRlQ29tcGFyZVRvIHx8ICFkYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIDwgZGF0ZUNvbXBhcmVUby5nZXRUaW1lKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuYmlnZ2VyID0gZnVuY3Rpb24gKGRhdGVDb21wYXJlVG8sIGRhdGUsIHR5cGUpIHtcclxuICAgICAgICBpZiAoIWRhdGVDb21wYXJlVG8gfHwgIWRhdGUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPiBkYXRlQ29tcGFyZVRvLmdldFRpbWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5nZXRMZWFkaW5nWmVyb051bSA9IGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQobnVtKSA8IDEwID8gJzAnICsgbnVtIDogbnVtO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY29weSBvZiBkYXRlIHdpdGggaG91cnMgYW5kIG1pbnV0ZXMgZXF1YWxzIHRvIDBcclxuICAgICAqIEBwYXJhbSBkYXRlIHtEYXRlfVxyXG4gICAgICovXHJcbiAgICBkYXRlcGlja2VyLnJlc2V0VGltZSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlICE9ICdvYmplY3QnKSByZXR1cm47XHJcbiAgICAgICAgZGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRhdGUpXHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4uZGF0ZXBpY2tlciA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCEkLmRhdGEodGhpcywgcGx1Z2luTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICQuZGF0YSh0aGlzLCAgcGx1Z2luTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZXBpY2tlciggdGhpcywgb3B0aW9ucyApKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9ICQuZGF0YSh0aGlzLCBwbHVnaW5OYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRzID0gJC5leHRlbmQodHJ1ZSwgX3RoaXMub3B0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIuQ29uc3RydWN0b3IgPSBEYXRlcGlja2VyO1xyXG5cclxuICAgICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZSA9IHtcclxuICAgICAgICBydToge1xyXG4gICAgICAgICAgICBkYXlzOiBbJ9CS0L7RgdC60YDQtdGB0LXQvdGM0LUnLCAn0J/QvtC90LXQtNC10LvRjNC90LjQuicsICfQktGC0L7RgNC90LjQuicsICfQodGA0LXQtNCwJywgJ9Cn0LXRgtCy0LXRgNCzJywgJ9Cf0Y/RgtC90LjRhtCwJywgJ9Ch0YPQsdCx0L7RgtCwJ10sXHJcbiAgICAgICAgICAgIGRheXNTaG9ydDogWyfQktC+0YEnLCfQn9C+0L0nLCfQktGC0L4nLCfQodGA0LUnLCfQp9C10YInLCfQn9GP0YInLCfQodGD0LEnXSxcclxuICAgICAgICAgICAgZGF5c01pbjogWyfQktGBJywn0J/QvScsJ9CS0YInLCfQodGAJywn0KfRgicsJ9Cf0YInLCfQodCxJ10sXHJcbiAgICAgICAgICAgIG1vbnRoczogWyfQr9C90LLQsNGA0YwnLCAn0KTQtdCy0YDQsNC70YwnLCAn0JzQsNGA0YInLCAn0JDQv9GA0LXQu9GMJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LPRg9GB0YInLCAn0KHQtdC90YLRj9Cx0YDRjCcsICfQntC60YLRj9Cx0YDRjCcsICfQndC+0Y/QsdGA0YwnLCAn0JTQtdC60LDQsdGA0YwnXSxcclxuICAgICAgICAgICAgbW9udGhzU2hvcnQ6IFsn0K/QvdCyJywgJ9Ck0LXQsicsICfQnNCw0YAnLCAn0JDQv9GAJywgJ9Cc0LDQuScsICfQmNGO0L0nLCAn0JjRjtC7JywgJ9CQ0LLQsycsICfQodC10L0nLCAn0J7QutGCJywgJ9Cd0L7RjycsICfQlNC10LonXSxcclxuICAgICAgICAgICAgdG9kYXk6ICfQodC10LPQvtC00L3RjycsXHJcbiAgICAgICAgICAgIGNsZWFyOiAn0J7Rh9C40YHRgtC40YLRjCcsXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICdkZC5tbS55eXl5JyxcclxuICAgICAgICAgICAgdGltZUZvcm1hdDogJ2hoOmlpJyxcclxuICAgICAgICAgICAgZmlyc3REYXk6IDFcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoYXV0b0luaXRTZWxlY3RvcikuZGF0ZXBpY2tlcigpO1xyXG4gICAgfSlcclxuXHJcbn0pKCk7XHJcbiIsIjsoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRlbXBsYXRlcyA9IHtcclxuICAgICAgICBkYXlzOicnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheXMgZGF0ZXBpY2tlci0tYm9keVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5cy1uYW1lc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY2VsbHMgZGF0ZXBpY2tlci0tY2VsbHMtZGF5c1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIG1vbnRoczogJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbW9udGhzIGRhdGVwaWNrZXItLWJvZHlcIj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNlbGxzIGRhdGVwaWNrZXItLWNlbGxzLW1vbnRoc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIHllYXJzOiAnJyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS15ZWFycyBkYXRlcGlja2VyLS1ib2R5XCI+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy15ZWFyc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlcGlja2VyID0gJC5mbi5kYXRlcGlja2VyLFxyXG4gICAgICAgIGRwID0gZGF0ZXBpY2tlci5Db25zdHJ1Y3RvcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLkJvZHkgPSBmdW5jdGlvbiAoZCwgdHlwZSwgb3B0cykge1xyXG4gICAgICAgIHRoaXMuZCA9IGQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xyXG4gICAgICAgIHRoaXMuJGVsID0gJCgnJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5Cb2R5LnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQmFzZUh0bWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1jZWxsJywgJC5wcm94eSh0aGlzLl9vbkNsaWNrQ2VsbCwgdGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEJhc2VIdG1sOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsID0gJCh0ZW1wbGF0ZXNbdGhpcy50eXBlXSkuYXBwZW5kVG8odGhpcy5kLiRjb250ZW50KTtcclxuICAgICAgICAgICAgdGhpcy4kbmFtZXMgPSAkKCcuZGF0ZXBpY2tlci0tZGF5cy1uYW1lcycsIHRoaXMuJGVsKTtcclxuICAgICAgICAgICAgdGhpcy4kY2VsbHMgPSAkKCcuZGF0ZXBpY2tlci0tY2VsbHMnLCB0aGlzLiRlbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERheU5hbWVzSHRtbDogZnVuY3Rpb24gKGZpcnN0RGF5LCBjdXJEYXksIGh0bWwsIGkpIHtcclxuICAgICAgICAgICAgY3VyRGF5ID0gY3VyRGF5ICE9IHVuZGVmaW5lZCA/IGN1ckRheSA6IGZpcnN0RGF5O1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbCA/IGh0bWwgOiAnJztcclxuICAgICAgICAgICAgaSA9IGkgIT0gdW5kZWZpbmVkID8gaSA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+IDcpIHJldHVybiBodG1sO1xyXG4gICAgICAgICAgICBpZiAoY3VyRGF5ID09IDcpIHJldHVybiB0aGlzLl9nZXREYXlOYW1lc0h0bWwoZmlyc3REYXksIDAsIGh0bWwsICsraSk7XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5LW5hbWUnICsgKHRoaXMuZC5pc1dlZWtlbmQoY3VyRGF5KSA/IFwiIC13ZWVrZW5kLVwiIDogXCJcIikgKyAnXCI+JyArIHRoaXMuZC5sb2MuZGF5c01pbltjdXJEYXldICsgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKGZpcnN0RGF5LCArK2N1ckRheSwgaHRtbCwgKytpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0Q2VsbENvbnRlbnRzOiBmdW5jdGlvbiAoZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFwiZGF0ZXBpY2tlci0tY2VsbCBkYXRlcGlja2VyLS1jZWxsLVwiICsgdHlwZSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuZCxcclxuICAgICAgICAgICAgICAgIG1pblJhbmdlID0gZHAucmVzZXRUaW1lKHBhcmVudC5taW5SYW5nZSksXHJcbiAgICAgICAgICAgICAgICBtYXhSYW5nZSA9IGRwLnJlc2V0VGltZShwYXJlbnQubWF4UmFuZ2UpLFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IHBhcmVudC5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICByZW5kZXIgPSB7fSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBkLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pc1dlZWtlbmQoZC5kYXkpKSBjbGFzc2VzICs9IFwiIC13ZWVrZW5kLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkLm1vbnRoICE9IHRoaXMuZC5wYXJzZWREYXRlLm1vbnRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLW90aGVyLW1vbnRoLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2VsZWN0T3RoZXJNb250aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLWRpc2FibGVkLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5zaG93T3RoZXJNb250aHMpIGh0bWwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHBhcmVudC5sb2NbcGFyZW50Lm9wdHMubW9udGhzRmllbGRdW2QubW9udGhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2FkZSA9IHBhcmVudC5jdXJEZWNhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGQueWVhcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC55ZWFyIDwgZGVjYWRlWzBdIHx8IGQueWVhciA+IGRlY2FkZVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLW90aGVyLWRlY2FkZS0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2VsZWN0T3RoZXJZZWFycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSBcIiAtZGlzYWJsZWQtXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNob3dPdGhlclllYXJzKSBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5vblJlbmRlckNlbGwpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlciA9IG9wdHMub25SZW5kZXJDZWxsKGRhdGUsIHR5cGUpIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9IHJlbmRlci5odG1sID8gcmVuZGVyLmh0bWwgOiBodG1sO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyArPSByZW5kZXIuY2xhc3NlcyA/ICcgJyArIHJlbmRlci5jbGFzc2VzIDogJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHAuaXNTYW1lKG1pblJhbmdlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1yYW5nZS1mcm9tLSc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHAuaXNTYW1lKG1heFJhbmdlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1yYW5nZS10by0nO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMSAmJiBwYXJlbnQuZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGRwLmJpZ2dlcihtaW5SYW5nZSwgZGF0ZSkgJiYgZHAubGVzcyhwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSAmJiBkcC5iaWdnZXIocGFyZW50LmZvY3VzZWQsIGRhdGUpKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtaW4tcmFuZ2UtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRwLmxlc3MobWF4UmFuZ2UsIGRhdGUpICYmIGRwLmlzU2FtZShwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1yYW5nZS1mcm9tLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRwLmJpZ2dlcihtaW5SYW5nZSwgZGF0ZSkgJiYgZHAuaXNTYW1lKHBhcmVudC5mb2N1c2VkLCBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLXJhbmdlLXRvLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJlbnQuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmxlc3MobWF4UmFuZ2UsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtaW4tcmFuZ2UtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChkcC5pc1NhbWUoY3VycmVudERhdGUsIGRhdGUsIHR5cGUpKSBjbGFzc2VzICs9ICcgLWN1cnJlbnQtJztcclxuICAgICAgICAgICAgaWYgKHBhcmVudC5mb2N1c2VkICYmIGRwLmlzU2FtZShkYXRlLCBwYXJlbnQuZm9jdXNlZCwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtZm9jdXMtJztcclxuICAgICAgICAgICAgaWYgKHBhcmVudC5faXNTZWxlY3RlZChkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1zZWxlY3RlZC0nO1xyXG4gICAgICAgICAgICBpZiAoIXBhcmVudC5faXNJblJhbmdlKGRhdGUsIHR5cGUpIHx8IHJlbmRlci5kaXNhYmxlZCkgY2xhc3NlcyArPSAnIC1kaXNhYmxlZC0nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWwsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIGRheXMgbnVtYmVyIHRvIHJlbmRlci4gR2VuZXJhdGVzIGRheXMgaHRtbCBhbmQgcmV0dXJucyBpdC5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0ZSAtIERhdGUgb2JqZWN0XHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXREYXlzSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHRvdGFsTW9udGhEYXlzID0gZHAuZ2V0RGF5c0NvdW50KGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RNb250aERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKS5nZXREYXkoKSxcclxuICAgICAgICAgICAgICAgIGxhc3RNb250aERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCB0b3RhbE1vbnRoRGF5cykuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgICAgICBkYXlzRnJvbVBldk1vbnRoID0gZmlyc3RNb250aERheSAtIHRoaXMuZC5sb2MuZmlyc3REYXksXHJcbiAgICAgICAgICAgICAgICBkYXlzRnJvbU5leHRNb250aCA9IDYgLSBsYXN0TW9udGhEYXkgKyB0aGlzLmQubG9jLmZpcnN0RGF5O1xyXG5cclxuICAgICAgICAgICAgZGF5c0Zyb21QZXZNb250aCA9IGRheXNGcm9tUGV2TW9udGggPCAwID8gZGF5c0Zyb21QZXZNb250aCArIDcgOiBkYXlzRnJvbVBldk1vbnRoO1xyXG4gICAgICAgICAgICBkYXlzRnJvbU5leHRNb250aCA9IGRheXNGcm9tTmV4dE1vbnRoID4gNiA/IGRheXNGcm9tTmV4dE1vbnRoIC0gNyA6IGRheXNGcm9tTmV4dE1vbnRoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGF5SW5kZXggPSAtZGF5c0Zyb21QZXZNb250aCArIDEsXHJcbiAgICAgICAgICAgICAgICBtLCB5LFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0RGF5SW5kZXgsIG1heCA9IHRvdGFsTW9udGhEYXlzICsgZGF5c0Zyb21OZXh0TW9udGg7IGkgPD0gbWF4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5nZXRNb250aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0RGF5SHRtbChuZXcgRGF0ZSh5LCBtLCBpKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERheUh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgJ2RheScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiAnICtcclxuICAgICAgICAgICAgICAgICdkYXRhLWRhdGU9XCInICsgZGF0ZS5nZXREYXRlKCkgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS1tb250aD1cIicgKyBkYXRlLmdldE1vbnRoKCkgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS15ZWFyPVwiJyArIGRhdGUuZ2V0RnVsbFllYXIoKSArICdcIj4nICsgY29udGVudC5odG1sICsgJzwvZGl2Pic7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2VuZXJhdGVzIG1vbnRocyBodG1sXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGUgLSBkYXRlIGluc3RhbmNlXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXRNb250aHNIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgaHRtbCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBpID0gMDtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlKGkgPCAxMikge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9nZXRNb250aEh0bWwobmV3IERhdGUoZC55ZWFyLCBpKSk7XHJcbiAgICAgICAgICAgICAgICBpKytcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldE1vbnRoSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgJ21vbnRoJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCInICsgY29udGVudC5jbGFzc2VzICsgJ1wiIGRhdGEtbW9udGg9XCInICsgZGF0ZS5nZXRNb250aCgpICsgJ1wiPicgKyBjb250ZW50Lmh0bWwgKyAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRZZWFyc0h0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gZHAuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZSA9IGRwLmdldERlY2FkZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0WWVhciA9IGRlY2FkZVswXSAtIDEsXHJcbiAgICAgICAgICAgICAgICBodG1sID0gJycsXHJcbiAgICAgICAgICAgICAgICBpID0gZmlyc3RZZWFyO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpOyBpIDw9IGRlY2FkZVsxXSArIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9nZXRZZWFySHRtbChuZXcgRGF0ZShpICwgMCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0WWVhckh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICd5ZWFyJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCInICsgY29udGVudC5jbGFzc2VzICsgJ1wiIGRhdGEteWVhcj1cIicgKyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnXCI+JyArIGNvbnRlbnQuaHRtbCArICc8L2Rpdj4nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbmRlclR5cGVzOiB7XHJcbiAgICAgICAgICAgIGRheXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXlOYW1lcyA9IHRoaXMuX2dldERheU5hbWVzSHRtbCh0aGlzLmQubG9jLmZpcnN0RGF5KSxcclxuICAgICAgICAgICAgICAgICAgICBkYXlzID0gdGhpcy5fZ2V0RGF5c0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGRheXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kbmFtZXMuaHRtbChkYXlOYW1lcylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW9udGhzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuX2dldE1vbnRoc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGh0bWwpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHllYXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuX2dldFllYXJzSHRtbCh0aGlzLmQuY3VycmVudERhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJGNlbGxzLmh0bWwoaHRtbClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZW5kZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUeXBlc1t0aGlzLnR5cGVdLmJpbmQodGhpcykoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbHMgPSAkKCcuZGF0ZXBpY2tlci0tY2VsbCcsIHRoaXMuJGNlbGxzKSxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICAkY2VsbCxcclxuICAgICAgICAgICAgICAgIGRhdGU7XHJcbiAgICAgICAgICAgICRjZWxscy5lYWNoKGZ1bmN0aW9uIChjZWxsLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAkY2VsbCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gX3RoaXMuZC5fZ2V0RGF0ZUZyb21DZWxsKCQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IF90aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgX3RoaXMuZC5jZWxsVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAkY2VsbC5hdHRyKCdjbGFzcycsY2xhc3Nlcy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFjaXR2ZSA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50c1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgX2hhbmRsZUNsaWNrOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBlbC5kYXRhKCdkYXRlJykgfHwgMSxcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gZWwuZGF0YSgnbW9udGgnKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgeWVhciA9IGVsLmRhdGEoJ3llYXInKSB8fCB0aGlzLmQucGFyc2VkRGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgZHAgPSB0aGlzLmQ7XHJcbiAgICAgICAgICAgIC8vIENoYW5nZSB2aWV3IGlmIG1pbiB2aWV3IGRvZXMgbm90IHJlYWNoIHlldFxyXG4gICAgICAgICAgICBpZiAoZHAudmlldyAhPSB0aGlzLm9wdHMubWluVmlldykge1xyXG4gICAgICAgICAgICAgICAgZHAuZG93bihuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNlbGVjdCBkYXRlIGlmIG1pbiB2aWV3IGlzIHJlYWNoZWRcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSxcclxuICAgICAgICAgICAgICAgIGFscmVhZHlTZWxlY3RlZCA9IHRoaXMuZC5faXNTZWxlY3RlZChzZWxlY3RlZERhdGUsIHRoaXMuZC5jZWxsVHlwZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFscmVhZHlTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgZHAuX3RyaWdnZXIoJ2NsaWNrQ2VsbCcsIHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRwLl9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlcy5iaW5kKGRwLCBhbHJlYWR5U2VsZWN0ZWQsIHNlbGVjdGVkRGF0ZSkoKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tDZWxsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGVsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmRhdGVwaWNrZXItLWNlbGwnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkZWwuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xpY2suYmluZCh0aGlzKSgkZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7XHJcbiIsIjsoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRlbXBsYXRlID0gJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LWFjdGlvblwiIGRhdGEtYWN0aW9uPVwicHJldlwiPiN7cHJldkh0bWx9PC9kaXY+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXYtdGl0bGVcIj4je3RpdGxlfTwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LWFjdGlvblwiIGRhdGEtYWN0aW9uPVwibmV4dFwiPiN7bmV4dEh0bWx9PC9kaXY+JyxcclxuICAgICAgICBidXR0b25zQ29udGFpbmVyVGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWJ1dHRvbnNcIj48L2Rpdj4nLFxyXG4gICAgICAgIGJ1dHRvbiA9ICc8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLWJ1dHRvblwiIGRhdGEtYWN0aW9uPVwiI3thY3Rpb259XCI+I3tsYWJlbH08L3NwYW4+JyxcclxuICAgICAgICBkYXRlcGlja2VyID0gJC5mbi5kYXRlcGlja2VyLFxyXG4gICAgICAgIGRwID0gZGF0ZXBpY2tlci5Db25zdHJ1Y3RvcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLk5hdmlnYXRpb24gPSBmdW5jdGlvbiAoZCwgb3B0cykge1xyXG4gICAgICAgIHRoaXMuZCA9IGQ7XHJcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcclxuXHJcbiAgICAgICAgdGhpcy4kYnV0dG9uc0NvbnRhaW5lciA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5OYXZpZ2F0aW9uLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQmFzZUh0bWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZEV2ZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kbmF2Lm9uKCdjbGljaycsICcuZGF0ZXBpY2tlci0tbmF2LWFjdGlvbicsICQucHJveHkodGhpcy5fb25DbGlja05hdkJ1dHRvbiwgdGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmQuJG5hdi5vbignY2xpY2snLCAnLmRhdGVwaWNrZXItLW5hdi10aXRsZScsICQucHJveHkodGhpcy5fb25DbGlja05hdlRpdGxlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kZGF0ZXBpY2tlci5vbignY2xpY2snLCAnLmRhdGVwaWNrZXItLWJ1dHRvbicsICQucHJveHkodGhpcy5fb25DbGlja05hdkJ1dHRvbiwgdGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEJhc2VIdG1sOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hZGRCdXR0b25zSWZOZWVkKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FkZEJ1dHRvbnNJZk5lZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50b2RheUJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uKCd0b2RheScpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGVhckJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uKCdjbGVhcicpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVuZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IHRoaXMuX2dldFRpdGxlKHRoaXMuZC5jdXJyZW50RGF0ZSksXHJcbiAgICAgICAgICAgICAgICBodG1sID0gZHAudGVtcGxhdGUodGVtcGxhdGUsICQuZXh0ZW5kKHt0aXRsZTogdGl0bGV9LCB0aGlzLm9wdHMpKTtcclxuICAgICAgICAgICAgdGhpcy5kLiRuYXYuaHRtbChodG1sKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZC52aWV3ID09ICd5ZWFycycpIHtcclxuICAgICAgICAgICAgICAgICQoJy5kYXRlcGlja2VyLS1uYXYtdGl0bGUnLCB0aGlzLmQuJG5hdikuYWRkQ2xhc3MoJy1kaXNhYmxlZC0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldE5hdlN0YXR1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRUaXRsZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZC5mb3JtYXREYXRlKHRoaXMub3B0cy5uYXZUaXRsZXNbdGhpcy5kLnZpZXddLCBkYXRlKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b246IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kYnV0dG9uc0NvbnRhaW5lci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbnNDb250YWluZXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLmQubG9jW3R5cGVdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9IGRwLnRlbXBsYXRlKGJ1dHRvbiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJCgnW2RhdGEtYWN0aW9uPScgKyB0eXBlICsgJ10nLCB0aGlzLiRidXR0b25zQ29udGFpbmVyKS5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy4kYnV0dG9uc0NvbnRhaW5lci5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FkZEJ1dHRvbnNDb250YWluZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5kLiRkYXRlcGlja2VyLmFwcGVuZChidXR0b25zQ29udGFpbmVyVGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLiRidXR0b25zQ29udGFpbmVyID0gJCgnLmRhdGVwaWNrZXItLWJ1dHRvbnMnLCB0aGlzLmQuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldE5hdlN0YXR1czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoISh0aGlzLm9wdHMubWluRGF0ZSB8fCB0aGlzLm9wdHMubWF4RGF0ZSkgfHwgIXRoaXMub3B0cy5kaXNhYmxlTmF2V2hlbk91dE9mUmFuZ2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gdGhpcy5kLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZS5kYXRlO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmQudmlldykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZSh5LCBtLTEsIDEpLCAnbW9udGgnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCdwcmV2JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZSh5LCBtKzEsIDEpLCAnbW9udGgnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aHMnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeS0xLCBtLCBkKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCdwcmV2JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZSh5KzEsIG0sIGQpLCAneWVhcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVOYXYoJ25leHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjYWRlID0gZHAuZ2V0RGVjYWRlKHRoaXMuZC5kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGRlY2FkZVswXSAtIDEsIDAsIDEpLCAneWVhcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVOYXYoJ3ByZXYnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGRlY2FkZVsxXSArIDEsIDAsIDEpLCAneWVhcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVOYXYoJ25leHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9kaXNhYmxlTmF2OiBmdW5jdGlvbiAobmF2KSB7XHJcbiAgICAgICAgICAgICQoJ1tkYXRhLWFjdGlvbj1cIicgKyBuYXYgKyAnXCJdJywgdGhpcy5kLiRuYXYpLmFkZENsYXNzKCctZGlzYWJsZWQtJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYWN0aXZhdGVOYXY6IGZ1bmN0aW9uIChuYXYpIHtcclxuICAgICAgICAgICAgJCgnW2RhdGEtYWN0aW9uPVwiJyArIG5hdiArICdcIl0nLCB0aGlzLmQuJG5hdikucmVtb3ZlQ2xhc3MoJy1kaXNhYmxlZC0nKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkNsaWNrTmF2QnV0dG9uOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGVsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnW2RhdGEtYWN0aW9uXScpLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJGVsLmRhdGEoJ2FjdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kW2FjdGlvbl0oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25DbGlja05hdlRpdGxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZC52aWV3ID09ICdkYXlzJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZC52aWV3ID0gJ21vbnRocydcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5kLnZpZXcgPSAneWVhcnMnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIjsoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lXCI+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnRcIj4nICtcclxuICAgICAgICAnICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnNcIj4je2hvdXJWaXNpYmxlfTwvc3Bhbj4nICtcclxuICAgICAgICAnICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtY29sb25cIj46PC9zcGFuPicgK1xyXG4gICAgICAgICcgICA8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1taW51dGVzXCI+I3ttaW5WYWx1ZX08L3NwYW4+JyArXHJcbiAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1zbGlkZXJzXCI+JyArXHJcbiAgICAgICAgJyAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLXJvd1wiPicgK1xyXG4gICAgICAgICcgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cImhvdXJzXCIgdmFsdWU9XCIje2hvdXJWYWx1ZX1cIiBtaW49XCIje2hvdXJNaW59XCIgbWF4PVwiI3tob3VyTWF4fVwiIHN0ZXA9XCIje2hvdXJTdGVwfVwiLz4nICtcclxuICAgICAgICAnICAgPC9kaXY+JyArXHJcbiAgICAgICAgJyAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLXJvd1wiPicgK1xyXG4gICAgICAgICcgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cIm1pbnV0ZXNcIiB2YWx1ZT1cIiN7bWluVmFsdWV9XCIgbWluPVwiI3ttaW5NaW59XCIgbWF4PVwiI3ttaW5NYXh9XCIgc3RlcD1cIiN7bWluU3RlcH1cIi8+JyArXHJcbiAgICAgICAgJyAgIDwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICBkYXRlcGlja2VyID0gJC5mbi5kYXRlcGlja2VyLFxyXG4gICAgICAgIGRwID0gZGF0ZXBpY2tlci5Db25zdHJ1Y3RvcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLlRpbWVwaWNrZXIgPSBmdW5jdGlvbiAoaW5zdCwgb3B0cykge1xyXG4gICAgICAgIHRoaXMuZCA9IGluc3Q7XHJcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuVGltZXBpY2tlci5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSAnaW5wdXQnO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRUaW1lKHRoaXMuZC5kYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRIVE1MKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvdHJpZGVudC9naSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0ID0gJ2NoYW5nZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZC4kZWwub24oJ3NlbGVjdERhdGUnLCB0aGlzLl9vblNlbGVjdERhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcy5vbihpbnB1dCwgdGhpcy5fb25DaGFuZ2VSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzLm9uKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwUmFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcy5vbignbW91c2Vtb3ZlIGZvY3VzICcsIHRoaXMuX29uTW91c2VFbnRlclJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oJ21vdXNlb3V0IGJsdXInLCB0aGlzLl9vbk1vdXNlT3V0UmFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFRpbWU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBfZGF0ZSA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLmhvdXJzID0gX2RhdGUuaG91cnMgPCB0aGlzLm1pbkhvdXJzID8gdGhpcy5taW5Ib3VycyA6IF9kYXRlLmhvdXJzO1xyXG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMgPSBfZGF0ZS5taW51dGVzIDwgdGhpcy5taW5NaW51dGVzID8gdGhpcy5taW5NaW51dGVzIDogX2RhdGUubWludXRlcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIG1pbkhvdXJzIGFuZCBtaW5NaW51dGVzIGZyb20gZGF0ZSAodXN1YWxseSBpdCdzIGEgbWluRGF0ZSlcclxuICAgICAgICAgKiBBbHNvIGNoYW5nZXMgbWluTWludXRlcyBpZiBjdXJyZW50IGhvdXJzIGFyZSBiaWdnZXIgdGhlbiBAZGF0ZSBob3Vyc1xyXG4gICAgICAgICAqIEBwYXJhbSBkYXRlIHtEYXRlfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldE1pblRpbWVGcm9tRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5taW5Ib3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgICAgICAgICAgdGhpcy5taW5NaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiwgZm9yIGV4YW1wbGUsIG1pbiBob3VycyBhcmUgMTAsIGFuZCBjdXJyZW50IGhvdXJzIGFyZSAxMixcclxuICAgICAgICAgICAgLy8gdXBkYXRlIG1pbk1pbnV0ZXMgdG8gZGVmYXVsdCB2YWx1ZSwgdG8gYmUgYWJsZSB0byBjaG9vc2Ugd2hvbGUgcmFuZ2Ugb2YgdmFsdWVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlLmdldEhvdXJzKCkgPiBkYXRlLmdldEhvdXJzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbk1pbnV0ZXMgPSB0aGlzLm9wdHMubWluTWludXRlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRNYXhUaW1lRnJvbURhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4SG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4TWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUuZ2V0SG91cnMoKSA8IGRhdGUuZ2V0SG91cnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4TWludXRlcyA9IHRoaXMub3B0cy5tYXhNaW51dGVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldERlZmF1bHRNaW5NYXhUaW1lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXhIb3VycyA9IDIzLFxyXG4gICAgICAgICAgICAgICAgbWF4TWludXRlcyA9IDU5LFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IHRoaXMub3B0cztcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWluSG91cnMgPSBvcHRzLm1pbkhvdXJzIDwgMCB8fCBvcHRzLm1pbkhvdXJzID4gbWF4SG91cnMgPyAwIDogb3B0cy5taW5Ib3VycztcclxuICAgICAgICAgICAgdGhpcy5taW5NaW51dGVzID0gb3B0cy5taW5NaW51dGVzIDwgMCB8fCBvcHRzLm1pbk1pbnV0ZXMgPiBtYXhNaW51dGVzID8gMCA6IG9wdHMubWluTWludXRlcztcclxuICAgICAgICAgICAgdGhpcy5tYXhIb3VycyA9IG9wdHMubWF4SG91cnMgPCAwIHx8IG9wdHMubWF4SG91cnMgPiBtYXhIb3VycyA/IG1heEhvdXJzIDogb3B0cy5tYXhIb3VycztcclxuICAgICAgICAgICAgdGhpcy5tYXhNaW51dGVzID0gb3B0cy5tYXhNaW51dGVzIDwgMCB8fCBvcHRzLm1heE1pbnV0ZXMgPiBtYXhNaW51dGVzID8gbWF4TWludXRlcyA6IG9wdHMubWF4TWludXRlcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMb29rcyBmb3IgbWluL21heCBob3Vycy9taW51dGVzIGFuZCBpZiBjdXJyZW50IHZhbHVlc1xyXG4gICAgICAgICAqIGFyZSBvdXQgb2YgcmFuZ2Ugc2V0cyB2YWxpZCB2YWx1ZXMuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdmFsaWRhdGVIb3Vyc01pbnV0ZXM6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdXJzIDwgdGhpcy5taW5Ib3Vycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3VycyA9IHRoaXMubWluSG91cnM7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ob3VycyA+IHRoaXMubWF4SG91cnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMgPSB0aGlzLm1heEhvdXJzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5taW51dGVzIDwgdGhpcy5taW5NaW51dGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMgPSB0aGlzLm1pbk1pbnV0ZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5taW51dGVzID4gdGhpcy5tYXhNaW51dGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMgPSB0aGlzLm1heE1pbnV0ZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRIVE1MOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBseiA9IGRwLmdldExlYWRpbmdaZXJvTnVtLFxyXG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBob3VyTWluOiB0aGlzLm1pbkhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJNYXg6IGx6KHRoaXMubWF4SG91cnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJTdGVwOiB0aGlzLm9wdHMuaG91cnNTdGVwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJWYWx1ZTogdGhpcy5ob3VycyxcclxuICAgICAgICAgICAgICAgICAgICBob3VyVmlzaWJsZTogbHoodGhpcy5kaXNwbGF5SG91cnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbk1pbjogdGhpcy5taW5NaW51dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbk1heDogbHoodGhpcy5tYXhNaW51dGVzKSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5TdGVwOiB0aGlzLm9wdHMubWludXRlc1N0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IGx6KHRoaXMubWludXRlcylcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBfdGVtcGxhdGUgPSBkcC50ZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiR0aW1lcGlja2VyID0gJChfdGVtcGxhdGUpLmFwcGVuZFRvKHRoaXMuZC4kZGF0ZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcyA9ICQoJ1t0eXBlPVwicmFuZ2VcIl0nLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kaG91cnMgPSAkKCdbbmFtZT1cImhvdXJzXCJdJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXMgPSAkKCdbbmFtZT1cIm1pbnV0ZXNcIl0nLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kaG91cnNUZXh0ID0gJCgnLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1ob3VycycsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzVGV4dCA9ICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtbWludXRlcycsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5hbXBtKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRhbXBtID0gJCgnPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtYW1wbVwiPicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKCQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQnLCB0aGlzLiR0aW1lcGlja2VyKSlcclxuICAgICAgICAgICAgICAgICAgICAuaHRtbCh0aGlzLmRheVBlcmlvZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kdGltZXBpY2tlci5hZGRDbGFzcygnLWFtLXBtLScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VwZGF0ZUN1cnJlbnRUaW1lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoID0gIGRwLmdldExlYWRpbmdaZXJvTnVtKHRoaXMuZGlzcGxheUhvdXJzKSxcclxuICAgICAgICAgICAgICAgIG0gPSBkcC5nZXRMZWFkaW5nWmVyb051bSh0aGlzLm1pbnV0ZXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kaG91cnNUZXh0Lmh0bWwoaCk7XHJcbiAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXNUZXh0Lmh0bWwobSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmFtcG0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGFtcG0uaHRtbCh0aGlzLmRheVBlcmlvZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdXBkYXRlUmFuZ2VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgbWluOiB0aGlzLm1pbkhvdXJzLFxyXG4gICAgICAgICAgICAgICAgbWF4OiB0aGlzLm1heEhvdXJzXHJcbiAgICAgICAgICAgIH0pLnZhbCh0aGlzLmhvdXJzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXMuYXR0cih7XHJcbiAgICAgICAgICAgICAgICBtaW46IHRoaXMubWluTWludXRlcyxcclxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhNaW51dGVzXHJcbiAgICAgICAgICAgIH0pLnZhbCh0aGlzLm1pbnV0ZXMpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBtaW5Ib3VycywgbWluTWludXRlcyBldGMuIGZyb20gZGF0ZS4gSWYgZGF0ZSBpcyBub3QgcGFzc2VkLCB0aGFuIHNldHNcclxuICAgICAgICAgKiB2YWx1ZXMgZnJvbSBvcHRpb25zXHJcbiAgICAgICAgICogQHBhcmFtIFtkYXRlXSB7b2JqZWN0fSAtIERhdGUgb2JqZWN0LCB0byBnZXQgdmFsdWVzIGZyb21cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9oYW5kbGVEYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXREZWZhdWx0TWluTWF4VGltZSgpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzU2FtZShkYXRlLCB0aGlzLmQub3B0cy5taW5EYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldE1pblRpbWVGcm9tRGF0ZSh0aGlzLmQub3B0cy5taW5EYXRlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZHAuaXNTYW1lKGRhdGUsIHRoaXMuZC5vcHRzLm1heERhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0TWF4VGltZUZyb21EYXRlKHRoaXMuZC5vcHRzLm1heERhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUhvdXJzTWludXRlcyhkYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUN1cnJlbnRUaW1lKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB2YWxpZCBob3VyIHZhbHVlIHRvIGRpc3BsYXkgaW4gdGV4dCBpbnB1dCBhbmQgZGF0ZXBpY2tlcidzIGJvZHkuXHJcbiAgICAgICAgICogQHBhcmFtIGRhdGUge0RhdGV8TnVtYmVyfSAtIGRhdGUgb3IgaG91cnNcclxuICAgICAgICAgKiBAcGFyYW0gW2FtcG1dIHtCb29sZWFufSAtIDEyIGhvdXJzIG1vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7e2hvdXJzOiAqLCBkYXlQZXJpb2Q6IHN0cmluZ319XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlOiBmdW5jdGlvbiAoZGF0ZSwgYW1wbSkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRhdGUsXHJcbiAgICAgICAgICAgICAgICBob3VycyA9IGRhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgICAgIGQgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgaG91cnMgPSBkLmhvdXJzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgX2FtcG0gPSBhbXBtIHx8IHRoaXMuZC5hbXBtLFxyXG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gJ2FtJztcclxuXHJcbiAgICAgICAgICAgIGlmIChfYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGhvdXJzID09IDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgaG91cnMgPT0gMTI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdwbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgaG91cnMgPiAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSBob3VycyAtIDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSAncG0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhvdXJzOiBob3VycyxcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZDogZGF5UGVyaW9kXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgaG91cnMgKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3VycyA9IHZhbDtcclxuXHJcbiAgICAgICAgICAgIHZhciBkaXNwbGF5SG91cnMgPSB0aGlzLl9nZXRWYWxpZEhvdXJzRnJvbURhdGUodmFsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUhvdXJzID0gZGlzcGxheUhvdXJzLmhvdXJzO1xyXG4gICAgICAgICAgICB0aGlzLmRheVBlcmlvZCA9IGRpc3BsYXlIb3Vycy5kYXlQZXJpb2Q7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IGhvdXJzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faG91cnM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50c1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgX29uQ2hhbmdlUmFuZ2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCksXHJcbiAgICAgICAgICAgICAgICBuYW1lID0gJHRhcmdldC5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmQudGltZXBpY2tlcklzQWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSAkdGFyZ2V0LnZhbCgpO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmQuX3RyaWdnZXIoJ3RpbWVDaGFuZ2UnLCBbdGhpcy5ob3VycywgdGhpcy5taW51dGVzXSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEYXRlKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblNlbGVjdERhdGU6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURhdGUoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VFbnRlclJhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9ICQoZS50YXJnZXQpLmF0dHIoJ25hbWUnKTtcclxuICAgICAgICAgICAgJCgnLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC0nICsgbmFtZSwgdGhpcy4kdGltZXBpY2tlcikuYWRkQ2xhc3MoJy1mb2N1cy0nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZU91dFJhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9ICQoZS50YXJnZXQpLmF0dHIoJ25hbWUnKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5pbkZvY3VzKSByZXR1cm47IC8vIFByZXZlbnQgcmVtb3ZpbmcgZm9jdXMgd2hlbiBtb3VzZSBvdXQgb2YgcmFuZ2Ugc2xpZGVyXHJcbiAgICAgICAgICAgICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtJyArIG5hbWUsIHRoaXMuJHRpbWVwaWNrZXIpLnJlbW92ZUNsYXNzKCctZm9jdXMtJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VVcFJhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmQudGltZXBpY2tlcklzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSkoKTtcclxuIiwiLy8gUm9vbSBwaG90b3Mgc2xpZGVyXG5cbmZ1bmN0aW9uICQoZWxlbSkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoJyhefCApJyArIGNsYXNzTmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoZWwuY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSB7XG4gICBlbC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gJGV4dGVuZE9iaihfZGVmLCBhZGRvbnMpIHtcbiAgICBpZiAodHlwZW9mIGFkZG9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gX2RlZikge1xuICAgICAgICBpZiAoYWRkb25zW3Byb3BdICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF9kZWZbcHJvcF0gPSBhZGRvbnNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG59XG5cblxudmFyIHNsaWRlcl9wbHVnaW4gPSAoZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGZpZmlfc2xpZGVyID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgLy8gYWx3YXlzIGxvb3BcbiAgICBfLmRlZiA9IHtcbiAgICAgIHRhcmdldDogJCgnLnNsaWRlcicpLFxuICAgICAgZG90c1dyYXBwZXI6ICQoJy5kb3RzLXdyYXBwZXInKSxcbiAgICAgIGFycm93TGVmdDogJCgnLmFycm93LWxlZnQnKSxcbiAgICAgIGFycm93UmlnaHQ6ICQoJy5hcnJvdy1yaWdodCcpLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzcGVlZDogMzAwLFxuICAgICAgICBlYXNpbmc6ICcnXG4gICAgICB9LFxuICAgICAgc3dpcGU6IHRydWUsXG4gICAgICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgICAgIGFmdGVyQ2hhbmdlU2xpZGU6IGZ1bmN0aW9uIGFmdGVyQ2hhbmdlU2xpZGUoKSB7fVxuICAgIH1cblxuICAgICRleHRlbmRPYmooXy5kZWYsIHNldHRpbmdzKTtcblxuICAgIF8uaW5pdCgpO1xuICB9XG5cbiAgZmlmaV9zbGlkZXIucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8udG90YWxTbGlkZXM7IGkrKykge1xuICAgICAgdmFyIGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBkb3Quc2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlJywgaSArIDEpO1xuICAgICAgXy5kZWYuZG90c1dyYXBwZXIuYXBwZW5kQ2hpbGQoZG90KTtcbiAgICB9XG5cbiAgICBfLmRlZi5kb3RzV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQubm9kZU5hbWUgPT0gXCJMSVwiKSB7XG4gICAgICAgIF8uY3VyU2xpZGUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGUnKTtcbiAgICAgICAgXy5nb3RvU2xpZGUoKTtcbiAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuXG4gIGZpZmlfc2xpZGVyLnByb3RvdHlwZS5nZXRDdXJMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfID0gdGhpcztcbiAgICBfLmN1ckxlZnQgPSBwYXJzZUludChfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQuc3BsaXQoJ3B4JylbMF0pO1xuICB9XG5cblxuICBmaWZpX3NsaWRlci5wcm90b3R5cGUuZ290b1NsaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfID0gdGhpcztcblxuICAgIF8uc2xpZGVySW5uZXIuc3R5bGUudHJhbnNpdGlvbiA9ICdsZWZ0ICcgKyBfLmRlZi50cmFuc2l0aW9uLnNwZWVkIC8gMTAwMCArICdzICcgKyBfLmRlZi50cmFuc2l0aW9uLmVhc2luZztcbiAgICBfLnNsaWRlcklubmVyLnN0eWxlLmxlZnQgPSAtXy5jdXJTbGlkZSAqIF8uc2xpZGVXICsgJ3B4JztcbiAgICBhZGRDbGFzcyhfLmRlZi50YXJnZXQsICdpc0FuaW1hdGluZycpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgXy5zbGlkZXJJbm5lci5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgICByZW1vdmVDbGFzcyhfLmRlZi50YXJnZXQsICdpc0FuaW1hdGluZycpO1xuICAgIH0sIF8uZGVmLnRyYW5zaXRpb24uc3BlZWQpO1xuICAgIF8uc2V0RG90KCk7XG4gICAgaWYgKF8uZGVmLmF1dG9IZWlnaHQpIHtcbiAgICAgIF8uZGVmLnRhcmdldC5zdHlsZS5oZWlnaHQgPSBfLmFsbFNsaWRlc1tfLmN1clNsaWRlXS5vZmZzZXRIZWlnaHQgKyBcInB4XCI7XG4gICAgfVxuICAgIF8uZGVmLmFmdGVyQ2hhbmdlU2xpZGUoXyk7XG4gIH1cblxuXG4gIGZpZmlfc2xpZGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfID0gdGhpcztcblxuICAgICBmdW5jdGlvbiBsb2FkZWRJbWcoZWwpIHtcbiAgICAgICB2YXIgbG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICBmdW5jdGlvbiBsb2FkSGFuZGxlcigpIHtcbiAgICAgICAgIGlmIChsb2FkZWQpIHtcbiAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgIF8ubG9hZGVkQ250Kys7XG4gICAgICAgICBpZiAoXy5sb2FkZWRDbnQgPj0gXy50b3RhbFNsaWRlcyArIDIpIHtcbiAgICAgICAgICAgXy51cGRhdGVTbGlkZXJEaW1lbnNpb24oKTtcbiAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICB2YXIgaW1nID0gZWwucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgICAgaWYgKGltZykge1xuICAgICAgICAgaW1nLm9ubG9hZCA9IGxvYWRIYW5kbGVyO1xuICAgICAgICAgaW1nLnNyYyA9IGltZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJyk7XG4gICAgICAgICBpbWcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgIGxvYWRIYW5kbGVyKCk7XG4gICAgICAgICB9XG4gICAgICAgfSBlbHNlIHtcbiAgICAgICAgIF8udXBkYXRlU2xpZGVyRGltZW5zaW9uKCk7XG4gICAgICAgfVxuICAgICB9XG5cblxuICAgIF8uYWxsU2xpZGVzID0gMDtcbiAgICBfLmN1clNsaWRlID0gMDtcbiAgICBfLmN1ckxlZnQgPSAwO1xuICAgIF8udG90YWxTbGlkZXMgPSBfLmRlZi50YXJnZXQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJykubGVuZ3RoO1xuXG4gICAgXy5zbGlkZXJJbm5lciA9IF8uZGVmLnRhcmdldC5xdWVyeVNlbGVjdG9yKCcucm9vbS1jYXJkX19zbGlkZXItY29udGFpbmVyJyk7XG4gICAgXy5sb2FkZWRDbnQgPSAwO1xuXG4gICAgLy8gYXBwZW5kIGNsb25lc1xuICAgIHZhciBjbG9uZUZpcnN0ID0gXy5kZWYudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZScpWzBdLmNsb25lTm9kZSh0cnVlKTtcbiAgICBfLnNsaWRlcklubmVyLmFwcGVuZENoaWxkKGNsb25lRmlyc3QpO1xuICAgIHZhciBjbG9uZUxhc3QgPSBfLmRlZi50YXJnZXQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJylbXy50b3RhbFNsaWRlcyAtIDFdLmNsb25lTm9kZSh0cnVlKTtcbiAgICBfLnNsaWRlcklubmVyLmluc2VydEJlZm9yZShjbG9uZUxhc3QsIF8uc2xpZGVySW5uZXIuZmlyc3RDaGlsZCk7XG5cbiAgICBfLmN1clNsaWRlKys7XG4gICAgXy5hbGxTbGlkZXMgPSBfLmRlZi50YXJnZXQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJyk7XG5cbiAgICAvLyBfLmRlZi50YXJnZXQuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcbiAgICBfLnNsaWRlcklubmVyLnN0eWxlLndpZHRoID0gKF8udG90YWxTbGlkZXMgKyAyKSAqIDEwMCArIFwiJVwiO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfLnRvdGFsU2xpZGVzICsgMjsgX2krKykge1xuICAgICAgXy5hbGxTbGlkZXNbX2ldLnN0eWxlLndpZHRoID0gMTAwIC8gKF8udG90YWxTbGlkZXMgKyAyKSArIFwiJVwiO1xuICAgICAgbG9hZGVkSW1nKF8uYWxsU2xpZGVzW19pXSk7XG4gICAgfVxuXG4gICAgXy5idWlsZERvdHMoKTtcbiAgICBfLnNldERvdCgpO1xuICAgIF8uaW5pdEFycm93cygpO1xuXG4gICAgZnVuY3Rpb24gYWRkTGlzdGVuZXJNdWx0aShlbCwgcywgZm4pIHtcbiAgICAgIHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKGUsIGZuLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lck11bHRpKGVsLCBzLCBmbikge1xuICAgICAgcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgZm4sIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChfLmRlZi5zd2lwZSkge1xuICAgICAgYWRkTGlzdGVuZXJNdWx0aShfLnNsaWRlcklubmVyLCAnbW91c2Vkb3duIHRvdWNoc3RhcnQnLCBzdGFydFN3aXBlKTtcbiAgICB9XG5cbiAgICBfLmlzQW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBzdGFydFN3aXBlKGUpIHtcbiAgICAgIHZhciB0b3VjaCA9IGU7XG4gICAgICBfLmdldEN1ckxlZnQoKTtcbiAgICAgIGlmICghXy5pc0FuaW1hdGluZykge1xuICAgICAgICBpZiAoZS50eXBlID09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgIHRvdWNoID0gZS50YXJnZXRUb3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgXy5zdGFydFggPSB0b3VjaC5wYWdlWDtcbiAgICAgICAgXy5zdGFydFkgPSB0b3VjaC5wYWdlWTtcbiAgICAgICAgYWRkTGlzdGVuZXJNdWx0aShfLnNsaWRlcklubmVyLCAnbW91c2Vtb3ZlIHRvdWNobW92ZScsIHN3aXBlTW92ZSk7XG4gICAgICAgIGFkZExpc3RlbmVyTXVsdGkoJCgnYm9keScpLCAnbW91c2V1cCB0b3VjaGVuZCcsIHN3aXBlRW5kKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzd2lwZU1vdmUoZSkge1xuICAgICAgdmFyIHRvdWNoID0gZTtcbiAgICAgIGlmIChlLnR5cGUgPT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgdG91Y2ggPSBlLnRhcmdldFRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIH1cbiAgICAgIF8ubW92ZVggPSB0b3VjaC5wYWdlWDtcbiAgICAgIF8ubW92ZVkgPSB0b3VjaC5wYWdlWTtcblxuICAgIC8vIGZvciBzY3JvbGxpbmcgdXAgYW5kIGRvd25cbiAgICBpZiAoTWF0aC5hYnMoXy5tb3ZlWCAtIF8uc3RhcnRYKSA8IDQwKSByZXR1cm47XG5cbiAgICBfLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBhZGRDbGFzcyhfLmRlZi50YXJnZXQsICdpc0FuaW1hdGluZycpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChfLmN1ckxlZnQgKyBfLm1vdmVYIC0gXy5zdGFydFggPiAwICYmIF8uY3VyTGVmdCA9PSAwKSB7XG4gICAgICBfLmN1ckxlZnQgPSAtXy50b3RhbFNsaWRlcyAqIF8uc2xpZGVXO1xuICAgIH0gZWxzZSBpZiAoXy5jdXJMZWZ0ICsgXy5tb3ZlWCAtIF8uc3RhcnRYIDwgLShfLnRvdGFsU2xpZGVzICsgMSkgKiBfLnNsaWRlVykge1xuICAgICAgXy5jdXJMZWZ0ID0gLV8uc2xpZGVXO1xuICAgIH1cbiAgICAgIF8uc2xpZGVySW5uZXIuc3R5bGUubGVmdCA9IF8uY3VyTGVmdCArIF8ubW92ZVggLSBfLnN0YXJ0WCArIFwicHhcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzd2lwZUVuZChlKSB7XG4gICAgICB2YXIgdG91Y2ggPSBlO1xuICAgICAgXy5nZXRDdXJMZWZ0KCk7XG5cbiAgICBpZiAoTWF0aC5hYnMoXy5tb3ZlWCAtIF8uc3RhcnRYKSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgXy5zdGF5QXRDdXIgPSBNYXRoLmFicyhfLm1vdmVYIC0gXy5zdGFydFgpIDwgNDAgfHwgdHlwZW9mIF8ubW92ZVggPT09IFwidW5kZWZpbmVkXCIgPyB0cnVlIDogZmFsc2U7XG4gICAgXy5kaXIgPSBfLnN0YXJ0WCA8IF8ubW92ZVggPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gICAgaWYgKF8uc3RheUF0Q3VyKSB7fSBlbHNlIHtcbiAgICAgIF8uZGlyID09ICdsZWZ0JyA/IF8uY3VyU2xpZGUtLSA6IF8uY3VyU2xpZGUrKztcbiAgICAgIGlmIChfLmN1clNsaWRlIDwgMCkge1xuICAgICAgICBfLmN1clNsaWRlID0gXy50b3RhbFNsaWRlcztcbiAgICAgIH0gZWxzZSBpZiAoXy5jdXJTbGlkZSA9PSBfLnRvdGFsU2xpZGVzICsgMikge1xuICAgICAgICBfLmN1clNsaWRlID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfLmdvdG9TbGlkZSgpO1xuXG4gICAgZGVsZXRlIF8uc3RhcnRYO1xuICAgIGRlbGV0ZSBfLnN0YXJ0WTtcbiAgICBkZWxldGUgXy5tb3ZlWDtcbiAgICBkZWxldGUgXy5tb3ZlWTtcblxuICAgIF8uaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICByZW1vdmVDbGFzcyhfLmRlZi50YXJnZXQsICdpc0FuaW1hdGluZycpO1xuICAgIHJlbW92ZUxpc3RlbmVyTXVsdGkoXy5zbGlkZXJJbm5lciwgJ21vdXNlbW92ZSB0b3VjaG1vdmUnLCBzd2lwZU1vdmUpO1xuICAgIHJlbW92ZUxpc3RlbmVyTXVsdGkoJCgnYm9keScpLCAnbW91c2V1cCB0b3VjaGVuZCcsIHN3aXBlRW5kKTtcbiAgICB9XG4gIH1cblxuICBmaWZpX3NsaWRlci5wcm90b3R5cGUuaW5pdEFycm93cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICBpZiAoXy5kZWYuYXJyb3dMZWZ0ICE9ICcnKSB7XG4gICAgICBfLmRlZi5hcnJvd0xlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaGFzQ2xhc3MoXy5kZWYudGFyZ2V0LCAnaXNBbmltYXRpbmcnKSkge1xuICAgICAgICAgIGlmIChfLmN1clNsaWRlID09IDEpIHtcbiAgICAgICAgICAgIF8uY3VyU2xpZGUgPSBfLnRvdGFsU2xpZGVzICsgMTtcbiAgICAgICAgICAgIF8uc2xpZGVySW5uZXIuc3R5bGUubGVmdCA9IC1fLmN1clNsaWRlICogXy5zbGlkZVcgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfLmN1clNsaWRlLS07XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfLmdvdG9TbGlkZSgpO1xuICAgICAgICAgIH0sIDIwKTtcbiAgICAgICAgfVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChfLmRlZi5hcnJvd1JpZ2h0ICE9ICcnKSB7XG4gICAgICBfLmRlZi5hcnJvd1JpZ2h0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWhhc0NsYXNzKF8uZGVmLnRhcmdldCwgJ2lzQW5pbWF0aW5nJykpIHtcbiAgICAgICAgICBpZiAoXy5jdXJTbGlkZSA9PSBfLnRvdGFsU2xpZGVzKSB7XG4gICAgICAgICAgICBfLmN1clNsaWRlID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVySW5uZXIuc3R5bGUubGVmdCA9IC1fLmN1clNsaWRlICogXy5zbGlkZVcgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfLmN1clNsaWRlKys7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfLmdvdG9TbGlkZSgpO1xuICAgICAgICAgIH0sIDIwKTtcbiAgICAgICAgfVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZpZmlfc2xpZGVyLnByb3RvdHlwZS5zZXREb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF8gPSB0aGlzO1xuICAgIHZhciB0YXJkb3QgPSBfLmN1clNsaWRlIC0gMTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgXy50b3RhbFNsaWRlczsgaisrKSB7XG4gICAgICByZW1vdmVDbGFzcyhfLmRlZi5kb3RzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdsaScpW2pdLCAnYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF8uY3VyU2xpZGUgLSAxIDwgMCkge1xuICAgICAgdGFyZG90ID0gXy50b3RhbFNsaWRlcyAtIDE7XG4gICAgfSBlbHNlIGlmIChfLmN1clNsaWRlIC0gMSA+IF8udG90YWxTbGlkZXMgLSAxKSB7XG4gICAgICB0YXJkb3QgPSAwO1xuICAgIH1cbiAgICBhZGRDbGFzcyhfLmRlZi5kb3RzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdsaScpW3RhcmRvdF0sICdhY3RpdmUnKTtcbiAgfVxuXG5cbiAgIGZpZmlfc2xpZGVyLnByb3RvdHlwZS51cGRhdGVTbGlkZXJEaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgIHZhciBfID0gdGhpcztcblxuICAgICBfLnNsaWRlVyA9IDI3MDsgIC8vXy5zbGlkZXJJbm5lci5vZmZzZXRIZWlnaHQgLyBfLnRvdGFsU2xpZGVzXG4gICAgIF8uc2xpZGVySW5uZXIuc3R5bGUubGVmdCA9IC1fLnNsaWRlVyAqIF8uY3VyU2xpZGUgKyBcInB4XCI7XG5cbiAgICAgaWYgKF8uZGVmLmF1dG9IZWlnaHQpIHtcbiAgICAgICBfLmRlZi50YXJnZXQuc3R5bGUuaGVpZ2h0ID0gXy5hbGxTbGlkZXNbXy5jdXJTbGlkZV0ub2Zmc2V0SGVpZ2h0ICsgXCJweFwiO1xuICAgICB9IGVsc2Uge1xuICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgXy50b3RhbFNsaWRlcyArIDI7IGkrKykge1xuICAgICAgICAgaWYgKF8uYWxsU2xpZGVzW2ldLm9mZnNldEhlaWdodCA+IF8uZGVmLnRhcmdldC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgXy5kZWYudGFyZ2V0LnN0eWxlLmhlaWdodCA9IF8uYWxsU2xpZGVzW2ldLm9mZnNldEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgIH1cbiAgICAgICB9XG4gICAgIH1cbiAgICAgXy5kZWYuYWZ0ZXJDaGFuZ2VTbGlkZShfKTtcbiAgIH1cblxuICByZXR1cm4gZmlmaV9zbGlkZXI7XG59KSgpO1xuXG52YXIgc2xpZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb29tLWNhcmRfX3NsaWRlcicpO1xuc2xpZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gbmV3IHNsaWRlcl9wbHVnaW4oe1xuICAgICAgICB0YXJnZXQ6IGl0ZW0sXG4gICAgICAgIGRvdHNXcmFwcGVyOiBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5kb3RzLXdyYXBwZXInKSxcbiAgICAgICAgYXJyb3dMZWZ0OiBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdy1sZWZ0JyksXG4gICAgICAgIGFycm93UmlnaHQ6IGl0ZW0ucXVlcnlTZWxlY3RvcignLmFycm93LXJpZ2h0JylcbiAgICB9KTtcbn0pXG4iLCJpbXBvcnQgJy4uLy4uL2Jsb2Nrcy9yb29tLWNhcmQtdGVtcGxhdGUvcm9vbS1waG90by1zbGlkZXIuanMnO1xuaW1wb3J0IHtkYXRlUGlja2VyQ29uZmlnfSBmcm9tICcuLi8uLi8uLi9zY3JpcHRzL2RhdGVwaWNrZXIuanMnO1xuaW1wb3J0IHt0b2dnbGUsIGdldERlZmF1bHRPcHRpb25zLCB1cGRhdGVPcHRpb25zLCBzd2l0Y2hBbW91bnR9IGZyb20gJy4uLy4uLy4uL3NjcmlwdHMvZHJvcGRvd24uanMnO1xuXG5cbi8vIGRhdGVwaWNrZXJcblxuY29uc3QgcmFuZ2VDb25maWcgPSBkYXRlUGlja2VyQ29uZmlnO1xucmFuZ2VDb25maWcucmFuZ2UgPSB0cnVlO1xuXG4kKCcjZmlsdGVyRGF0ZXMnKS5kYXRlcGlja2VyKHJhbmdlQ29uZmlnKTtcblxuJCgnLmZpbHRlci1mb3JtX19kYXRlcGlja2VyLWFycm93Jykub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCdmaWx0ZXItZm9ybV9fYXJyb3ctLWFjdGl2ZScpKSB7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygnZmlsdGVyLWZvcm1fX2Fycm93LS1hY3RpdmUnKTtcbiAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJCgnLmZpbHRlci1mb3JtX19pbnB1dCcpKS5mb2N1cygpO1xuICB9IGVsc2Uge1xuICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2ZpbHRlci1mb3JtX19hcnJvdy0tYWN0aXZlJyk7XG4gIH1cbn0pO1xuXG4kKCcjZmlsdGVyRGF0ZXMnKS5vbihcImJsdXJcIiwgZnVuY3Rpb24oKSB7XG4gICQoJy5maWx0ZXItZm9ybV9fZGF0ZXBpY2tlci1hcnJvdycpLnJlbW92ZUNsYXNzKCdmaWx0ZXItZm9ybV9fYXJyb3ctLWFjdGl2ZScpO1xufSk7XG5cblxuLy8g0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQtSDRg9C00L7QsdGB0YLQstCwXG5cbmNvbnN0IGFkZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItZm9ybV9fZHJvcGRvd24tYnRuJyk7XG5jb25zdCBhZGREcm9wZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItZm9ybV9fZGl2Jyk7XG5cbmFkZERyb3Bkb3duLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWNsb3NlJyk7XG5cbmFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgdG9nZ2xlKGFkZERyb3Bkb3duLCAnbW9kYWwtY2xvc2UnKTtcbn0pO1xuXG4vLyBBcnJvdyBvbiBjbGlja1xuXG4kKFwiLmZpbHRlci1mb3JtX19pbnB1dC1hcnJvd1wiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdmaWx0ZXItZm9ybV9fYXJyb3ctLWFjdGl2ZScpO1xuICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJCgnLnNlbGVjdF9fZHJvcGRvd24nKSkudG9nZ2xlQ2xhc3MoJ21vZGFsLWNsb3NlJyk7XG59KTtcblxuJChcIi5zZWFyY2gtZm9ybV9fc2VsZWN0LWFycm93XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICQodGhpcykudG9nZ2xlQ2xhc3MoJ3NlYXJjaC1mb3JtX19hcnJvdy0tYWN0aXZlJyk7XG4gICQodGhpcykucGFyZW50KCkuZmluZCgkKCcuc2VsZWN0X19kcm9wZG93bicpKS50b2dnbGVDbGFzcygnbW9kYWwtY2xvc2UnKTtcbn0pO1xuXG4vLyBDb21mb3J0XG5cbmNvbnN0IGNvbWZvcnRJRHMgPSBbJ9Ch0L/QsNC70YzQvdC4JywgJ9Ca0YDQvtCy0LDRgtC4JywgJ9CS0LDQvdC90YvQtSDQutC+0LzQvdCw0YLRiyddO1xuY29uc3QgY29tZm9ydERlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoY29tZm9ydElEcyk7XG5cbiQoXCIuQ29tZm9ydFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICB2YXIgJGJ1dHRvbiA9ICQodGhpcyk7XG4gIHZhciBpbnB1dCA9ICRidXR0b24ucGFyZW50KCkuZmluZChcImlucHV0XCIpO1xuXG4gIHZhciBuZXdWYWwgPSBzd2l0Y2hBbW91bnQoJGJ1dHRvbiwgaW5wdXQpO1xuXG4gIHZhciB0YXJnZXRJbnB1dCA9ICQoJyNjb21mb3J0SW5wdXQnKTtcbiAgdmFyIGlucHV0SUQgPSBpbnB1dC5hdHRyKFwiaWRcIik7XG4gIHVwZGF0ZU9wdGlvbnMoY29tZm9ydERlZmF1bHRPcHRpb25zLCBpbnB1dElELCBuZXdWYWwpO1xuICB0YXJnZXRJbnB1dC52YWwoY29tZm9ydERlZmF1bHRPcHRpb25zLmZpcnN0LmFtb3VudCArICcgJyArIGNvbWZvcnREZWZhdWx0T3B0aW9ucy5maXJzdC5pZCArICcsICcgKyBjb21mb3J0RGVmYXVsdE9wdGlvbnMuc2Vjb25kLmFtb3VudCArICcgJyArIGNvbWZvcnREZWZhdWx0T3B0aW9ucy5zZWNvbmQuaWQgKyAnLCAnICsgY29tZm9ydERlZmF1bHRPcHRpb25zLnRoaXJkLmFtb3VudCArICcgJyArIGNvbWZvcnREZWZhdWx0T3B0aW9ucy50aGlyZC5pZCk7XG59KTtcblxuLy8gR3Vlc3RzXG5cbmNvbnN0IGd1ZXN0c0lEcyA9IFsn0JLQt9GA0L7RgdC70YvQtScsICfQlNC10YLQuCcsICfQnNC70LDQtNC10L3RhtGLJ107XG5jb25zdCBndWVzdHNEZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKGd1ZXN0c0lEcyk7XG5cbiQoXCIjR3Vlc3RzXCIpLmZpbmQoXCIuY2FsZW5kYXJfX2J0bi0tc3VibWl0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICQoXCIjR3Vlc3RzXCIpLmNsb3Nlc3QoJy5zZWxlY3RfX2Ryb3Bkb3duJykuYWRkQ2xhc3MoJ21vZGFsLWNsb3NlJyk7XG4gICAvLyBUT0RPOiBhcnJvdyBzaG91bGQgbG9zZSBhY3RpdmUgY2xhc3Ncbn0pO1xuXG4kKFwiLkd1ZXN0c1wiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICB2YXIgJGJ1dHRvbiA9ICQodGhpcyk7XG4gIHZhciBpbnB1dCA9ICRidXR0b24ucGFyZW50KCkuZmluZChcImlucHV0XCIpO1xuXG4gIHZhciBuZXdWYWwgPSBzd2l0Y2hBbW91bnQoJGJ1dHRvbiwgaW5wdXQpO1xuXG4gIHZhciB0YXJnZXRJbnB1dCA9ICQoJyNndWVzdHNJbnB1dCcpO1xuICB2YXIgaW5wdXRJRCA9IGlucHV0LmF0dHIoXCJpZFwiKTtcbiAgdXBkYXRlT3B0aW9ucyhndWVzdHNEZWZhdWx0T3B0aW9ucywgaW5wdXRJRCwgbmV3VmFsKTtcbiAgbGV0IGd1ZXN0c0NvdW50ID0gTnVtYmVyKGd1ZXN0c0RlZmF1bHRPcHRpb25zLmZpcnN0LmFtb3VudCkgICsgTnVtYmVyKGd1ZXN0c0RlZmF1bHRPcHRpb25zLnNlY29uZC5hbW91bnQpO1xuICB0YXJnZXRJbnB1dC52YWwoZ3Vlc3RzQ291bnQgKyAnICcgKyAn0LPQvtGB0YLQtdC5JyAgKyAnLCAnICsgZ3Vlc3RzRGVmYXVsdE9wdGlvbnMudGhpcmQuYW1vdW50ICsgJyAnICsgZ3Vlc3RzRGVmYXVsdE9wdGlvbnMudGhpcmQuaWQpO1xufSk7XG5cbi8vIFRPRE86INC+0YLQutGA0YvRgtC40LUg0YHQtdC70LXQutGC0LAg0YEg0LrQu9Cw0LLQuNCw0YLRg9GA0YtcblxuJCgnI2d1ZXN0c0lucHV0JykuZm9jdXMoZnVuY3Rpb24oZXZ0KSB7XG4gICQodGhpcykucmVtb3ZlQXR0cigncGxhY2Vob2xkZXInKTtcbiAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJDbGlja0hhbmRsZXIpO1xufSkuYmx1cihmdW5jdGlvbigpIHtcbiAgJCh0aGlzKS5hdHRyKCdwbGFjZWhvbGRlcicsICczINCz0L7RgdGC0Y8sIDEg0LzQu9Cw0LTQtdC90LXRhicpO1xuICAvLyBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlckNsaWNrSGFuZGxlcik7XG59KTtcblxuJCgnI2NvbWZvcnRJbnB1dCcpLmZvY3VzKGZ1bmN0aW9uKGV2dCkge1xuICAkKHRoaXMpLnJlbW92ZUF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyQ2xpY2tIYW5kbGVyKTtcbn0pLmJsdXIoZnVuY3Rpb24oKSB7XG4gICQodGhpcykuYXR0cigncGxhY2Vob2xkZXInLCAnMiDRgdC/0LDQu9GM0L3QuCwgMiDQutGA0L7QstCw0YLQuCwgLi4uICcpO1xuICAvLyBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlckNsaWNrSGFuZGxlcik7XG59KTtcblxuY29uc3Qgb25FbnRlckNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmKGV2dC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAkKCc6Zm9jdXMnKS5wYXJlbnQoKS5maW5kKCQoJy5zZWxlY3RfX2Ryb3Bkb3duJykpLnRvZ2dsZUNsYXNzKCdtb2RhbC1jbG9zZScpO1xuICAgICQoXCIuc2VhcmNoLWZvcm1fX3NlbGVjdC1hcnJvd1wiKS50b2dnbGVDbGFzcygnc2VhcmNoLWZvcm1fX2Fycm93LS1hY3RpdmUnKTtcbiAgfVxufTtcblxuXG4vLyBTbGlkZXIgalF1ZXJ5XG5cbiQoXCIjc2xpZGVyXCIpLnNsaWRlcih7XG4gIGFuaW1hdGU6IFwic2xvd1wiLFxuXHRtaW46IDUwMDAsXG4gIG1heDogMTAwMDAsXG4gIHN0ZXA6IDEwMCxcblx0dmFsdWVzOiBbNjUwMCw4MTAwXSxcblx0cmFuZ2U6IHRydWUsXG5cdHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdCQoXCJpbnB1dCNtaW5Db3N0XCIpLnZhbCgkKFwiI3NsaWRlclwiKS5zbGlkZXIoXCJ2YWx1ZXNcIiwwKSk7XG5cdFx0JChcImlucHV0I21heENvc3RcIikudmFsKCQoXCIjc2xpZGVyXCIpLnNsaWRlcihcInZhbHVlc1wiLDEpKTtcbiAgICB9LFxuICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpe1xuICAgICAgJChcImlucHV0I21pbkNvc3RcIikudmFsKCQoXCIjc2xpZGVyXCIpLnNsaWRlcihcInZhbHVlc1wiLDApKTtcbiAgICAgICQoXCJpbnB1dCNtYXhDb3N0XCIpLnZhbCgkKFwiI3NsaWRlclwiKS5zbGlkZXIoXCJ2YWx1ZXNcIiwxKSk7XG4gICAgfSxcbn0pO1xuXG4vKiBzaG93IGluaXRpYWwgdmFsdWVzICovXG52YXIgbWluID0gJChcIiNzbGlkZXJcIikuc2xpZGVyKFwidmFsdWVzXCIsIDApO1xudmFyIG1heCA9ICQoXCIjc2xpZGVyXCIpLnNsaWRlcihcInZhbHVlc1wiLCAxKTtcbiQoXCJpbnB1dCNtaW5Db3N0XCIpLnZhbChtaW4pO1xuJChcImlucHV0I21heENvc3RcIikudmFsKG1heCk7XG5cbiQoIFwiaW5wdXQjbWluQ29zdFwiICkuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAkKFwiI3NsaWRlclwiKS5zbGlkZXIoJ3ZhbHVlcycsIDAsICQodGhpcykudmFsKCkpO1xufSk7XG5cbiQoIFwiaW5wdXQjbWF4Q29zdFwiICkuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAkKFwiI3NsaWRlclwiKS5zbGlkZXIoJ3ZhbHVlcycsIDEsICQodGhpcykudmFsKCkpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9